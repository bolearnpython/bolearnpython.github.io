<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>满天星辰</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.xncoding.com/"/>
  <updated>2017-10-23T05:07:40.000Z</updated>
  <id>https://www.xncoding.com/</id>
  
  <author>
    <name>bo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>装饰器</title>
    <link href="https://www.xncoding.com/2017/10/23/python/%E8%A3%85%E9%A5%B0%E5%99%A8.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/装饰器.html</id>
    <published>2017-10-23T13:07:53.939Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-中装饰器的使用"><a href="#Python-中装饰器的使用" class="headerlink" title="Python 中装饰器的使用"></a>Python 中装饰器的使用</h1><p><code>import functools</code></p>
<h2 id="构建不带参数的装饰器"><a href="#构建不带参数的装饰器" class="headerlink" title="构建不带参数的装饰器"></a>构建不带参数的装饰器</h2><pre><code>def logging(func):
    @functools.wraps(func)
    def decorator(*args, **kwargs):
        print(&quot;%s called&quot; % func.__name__)
        result = func(*args, **kwargs)
        print(&quot;%s end&quot; % func.__name__)
        return result
    return decorator


# 使用装饰器
@logging
def test01(a, b):
    print(&quot;in function test01, a=%s, b=%s&quot; % (a, b))
    return 1

# 使用装饰器
@logging
def test02(a, b, c=1):
    print(&quot;in function test02, a=%s, b=%s, c=%s&quot; % (a, b, c))
    return 1
</code></pre><h2 id="构建带参数的装饰器"><a href="#构建带参数的装饰器" class="headerlink" title="构建带参数的装饰器"></a>构建带参数的装饰器</h2><pre><code>def params_chack(*types, **kwtypes):
    def _outer(func):
        @functools.wraps(func)
        def _inner(*args, **kwargs):
            result = [isinstance(_param, _type) for _param, _type in zip(args, types)]
            assert all(result), &quot;params_chack: invalid parameters&quot;
            result = [isinstance(kwargs[_param], kwtypes[_param]) for _param in kwargs if _param in kwtypes]
            assert all(result), &quot;params_chack: invalid parameters&quot;
            return func(*args, **kwargs)
        return _inner
    return _outer


# 使用装饰器
@params_chack(int, (list, tuple))
def test03(a, b):
    print(&quot;in function test03, a=%s, b=%s&quot; % (a, b))
    return 1


# 使用装饰器
@params_chack(int, str, c=(int, str))
def test04(a, b, c):
    print(&quot;in function test04, a=%s, b=%s, c=%s&quot; % (a, b, c))
    return 1


## 在类的成员方法中使用装饰器
class ATest(object):
    @params_chack(object, int, str)
    def test(self, a, b):
        print(&quot;in function test of ATest, a=%s, b=%s&quot; % (a, b))
        return 1


# 同时使用多个装饰器
@logging
@params_chack(int, str, (list, tuple))
def test05(a, b, c):
    print(&quot;in function test05, a=%s, b=%s, c=%s&quot; % (a, b, c))
    return 1
</code></pre><h2 id="构建不带参数的装饰器类"><a href="#构建不带参数的装饰器类" class="headerlink" title="构建不带参数的装饰器类"></a>构建不带参数的装饰器类</h2><pre><code>class Decorator(object):

    def __init__(self, func):
        self.func = func
        return

    def __call__(self, *args, **kwargs):
        print(&quot;%s called&quot; % self.func.__name__)
        result = self.func(*args, **kwargs)
        print(&quot;%s end&quot; % self.func.__name__)
        return result


# 使用装饰器
@Decorator
def test06(a, b, c):
    print(&quot;in function test06, a=%s, b=%s, c=%s&quot; % (a, b, c))
    return 1
</code></pre><h2 id="构建带参数的装饰器类"><a href="#构建带参数的装饰器类" class="headerlink" title="构建带参数的装饰器类"></a>构建带参数的装饰器类</h2><pre><code>class ParamCheck(object):

    def __init__(self, *types, **kwtypes):
        self.types = types
        self.kwtypes = kwtypes
        return

    def __call__(self, func):
        @functools.wraps(func)
        def _inner(*args, **kwargs):
            result = [isinstance(_param, _type) for _param, _type in zip(args, self.types)]
            assert all(result), &quot;params_chack: invalid parameters&quot;
            result = [isinstance(kwargs[_param], self.kwtypes[_param]) for _param in kwargs if _param in self.kwtypes]
            assert all(result), &quot;params_chack: invalid parameters&quot;
            return func(*args, **kwargs)
        return _inner


# 使用装饰器
@ParamCheck(int, str, (list, tuple))
def test07(a, b, c):
    print(&quot;in function test06, a=%s, b=%s, c=%s&quot; % (a, b, c))
    return 1
</code></pre><p>##例子</p>
<h3 id="装饰器实例-函数缓存"><a href="#装饰器实例-函数缓存" class="headerlink" title="装饰器实例: 函数缓存"></a>装饰器实例: 函数缓存</h3><pre><code>def funccache(func):
    cache = {}

    @functools.wraps(func)
    def _inner(*args):
        if args not in cache:
            cache[args] = func(*args)
        return cache[args]
    return _inner


# 使用装饰器
@funccache
def test08(a, b, c):
    # 其他复杂或耗时计算
    return a + b + c
</code></pre><h3 id="使用Python自带的装饰器-property"><a href="#使用Python自带的装饰器-property" class="headerlink" title="使用Python自带的装饰器 @property"></a>使用Python自带的装饰器 @property</h3><pre><code>class People(object):

    def __init__(self):
        self._name = None
        self._age = None
        return

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        self._name = name
        return

    @property
    def age(self):
        return self._age

    @age.setter
    def age(self, age):
        assert 0 &lt; age &lt; 120
        self._age = age
        return
</code></pre><h3 id="类静态方法和类方法"><a href="#类静态方法和类方法" class="headerlink" title="类静态方法和类方法"></a>类静态方法和类方法</h3><pre><code>class Date(object):
    &quot;&quot;&quot;docstring for Date&quot;&quot;&quot;
    __slots__ = (&apos;year&apos;,&apos;month&apos;,&apos;day&apos;)
    def __init__(self, year=0,month=0,day=0):
        self.year = year
        self.month = month
        self.day = day

    @property
    def time(self):
        return &apos;{}-{}-{}&apos;.format(self.year,self.month,self.day)

    @classmethod
    def time_from_string(cls,string):
        year,month,day=string.split(&apos;-&apos;)
        date = cls(year,month,day)
        return date

    @staticmethod
    def check_time(year,month,day):
        year,month,day = map(int,[year,month,day])
        if 1970&lt;year&lt;2018 and 0&lt;month&lt;13 and 0&lt;day&lt;32:
            return year, month, day
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-中装饰器的使用&quot;&gt;&lt;a href=&quot;#Python-中装饰器的使用&quot; class=&quot;headerlink&quot; title=&quot;Python 中装饰器的使用&quot;&gt;&lt;/a&gt;Python 中装饰器的使用&lt;/h1&gt;&lt;p&gt;&lt;code&gt;import functools
    
    </summary>
    
    
      <category term="装饰器，类静态方法和类方法" scheme="https://www.xncoding.com/tags/%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%8C%E7%B1%BB%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python 多进程与多线程</title>
    <link href="https://www.xncoding.com/2017/10/23/python/Python%20%E5%A4%9A%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/Python 多进程与多线程.html</id>
    <published>2017-10-23T13:07:53.936Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-多进程与多线程"><a href="#Python-多进程与多线程" class="headerlink" title="Python 多进程与多线程"></a>Python 多进程与多线程</h1><h2 id="concurrent"><a href="#concurrent" class="headerlink" title="concurrent"></a>concurrent</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import concurrent                   #进程ProcessPoolExecutor</div><div class="line"></div><div class="line">def func(nb):</div><div class="line">    print(str(nb))</div><div class="line">with concurrent.futures.ThreadPoolExecutor(10) as executor:</div><div class="line">    for arg in list(range(99)):</div><div class="line">        executor.submit(func, arg)</div></pre></td></tr></table></figure>
<h2 id="tomorrow"><a href="#tomorrow" class="headerlink" title="tomorrow"></a>tomorrow</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">from  tomorrow import threads</div><div class="line"></div><div class="line">@threads(10)</div><div class="line">def func(nb):</div><div class="line">    print(str(nb))</div><div class="line">for i in range(99):</div><div class="line">    func(i)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-多进程与多线程&quot;&gt;&lt;a href=&quot;#Python-多进程与多线程&quot; class=&quot;headerlink&quot; title=&quot;Python 多进程与多线程&quot;&gt;&lt;/a&gt;Python 多进程与多线程&lt;/h1&gt;&lt;h2 id=&quot;concurrent&quot;&gt;&lt;a hr
    
    </summary>
    
    
      <category term="多线程，多进程" scheme="https://www.xncoding.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%8C%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python加解密</title>
    <link href="https://www.xncoding.com/2017/10/23/python/python%E5%8A%A0%E8%A7%A3%E5%AF%86.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/python加解密.html</id>
    <published>2017-10-23T13:07:53.933Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h1><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><pre><code>import hashlib
sha1 = hashlib.sha1()
sha1.update(&apos;how to use sha1 in &apos;.encode())
print(sha1.hexdigest())
md5 = hashlib.md5()
md5.update(&apos;how to use md5 in&apos;.encode())
print(md5.hexdigest())
</code></pre><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><pre><code>import base64
base64.b64encode(b&apos;binary\x00string&apos;)
base64.b64decode(&apos;YmluYXJ5AHN0cmluZw==&apos;)
</code></pre><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><pre><code>import rsa
# 生成密钥
(pubkey, privkey) = rsa.newkeys(1024)
message = &apos;hello&apos;
crypto = rsa.encrypt(message.encode(), pubkey)
message = rsa.decrypt(crypto, privkey).decode()
print(message)
# 签名
signature = rsa.sign(message.encode(), privkey, &apos;SHA-1&apos;)
# 公钥验证
rsa.verify(message.encode(), signature, pubkey)

rsaPublickey = int(pubkey, 16)
key = rsa.PublicKey(rsaPublickey, int(&apos;10001&apos;, 16))
sp = rsa.encrypt(pw.encode(&quot;utf-8&quot;), key)
sp = binascii.b2a_hex(sp)
</code></pre><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><pre><code>import base64
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
key = b&apos;0123456789abcdef&apos;
iv = b&apos;0123456789abcdef&apos;
text = b&apos;Attack at dawn&apos;
# 转pad
padder = padding.PKCS7(algorithms.AES.block_size).padder()
padded_data = padder.update(text) + padder.finalize()
padded_data = padded_data

cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())

encryptor = cipher.encryptor()
ct = encryptor.update(padded_data) + encryptor.finalize()
ct_base64 = base64.b64encode(ct)
print(ct_base64)

decryptor = cipher.decryptor()
padded_data = decryptor.update(ct) + decryptor.finalize()
# 逆转pad
unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()
data = unpadder.update(padded_data)
text = data + unpadder.finalize()
print(text)
</code></pre><h2 id="binascii"><a href="#binascii" class="headerlink" title="binascii"></a>binascii</h2><pre><code>import binascii
a = b&apos;worker&apos;
c = binascii.hexlify(a)
print(c)
# 这个功能和a2b_hex()一样
print(binascii.unhexlify(c))
a2b_uu(string)                              将以ascii编码的一行数据转化为二进制, 并且返回二进制数据.
b2a_uu(data)                                将二进制数据转化为一行以ascii编码的字符, date的最大长度为45.
a2b_base64(string)                          将一块base64的数据转换为二进制数据, 并返回该二进制数据
b2a_base64(string)                          与上面相反
a2b_hqx(string)                             binhex4格式化的ASCII数据转换为二进制, 没有做RLE解压.
b2a_hqx(data)                               与上相反
rledecode_hqx(data)                         按照binhex4标准, 对data执行RLE解压
rlecode_hqx(data)                           对data执行binhex方式的压缩, 并返回结果
crc_hqx(data, crc)                          计算data的binhex4的crc值
crc32(data[, crc])                          根据crc, 计算crc32(32位检验和数据, 然后将结果 &amp; 0xffffffff(为了在所有Python版本中生成相同的结果, 具体不清楚, 求指导…)
a2b_qp(string[, header])                    quoted - printable data-&gt;bin, 并返回
b2a_qp(data[, quotetabs, istext, header])   与上面相反
hexlify(data)                               返回二进制数据的16进制的表现形式
unhexlify(hexstr)                           与上面相反
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;加密&quot;&gt;&lt;a href=&quot;#加密&quot; class=&quot;headerlink&quot; title=&quot;加密&quot;&gt;&lt;/a&gt;加密&lt;/h1&gt;&lt;h2 id=&quot;hash&quot;&gt;&lt;a href=&quot;#hash&quot; class=&quot;headerlink&quot; title=&quot;hash&quot;&gt;&lt;/a&gt;hash&lt;/h
    
    </summary>
    
    
      <category term="hash,模板rsa,aes,加密,解密" scheme="https://www.xncoding.com/tags/hash-%E6%A8%A1%E6%9D%BFrsa-aes-%E5%8A%A0%E5%AF%86-%E8%A7%A3%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>arrow时间模块</title>
    <link href="https://www.xncoding.com/2017/10/23/python/arrow%E6%97%B6%E9%97%B4%E6%A8%A1%E5%9D%97.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/arrow时间模块.html</id>
    <published>2017-10-23T13:07:53.928Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-日期处理-arrow时间模块"><a href="#Python-日期处理-arrow时间模块" class="headerlink" title="Python 日期处理 arrow时间模块"></a>Python 日期处理 arrow时间模块</h1><h2 id="–-arrow"><a href="#–-arrow" class="headerlink" title="– arrow"></a>– arrow</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">arrow.utcnow()</div><div class="line">arrow.now()</div><div class="line">arrow.now(&apos;US/Pacific&apos;)</div><div class="line">arw=arrow.utcnow()</div><div class="line">arw.datetime</div><div class="line">arw.timestamp</div><div class="line">arw.year</div><div class="line">arw.time()</div><div class="line">arw.date()</div><div class="line">arw.tzinfo</div><div class="line">arw.naive</div></pre></td></tr></table></figure>
<h2 id="–arrow-get"><a href="#–arrow-get" class="headerlink" title="–arrow.get"></a>–arrow.get</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">arrow.get(2013, 5, 5)</div><div class="line">arrow.get(&apos;2013-05-11T21:23:58.970460+00:00&apos;)</div><div class="line">arrow.get(&apos;2013-09-30T15:34:00.000-07:00&apos;)</div><div class="line">arrow.get(&apos;2013-05-05 12:30:45&apos;, &apos;YYYY-MM-DD HH:mm:ss&apos;)</div><div class="line">arrow.get(&apos;June was born in May 1980&apos;, &apos;MMMM YYYY&apos;)</div><div class="line">arrow.get(1367900664)</div><div class="line">arrow.get(1367900664.152325)</div><div class="line">arrow.get(&apos;1367900664&apos;)</div><div class="line">arrow.get(&apos;1367900664.152325&apos;)</div></pre></td></tr></table></figure>
<h2 id="–arrow-format"><a href="#–arrow-format" class="headerlink" title="–arrow.format"></a>–arrow.format</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">local=arrow.now()</div><div class="line">local.format()</div><div class="line">local.format(&apos;YYYY-MM-DD HH:mm:ss ZZ&apos;)</div><div class="line">local.humanize()</div><div class="line">local.humanize(locale=&apos;ko_kr&apos;)</div><div class="line">arrow.utcnow().format(&apos;YYYY-MM-DD HH:mm:ss ZZ&apos;)</div></pre></td></tr></table></figure>
<h2 id="–arrow-change"><a href="#–arrow-change" class="headerlink" title="–arrow -change"></a>–arrow -change</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">arw = arrow.utcnow()</div><div class="line">arw.shift(weeks=+3)</div><div class="line">arw.replace(hour=4, minute=40)</div><div class="line">arw.replace(weeks=+3)</div><div class="line">arw.replace(tzinfo=&apos;US/Pacific&apos;)</div><div class="line">utc.to(&apos;local&apos;)</div><div class="line">utc.to(&apos;local&apos;).to(&apos;utc&apos;)</div></pre></td></tr></table></figure>
<h2 id="–arrow-span"><a href="#–arrow-span" class="headerlink" title="–arrow -span"></a>–arrow -span</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arrow.utcnow().span(&apos;hour&apos;)</div><div class="line">arrow.utcnow().floor(&apos;hour&apos;)</div><div class="line">arrow.utcnow().ceil(&apos;hour&apos;)</div></pre></td></tr></table></figure>
<h2 id="–arrow-range"><a href="#–arrow-range" class="headerlink" title="–arrow -range"></a>–arrow -range</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">start = arrow.get(2013, 5, 5, 12, 30)</div><div class="line">end = arrow.get(2013, 5, 5, 17, 15)</div><div class="line">for r in arrow.Arrow.span_range(&apos;hour&apos;, start, end):</div><div class="line">    print(r)</div><div class="line">    print(repr(r))</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-日期处理-arrow时间模块&quot;&gt;&lt;a href=&quot;#Python-日期处理-arrow时间模块&quot; class=&quot;headerlink&quot; title=&quot;Python 日期处理 arrow时间模块&quot;&gt;&lt;/a&gt;Python 日期处理 arrow时间模块&lt;/
    
    </summary>
    
    
      <category term="arrow,时间模块" scheme="https://www.xncoding.com/tags/arrow-%E6%97%B6%E9%97%B4%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://www.xncoding.com/2017/10/23/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/正则表达式.html</id>
    <published>2017-10-23T13:07:53.925Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-正则表达式-re-模块的使用"><a href="#Python-正则表达式-re-模块的使用" class="headerlink" title="Python 正则表达式 re 模块的使用"></a>Python 正则表达式 re 模块的使用</h1><h2 id="匹配-后者相反"><a href="#匹配-后者相反" class="headerlink" title="匹配  后者相反"></a>匹配  后者相反</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">\d \D   匹配数字</div><div class="line">\s \S   匹配任意的空白符[ \t\n\r\f\v]</div><div class="line">\w \W   匹配字母或数字或下划线或汉字</div><div class="line">\b \B   匹配单词的开始</div><div class="line">^   $   匹配字符串的开始</div><div class="line">\A \Z   匹配开头</div><div class="line">.匹配除换行符以外的任意字符</div><div class="line">*+?&#123;m, n&#125; 分别匹配0 - ;1 - ;0 - 1 ;m - n;</div><div class="line">[^ a]   非a</div><div class="line">[]      #字符集</div></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&apos;\\&apos;  转义</div><div class="line">()分组</div><div class="line">r 转义</div><div class="line">?非贪婪</div></pre></td></tr></table></figure>
<h2 id="re各种方法"><a href="#re各种方法" class="headerlink" title="re各种方法"></a>re各种方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">re.findall(&apos;(?#)abc&apos;, &apos;A\nBc&apos;)</div><div class="line">pat = re.compile(&apos;(^w+).python.org&apos;)  # 编译</div><div class="line">re.search(pat, text)  # 搜索</div><div class="line">re.match(&apos;(?P&lt;shuzi&gt;a.c)&apos;, &apos;abc&apos;).group(&apos;shuzi&apos;)  # 从开头匹配</div><div class="line">re.findall(pat, text)  # list</div><div class="line">group() groups() group(1)</div><div class="line">text = &apos;a, b,,,,c  d&apos;</div><div class="line">re.split(&apos;[, ]+&apos;, text, maxsplit=2)  # MAX=2</div><div class="line">re.sub(&apos;a&apos;, &apos;b&apos;, &apos;abca&apos;, count=1)    # 一次</div><div class="line">log = &apos;2016-12-01&apos;</div><div class="line">re.sub(&apos;(?P&lt;year&gt;\d&#123;4&#125;)-(?P&lt;month&gt;\d&#123;2&#125;)-(?P&lt;day&gt;\d&#123;2&#125;)&apos;,</div><div class="line">       r&apos;\g&lt;day&gt;/\g&lt;month&gt;/\g&lt;year&gt;&apos;, log)</div><div class="line">pattern = &apos;(?P&lt;year&gt;\d&#123;4&#125;)-(?P&lt;month&gt;\d&#123;2&#125;)-(?P&lt;day&gt;\d&#123;2&#125;)&apos;</div><div class="line">m = re.search(pattern, &apos;2016-01-01&apos;)</div><div class="line">m.groupdict()</div><div class="line">m.group(&apos;year&apos;)</div><div class="line">m.group(&apos;month&apos;)</div><div class="line">m.group(&apos;day&apos;)</div></pre></td></tr></table></figure>
<h2 id="捕获-amp-模式"><a href="#捕获-amp-模式" class="headerlink" title="捕获&amp;模式"></a>捕获&amp;模式</h2><h3 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h3><pre><code>捕获(exp)                匹配exp, 并捕获文本到自动命名的组里
(?&lt; name &gt; exp)          匹配exp, 并捕获文本到名称为name的组里，也可以写成(?&apos;name&apos;exp)
(?: exp)                 匹配exp, 不捕获匹配的文本，也不给此分组分配组号
零宽断言(?=exp)          匹配exp前面的位置
(?&lt;= exp)                匹配exp后面的位置
(?!exp)                  匹配后面跟的不是exp的位置
(?&lt;!exp)                 匹配前面不是exp的位置
(?  # ...)               注释，不影响正则表达式其它部分,用法参见 模式 I
(?(id / name)yes | no)   若前面指定id或name的分区匹配成功则执行yes处的正则，否则执行no处的正则
(?P=name)                分组的引用模式，可在同一个正则表达式用引用前面命名过的正则
</code></pre><h3 id="flags-编译时指定的模式"><a href="#flags-编译时指定的模式" class="headerlink" title="flags 编译时指定的模式"></a>flags 编译时指定的模式</h3><pre><code>re.compile(&apos;&apos;, re.I | re.M | re.S)
regex=re.compile(&quot;hello world!&quot;, re.I)MSXU
IgnoreCase(忽略大小写)        匹配时不区分大小写。
Multiline(多行模式)           更改 ^ 和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。
Singleline(单行模式)          更改.的含义，使它与每一个字符匹配（包括换行符&apos;\n&apos;)
IgnorePatternWhitespace(忽略空白)   忽略表达式中的非转义空白并启用由  # 标记的注释。
ExplicitCapture(显式捕获)     仅捕获已被显式命名的组。
X VERBOSE，                   此模式忽略正则表达式中的空白和  # 号的注释
</code></pre><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre><code>mail
pattern = r&quot;(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)&quot;
http
pattern = &apos;^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$&apos;
ip4
pattern = r&apos;^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$&apos;
ip6
pattern = r&apos;^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$&apos;
mac
pattern = r&apos;^(?i)([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$&apos;
1.校验密码强度
    密码的强度必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8 - 10之间
    &apos;^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$&apos;
2.校验中文
    字符串只能是中文
    &apos;^[\\u4e00-\\u9fa5]{0,}$&apos;
3.校验身份证号码
    15位：
    &apos;^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$&apos;
    18位：
    &apos;^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$&apos;
4.校验手机号
    下面是国内 1358开头的手机号正则表达式
    &apos;^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$&apos;判断IE的版本
    &apos;^.*MSIE [5-8](?:\\.[0-9]+)?(?!.*Trident\\/[5-9]\\.0).*$&apos;
5.提取URL链接
    &apos;^(f|ht){1}(tp|tps):\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- ./?%&amp;=]*)?&apos;
6.文件路径及扩展名校验
    &apos;^([a-zA-Z]\\:|\\\\)\\\\([^\\\\]+\\\\)*[^\\/:*?&quot;&lt;&gt;|]+\\.txt(l)?$&apos;
7.查找CSS属性
    &apos;^\\s*[a-zA-Z\\-]+\\s*[:]{1}\\s[a-zA-Z0-9\\s.#]+[;]{1}&apos;
8.抽取注释
    &apos;&lt;!--(.*?)--&gt;&apos;
9.匹配HTML标签
    &apos;&lt;\\/?\\w+((\\s+\\w+(\\s*=\\s*(?:&quot;.*?&quot;|&apos;.*?&apos;|[\\^&apos;&quot;&gt;\\s] + ))?) +\\s*|\\s*)\\/?&gt;&apos;
</code></pre><h2 id="匹配例子"><a href="#匹配例子" class="headerlink" title="匹配例子"></a>匹配例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">1、非负整数：^\d+$ </div><div class="line">2、正整数：^[0-9]*[1-9][0-9]*$ </div><div class="line">3、非正整数：^((-\d+)|(0+))$ </div><div class="line">4、负整数：^-[0-9]*[1-9][0-9]*$ </div><div class="line">5、整数：^-?\d+$ </div><div class="line">6、非负浮点数：^\d+(\.\d+)?$ </div><div class="line">7、正浮点数：^((0-9)+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$ </div><div class="line">8、非正浮点数：^((-\d+\.\d+)?)|(0+(\.0+)?))$ </div><div class="line">9、负浮点数：^(-((正浮点数正则式)))$ </div><div class="line">10、英文字符串：^[A-Za-z]+$ </div><div class="line">11、英文大写串：^[A-Z]+$ </div><div class="line">12、英文小写串：^[a-z]+$ </div><div class="line">13、英文字符数字串：^[A-Za-z0-9]+$ </div><div class="line">14、英数字加下划线串：^\w+$ </div><div class="line">15、E-mail地址：^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$ </div><div class="line">16、URL：^[a-zA-Z]+://(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\s*)?$ </div><div class="line">或：^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&amp;_~`@[\]\&apos;:+!]*([^\&quot;\&quot;])*$ </div><div class="line">17、邮政编码：^[1-9]\d&#123;5&#125;$ </div><div class="line">18、中文：^[\u0391-\uFFE5]+$ </div><div class="line">19、电话号码：^((\(\d&#123;2,3&#125;\))|(\d&#123;3&#125;\-))?(\(0\d&#123;2,3&#125;\)|0\d&#123;2,3&#125;-)?[1-9]\d&#123;6,7&#125;(\-\d&#123;1,4&#125;)?$ </div><div class="line">20、手机号码：^((\(\d&#123;2,3&#125;\))|(\d&#123;3&#125;\-))?13\d&#123;9&#125;$ </div><div class="line">21、双字节字符(包括汉字在内)：^\x00-\xff </div><div class="line">22、匹配首尾空格：(^\s*)|(\s*$)（像vbscript那样的trim函数） </div><div class="line">23、匹配HTML标记：.*| </div><div class="line">24、匹配空行：\n[\s| ]*\r </div><div class="line">25、提取信息中的网络链接：(h|H)(r|R)(e|E)(f|F) *= *(&apos;|&quot;)?(\w|\\|\/|\.)+(&apos;|&quot;| *|&gt;)? </div><div class="line">26、提取信息中的邮件地址：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)* </div><div class="line">27、提取信息中的图片链接：(s|S)(r|R)(c|C) *= *(&apos;|&quot;)?(\w|\\|\/|\.)+(&apos;|&quot;| *|&gt;)? </div><div class="line">28、提取信息中的IP地址：(\d+)\.(\d+)\.(\d+)\.(\d+) </div><div class="line">29、提取信息中的中国手机号码：(86)*0*13\d&#123;9&#125; </div><div class="line">30、提取信息中的中国固定电话号码：(\(\d&#123;3,4&#125;\)|\d&#123;3,4&#125;-|\s)?\d&#123;8&#125; </div><div class="line">31、提取信息中的中国电话号码（包括移动和固定电话）：(\(\d&#123;3,4&#125;\)|\d&#123;3,4&#125;-|\s)?\d&#123;7,14&#125; </div><div class="line">32、提取信息中的中国邮政编码：[1-9]&#123;1&#125;(\d+)&#123;5&#125; </div><div class="line">33、提取信息中的浮点数（即小数）：(-?\d*)\.?\d+ </div><div class="line">34、提取信息中的任何数字 ：(-?\d*)(\.\d+)? </div><div class="line">35、IP：(\d+)\.(\d+)\.(\d+)\.(\d+) </div><div class="line">36、电话区号：/^0\d&#123;2,3&#125;$/ </div><div class="line">37、腾讯QQ号：^[1-9]*[1-9][0-9]*$ </div><div class="line">38、帐号(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$ </div><div class="line">39、中文、英文、数字及下划线：^[\u4e00-\u9fa5_a-zA-Z0-9]+$</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">只能输入数字：“^[0-9]*$”</div><div class="line">只能输入n位的数字：“^d&#123;n&#125;$”</div><div class="line">只能输入至少n位数字：“^d&#123;n,&#125;$”</div><div class="line">只能输入m-n位的数字：“^d&#123;m,n&#125;$”</div><div class="line">只能输入零和非零开头的数字：“^(0|[1-9][0-9]*)$”</div><div class="line">只能输入有两位小数的正实数：“^[0-9]+(.[0-9]&#123;2&#125;)?$”</div><div class="line">只能输入有1-3位小数的正实数：“^[0-9]+(.[0-9]&#123;1,3&#125;)?$”</div><div class="line">只能输入非零的正整数：“^+?[1-9][0-9]*$”</div><div class="line">只能输入非零的负整数：“^-[1-9][0-9]*$”</div><div class="line">只能输入长度为3的字符：“^.&#123;3&#125;$”</div><div class="line">只能输入由26个英文字母组成的字符串：“^[A-Za-z]+$”</div><div class="line">只能输入由26个大写英文字母组成的字符串：“^[A-Z]+$”</div><div class="line">只能输入由26个小写英文字母组成的字符串：“^[a-z]+$”</div><div class="line">只能输入由数字和26个英文字母组成的字符串：“^[A-Za-z0-9]+$”</div><div class="line">只能输入由数字、26个英文字母或者下划线组成的字符串：“^w+$”</div><div class="line">验证用户密码:“^[a-zA-Z]w&#123;5,17&#125;$”正确格式为：以字母开头，长度在6-18之间，</div><div class="line"></div><div class="line">只能包含字符、数字和下划线。</div><div class="line">验证是否含有^%&amp;’,;=?$”等字符：“[^%&amp;&apos;,;=?$x22]+”</div><div class="line">只能输入汉字：“^[u4e00-u9fa5],&#123;0,&#125;$”</div><div class="line">验证Email地址：“^w+[-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*$”</div><div class="line">验证InternetURL：“^http://([w-]+.)+[w-]+(/[w-./?%&amp;=]*)?$”</div><div class="line">验证电话号码：“^((d&#123;3,4&#125;)|d&#123;3,4&#125;-)?d&#123;7,8&#125;$”</div><div class="line"></div><div class="line">正确格式为：“XXXX-XXXXXXX”，“XXXX-XXXXXXXX”，“XXX-XXXXXXX”，</div><div class="line"></div><div class="line">“XXX-XXXXXXXX”，“XXXXXXX”，“XXXXXXXX”。</div><div class="line">验证身份证号（15位或18位数字）：“^d&#123;15&#125;|d&#123;&#125;18$”</div><div class="line">验证一年的12个月：“^(0?[1-9]|1[0-2])$”正确格式为：“01”-“09”和“1”“12”</div><div class="line">验证一个月的31天：“^((0?[1-9])|((1|2)[0-9])|30|31)$”</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-正则表达式-re-模块的使用&quot;&gt;&lt;a href=&quot;#Python-正则表达式-re-模块的使用&quot; class=&quot;headerlink&quot; title=&quot;Python 正则表达式 re 模块的使用&quot;&gt;&lt;/a&gt;Python 正则表达式 re 模块的使用&lt;/
    
    </summary>
    
    
      <category term="正则表达式,re" scheme="https://www.xncoding.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-re/"/>
    
  </entry>
  
  <entry>
    <title>conda &amp; pip</title>
    <link href="https://www.xncoding.com/2017/10/23/python/conda%20&amp;%20pip.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/conda &amp; pip.html</id>
    <published>2017-10-23T13:07:53.922Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="conda-amp-pip"><a href="#conda-amp-pip" class="headerlink" title="conda &amp; pip"></a>conda &amp; pip</h1><h2 id="简单的使用"><a href="#简单的使用" class="headerlink" title="简单的使用"></a>简单的使用</h2><pre><code>执行python -m venv myenv1即可创建虚拟环境myenv1
*nix系统下，使用命令pyvenv。
Windows下命令行myenv1\Scripts\activate.bat进入环境，
使用deactivate退出虚拟环境。
</code></pre><h2 id="管理软件"><a href="#管理软件" class="headerlink" title="管理软件"></a>管理软件</h2><pre><code># 将anaconda的bin目录加入PATH，根据版本不同，也可能是~/anaconda3/bin
echo &apos;export PATH=&quot;~/anaconda2/bin:$PATH&quot;&apos; &gt;&gt; ~/.bashrc
# 更新bashrc以立即生效
source ~/.bashrc
# 创建一个名为python34的环境，指定Python版本是3.4（不用管是3.4.x，conda会为我们自动寻找3.4.x中的最新版本）
conda create --name python34 python=3.4
# conda create -n bunnies python=3 Astroid Babel
# conda info -envis
# 安装好后，使用activate激活某个环境
activate python34 # for Windows
source activate python34 # for Linux &amp; Mac
# 激活后，会发现terminal输入的地方多了python34的字样，实际上，此时系统做的事情就是把默认2.7环境从PATH中去除，再把3.4对应的命令加入PATH
# 此时，再次输入
python --version
# 可以得到`Python 3.4.5 :: Anaconda 4.1.1 (64-bit)`，即系统已经切换到了3.4的环境
# 如果想返回默认的python 2.7环境，运行
deactivate python34 # for Windows
source deactivate python34 # for Linux &amp; Mac
# 删除一个已有的环境
conda remove --name python34 --all
# 通过克隆来复制一个环境。这儿将通过克隆snowfllakes来创建一个称为flowers的副本。
conda create -n flowers --clone snowflakes


# 安装scipy
conda install scipy
# conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.4，conda会同时安装numpy和mkl（运算加速的库）
# 查看当前环境下已安装的包
conda list
# 查看某个指定环境的已安装包
conda list -n python34
# 查找package信息
conda search numpy
# 安装package
conda install -n python34 numpy
# 如果不用-n指定环境名称，则被安装在当前活跃环境
# 也可以通过-c指定通过某个channel安装
# 更新package
conda update -n python34 numpy
# 删除package
conda remove -n python34 numpy


# 更新conda，保持conda最新
conda update conda
# 更新anaconda
conda update anaconda
# 更新python
conda update python
# 假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本

# 在当前环境下安装anaconda包集合
conda install anaconda
# 结合创建环境的命令，以上操作可以合并为
conda create -n python34 python=3.4 anaconda
# 也可以不用全部安装，根据需求安装自己需要的package即可


# 添加Anaconda的TUNA镜像
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
# 设置搜索时显示通道地址
conda config --set show_channel_urls yes
</code></pre><h2 id="改源"><a href="#改源" class="headerlink" title="改源"></a>改源</h2><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><pre><code>linux下运行命令
vi ~/.pip/pip.conf
然后写入如下内容并保存
[global]
trusted-host =  mirrors.aliyun.com
index-url = http://mirrors.aliyun.com/pypi/simple
</code></pre><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><pre><code>import os
ini = &quot;[global]\nindex-url = https://pypi.doubanio.com/simple/\n&quot;
pippath = os.environ[&quot;USERPROFILE&quot;]+&quot;\\pip\\&quot;
exec(&quot;if not os.path.exists(pippath):\n\tos.mkdir(pippath)&quot;)
open(pippath+&quot;/pip.ini&quot;, &quot;w+&quot;).write(ini)
</code></pre><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><pre><code>pip install SomePackage＃最新版本
pip install SomePackage == 1.0.4＃具体版本
pip install&apos;SomePackage&gt; = 1.0.4&apos;＃最小版本
pip install --upgrade SomePackage
pip download SomePackage
show list search uninstall
# 导出当前已经安装包
pip freeze &gt; requirements.txt
pip install -r requirements.txt
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;conda-amp-pip&quot;&gt;&lt;a href=&quot;#conda-amp-pip&quot; class=&quot;headerlink&quot; title=&quot;conda &amp;amp; pip&quot;&gt;&lt;/a&gt;conda &amp;amp; pip&lt;/h1&gt;&lt;h2 id=&quot;简单的使用&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
      <category term="环境搭建,pip,conda,改源" scheme="https://www.xncoding.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-pip-conda-%E6%94%B9%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>ipython</title>
    <link href="https://www.xncoding.com/2017/10/23/python/ipython.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/ipython.html</id>
    <published>2017-10-23T13:07:53.919Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ipython"><a href="#ipython" class="headerlink" title="ipython"></a>ipython</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><pre><code>. % run命令
ipython - -pylab
Tab键
内省?
</code></pre><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><pre><code>Ctrl - P    或上箭头键 后向搜索命令历史中以当前输入的文本开头的命令
Ctrl - N   或下箭头键 前向搜索命令历史中以当前输入的文本开头的命令
Ctrl - R   按行读取的反向历史搜索（部分匹配）
Ctrl - Shift - v   从剪贴板粘贴文本
Ctrl - C   中止当前正在执行的代码
Ctrl - A   将光标移动到行首
Ctrl - E   将光标移动到行尾
Ctrl - K   删除从光标开始至行尾的文本
Ctrl - U   清除当前行的所有文本译注12
Ctrl - F   将光标向前移动一个字符
Ctrl - b   将光标向后移动一个字符
Ctrl - L   清屏
</code></pre><h2 id="魔法"><a href="#魔法" class="headerlink" title="魔法"></a>魔法</h2><pre><code>%quickref 显示IPython的快速参考
%magic 显示所有魔术命令的详细文档
%debug 从最新的异常跟踪的底部进入交互式调试器
%hist 打印命令的输入（可选输出）历史
%pdb 在异常发生后自动进入调试器
%paste 执行剪贴板中的Python代码
%cpaste 打开一个特殊提示符以便手工粘贴待执行的Python代码
%reset 删除interactive命名空间中的全部变量 / 名称
%page OBJECT 通过分页器打印输出OBJECT
%run script.py 在IPython中执行一个Python脚本文件
%prun statement 通过cProfile执行statement，并打印分析器的输出结果
%time statement 报告statement的执行时间
%timeit statement 多次执行statement以计算系综平均执行时间。对那些执行时  间非常小的代码很有用
%who、% who_ls、% whos 显示interactive命名空间中定义的变量，信息级别 / 冗余度可变
%xdel variable 删除variable，并尝试清除其在IPython中的对象上的一切引用
</code></pre><h2 id="搜索并重用命令历史"><a href="#搜索并重用命令历史" class="headerlink" title="搜索并重用命令历史"></a>搜索并重用命令历史</h2><pre><code>上箭头键：搜索出命令历史中第一个与你输入的字符相匹配的命令。多次按将会在历史中不断搜索。
下箭头键：子命令历史中向前搜索。
Ctrl - R：部分增量搜素，循环在命令历史中搜素与输入相符的行。
</code></pre><h2 id="输入和输出变量"><a href="#输入和输出变量" class="headerlink" title="输入和输出变量"></a>输入和输出变量</h2><pre><code>%hist 打印输入历史
%reset 清空interactive命名空间，可选择是否清空输入和输出缓存
%xdel 从IPython中移除特定对象的一切引用
</code></pre><h2 id="记录输入和输出"><a href="#记录输入和输出" class="headerlink" title="记录输入和输出"></a>记录输入和输出</h2><pre><code>执行 % logstart能够开始记录控制台回话，包括输入和输出。与之配合的命令有：% logoff、% logon、% logstate、% logstop
</code></pre><h2 id="与系统相关的命令："><a href="#与系统相关的命令：" class="headerlink" title="与系统相关的命令："></a>与系统相关的命令：</h2><pre><code>!cmd 在系统shell中执行cmd
output =!cmd args 执行cmd，并将结果放在output中
%bookmark 使用IPython的目录书签系统
%cd directory 更改工作目录
%pwd 返回系统当前工作目录
%env 以字典形式返回系统环境变量
</code></pre><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><pre><code>在IPython中以感叹号(!)开头的命令表示其后的所有内容将会在系统shell中执行。
使用！时，还允许使用当前环境中定义的Python值，只需在变量名前加上美元($)符号即可：
foo = &apos;54678&apos;
!mkdir $foo
</code></pre><h2 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h2><pre><code>%bookmark pys &apos;C:/User/xxx/PyWorkSpace&apos;
定义好书签之后，就可以在执行魔术命令 % cd时使用这些书签了：
cd pys
列出所有书签：
%bookmark - l
书签名与目录冲突
%bookmark - b pys  # 强制使用书签目录
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ipython&quot;&gt;&lt;a href=&quot;#ipython&quot; class=&quot;headerlink&quot; title=&quot;ipython&quot;&gt;&lt;/a&gt;ipython&lt;/h1&gt;&lt;h2 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
    
      <category term="ipython,快捷键" scheme="https://www.xncoding.com/tags/ipython-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>logging</title>
    <link href="https://www.xncoding.com/2017/10/23/python/logging.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/logging.html</id>
    <published>2017-10-23T13:07:53.916Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre><code>import logging

# 创建一个logger
logger = logging.getLogger(&apos;mylogger&apos;)
logger.setLevel(logging.DEBUG)

# 创建一个handler，用于写入日志文件
fh = logging.FileHandler(&apos;d://test.log&apos;)
fh.setLevel(logging.DEBUG)

# 再创建一个handler，用于输出到控制台
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)

# 定义handler的输出格式
formatter = logging.Formatter(&apos;%(asctime)s - %(name)s - %(levelname)s - %(message)s&apos;)
fh.setFormatter(formatter)
ch.setFormatter(formatter)

# 给logger添加handler
logger.addHandler(fh)
logger.addHandler(ch)

# 记录一条日志
logger.info(&apos;foorbar&apos;)
</code></pre><h2 id="导入配置"><a href="#导入配置" class="headerlink" title="导入配置"></a>导入配置</h2><pre><code>import logging
from logging.config import dictConfig

logging_config = dict(
    version = 1,
    formatters = {
        &apos;f&apos;: {&apos;format&apos;:
              &apos;%(asctime)s %(name)-12s %(levelname)-8s %(message)s&apos;}
        },
    handlers = {
        &apos;h&apos;: {&apos;class&apos;: &apos;logging.StreamHandler&apos;,
              &apos;formatter&apos;: &apos;f&apos;,
              &apos;level&apos;: logging.DEBUG}
        },
    loggers = {
        &apos;root&apos;: {&apos;handlers&apos;: [&apos;h&apos;],
                 &apos;level&apos;: logging.DEBUG}
        }
)

dictConfig(logging_config)

logger = logging.getLogger()
logger.debug(&apos;often makes a very good meal of %s&apos;, &apos;visiting tourists&apos;)
</code></pre><h2 id="logging基本配置"><a href="#logging基本配置" class="headerlink" title="logging基本配置"></a>logging基本配置</h2><pre><code>import logging
# 创建一个log.log日志文件
logging.basicConfig(filename=&apos;d:\\log.log&apos;,
                    # 格式化的字符串
                    format=&apos;%(asctime)s - %(name)s - %(levelname)s - %(module)s: %(message)s&apos;,
                    # 时间
                    datefmt=&apos;%Y-%m-%d %H:%M:%S %p&apos;,
                    # 错误级别
                    level=logging.DEBUG
                    )
filemode=&apos;a&apos;

logging.critical(&apos;critical&apos;)
logging.error(&apos;error&apos;)
logging.warning(&apos;warning&apos;)
logging.info(&apos;info&apos;)
logging.debug(&apos;debug&apos;)
logging.log(logging.INFO, &apos;NOTSET&apos;)
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;logging&quot;&gt;&lt;a href=&quot;#logging&quot; class=&quot;headerlink&quot; title=&quot;logging&quot;&gt;&lt;/a&gt;logging&lt;/h1&gt;&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使
    
    </summary>
    
    
      <category term="log,logging" scheme="https://www.xncoding.com/tags/log-logging/"/>
    
  </entry>
  
  <entry>
    <title>注册表 pyregedit</title>
    <link href="https://www.xncoding.com/2017/10/23/python/%E6%B3%A8%E5%86%8C%E8%A1%A8%20pyregedit.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/注册表 pyregedit.html</id>
    <published>2017-10-23T13:07:53.913Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注册表-pyregedit"><a href="#注册表-pyregedit" class="headerlink" title="注册表 pyregedit"></a>注册表 pyregedit</h1><h2 id="pyregedit"><a href="#pyregedit" class="headerlink" title="pyregedit"></a>pyregedit</h2><pre><code>import win32api
import win32con
import os

# 权限设置
REG_FLAGS = win32con.WRITE_OWNER | win32con.KEY_WOW64_64KEY | win32con.KEY_ALL_ACCESS

#root (根节点)
HKEY_CLASSES_ROOT = win32con.HKEY_CLASSES_ROOT
HKEY_CURRENT_USER = win32con.HKEY_CURRENT_USER
HKEY_LOCAL_MACHINE = win32con.HKEY_LOCAL_MACHINE
HKEY_USERS = win32con.HKEY_USERS
HKEY_CURRENT_CONFIG = win32con.HKEY_CURRENT_CONFIG

# value type (值类型)
REG_SZ = win32con.REG_SZ
REG_BINARY = win32con.REG_BINARY
REG_DWORD = win32con.REG_DWORD
REG_QWORD = win32con.REG_QWORD
REG_MULTI_SZ = win32con.REG_MULTI_SZ
REG_EXPAND_SZ = win32con.REG_EXPAND_SZ

class RegEdit():
    def __init__(self, root, path):
        &quot;&quot;&quot;init method (key root, key path)&quot;&quot;&quot;
        self.root = root
        self.path = path

    # 判断键是否存在
    def check_key(self):
        &quot;&quot;&quot;check key is exist or not&quot;&quot;&quot;
        try:
            key = self.get_key()
            key.close()
            return True
        except Exception as e:
            return False

    # 获取键
    def get_key(self):
        &quot;&quot;&quot;get key object&quot;&quot;&quot;
        key = win32api.RegOpenKeyEx(self.root, self.path, 0, REG_FLAGS)
        return key

    # 获取子键名称
    def get_sub_keys(self):
        &quot;&quot;&quot;get key&apos;s sub keys&quot;&quot;&quot;
        key = self.get_key()

        for item in win32api.RegEnumKeyEx(key):
            yield item[0]
        key.close()

    # 获取全部值
    def get_values(self):
        &quot;&quot;&quot;get key&apos;s values&quot;&quot;&quot;
        key = self.get_key()

        try:
            i = 0
            while True:
                # 循环枚举值
                yield win32api.RegEnumValue(key, i)
                i += 1
        except Exception as e:
            pass
        finally:
            key.close()

    # 根据名称获取值
    def get_value(self, value_name):
        &quot;&quot;&quot;get value by name&quot;&quot;&quot;
        key = self.get_key()
        value, value_type = win32api.RegQueryValueEx(key, value_name)
        return value, value_type

    # 创建键
    def create_key(self):
        &quot;&quot;&quot;create and return a key&quot;&quot;&quot;
        key, _ = win32api.RegCreateKeyEx(self.root, self.path, REG_FLAGS)
        return key

    # 创建子键
    def create_sub_key(self, sub_key_name):
        &quot;&quot;&quot;create a sub key&quot;&quot;&quot;
        sub_key_path = os.path.join(self.path, sub_key_name)
        sub_key, _ = win32api.RegCreateKeyEx(
            self.root, sub_key_path, REG_FLAGS)
        return sub_key

    # 创建值
    def create_value(self, value_name, value_type=REG_SZ, value_value=&apos;&apos;):
        &quot;&quot;&quot;create value&quot;&quot;&quot;
        key = self.create_key()
        win32api.RegSetValueEx(key, value_name, 0, value_type, value_value)

        key.close()
        return True

    # 删除当前键
    def delete_current_key(self):
        &quot;&quot;&quot;delete current key&quot;&quot;&quot;
        parent, key_name = os.path.split(self.path)
        key_parent = win32api.RegOpenKeyEx(self.root, parent, 0, REG_FLAGS)
        win32api.RegDeleteKeyEx(key_parent, key_name)

        key_parent.close()
        return True

    # 删除子键
    def delete_sub_key(self, sub_key_name):
        &quot;&quot;&quot;delete sub key&quot;&quot;&quot;
        key = self.get_key()
        win32api.RegDeleteKeyEx(key, sub_key_name)

        key.close()
        return True

    # 删除值
    def delete_value(self, value_name):
        &quot;&quot;&quot;delete a value item&quot;&quot;&quot;
        key = self.get_key()
        win32api.RegDeleteValue(key, value_name)

        key.close()
        return True
</code></pre><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><pre><code>import pyregedit
root = pyregedit.HKEY_LOCAL_MACHINE
path = r&quot;SYSTEM\CurrentControlSet\Control\Class\{4D36E972-E325-11CE-BFC1-08002bE10318}\0002&quot;
reg = pyregedit.RegEdit(root, path)
#判断键是否存在
if reg.check_key():
    #获取键(可用于其他操作)
    key = reg.get_key()
else:
    #创建键
    key = reg.create_key()

#创建值
reg.create_value(&apos;NetworkAddress&apos;, pyregedit.REG_SZ, &apos;020E2637D888&apos;)

#创建子键
reg.create_sub_key(&apos;sub_test&apos;)

#获取子键名称列表
print(list(reg.get_sub_keys()))

#获取全部值
print(list(reg.get_values()))

#根据具体名称获取某个值的数据
print(reg.get_value(&apos;NetworkAddress&apos;))

#删除值
reg.delete_value(&apos;test_name&apos;)

#删除子键
reg.delete_sub_key(&apos;sub_test&apos;)

#删除当前键
reg.delete_curretn_key()
</code></pre><h2 id="改mac"><a href="#改mac" class="headerlink" title="改mac"></a>改mac</h2><pre><code>import random
def randomMAC():
    mac = [ 0x52, 0x54, 0x00,
        random.randint(0x00, 0x7f),
        random.randint(0x00, 0xff),
        random.randint(0x00, 0xff) ]
    return &apos;&apos;.join(map(lambda x: &quot;%02x&quot; % x, mac)).upper()
import pyregedit
root = pyregedit.HKEY_LOCAL_MACHINE
path = r&quot;SYSTEM\CurrentControlSet\Control\Class\{4D36E972-E325-11CE-BFC1-08002bE10318}\0002&quot;
reg = pyregedit.RegEdit(root, path)
mac=randomMAC()
#创建值
reg.create_value(&apos;NetworkAddress&apos;, pyregedit.REG_SZ, mac)
print(reg.get_value(&apos;NetworkAddress&apos;))

import shutil
shutil.rmtree(r&apos;C:\Users\Administrator\AppData\Roaming\Lantern&apos;)
print (&apos;ok&apos;)
import requests
r=requests.get(&apos;http://192.168.0.1/goform/SysToolReboot&apos;,timeout=4)
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;注册表-pyregedit&quot;&gt;&lt;a href=&quot;#注册表-pyregedit&quot; class=&quot;headerlink&quot; title=&quot;注册表 pyregedit&quot;&gt;&lt;/a&gt;注册表 pyregedit&lt;/h1&gt;&lt;h2 id=&quot;pyregedit&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
      <category term="注册表" scheme="https://www.xncoding.com/tags/%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>pythonic</title>
    <link href="https://www.xncoding.com/2017/10/23/python/pythonic.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/pythonic.html</id>
    <published>2017-10-23T13:07:53.909Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一行代码"><a href="#一行代码" class="headerlink" title="一行代码"></a>一行代码</h2><pre><code># 一行代码实现变量值互换
a, b = 1, 2; a, b = b, a


# 一行代码解决FizzBuzz问题: 打印数字1到100, 3的倍数打印“Fizz”来替换这个数, 5的倍数打印“Buzz”, 既是3又是5的倍数的打印“FizzBuzz”
print(&apos; &apos;.join([&quot;fizz&quot;[x % 3 * 4:]+&quot;buzz&quot;[x % 5 * 4:] or str(x) for x in range(1, 101)]))


# 一行代码输出特定字符&quot;Love&quot;拼成的心形
print(&apos;\n&apos;.join([&apos;&apos;.join([(&apos;Love&apos;[(x-y) % len(&apos;Love&apos;)] if ((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3 &lt;= 0 else &apos; &apos;) for x in range(-30, 30)]) for y in range(30, -30, -1)]))


# 一行代码输出Mandelbrot图像: Mandelbrot图像中的每个位置都对应于公式N=x+y*i中的一个复数
print(&apos;\n&apos;.join([&apos;&apos;.join([&apos;*&apos;if abs((lambda a: lambda z, c, n: a(a, z, c, n))(lambda s, z, c, n: z if n == 0 else s(s, z*z+c, c, n-1))(0, 0.02*x+0.05j*y, 40)) &lt; 2 else &apos; &apos; for x in range(-80, 20)]) for y in range(-20, 20)]))


# 一行代码打印九九乘法表
print(&apos;\n&apos;.join([&apos; &apos;.join([&apos;%s*%s=%-2s&apos; % (y, x, x*y) for y in range(1, x+1)]) for x in range(1, 10)]))


# 一行代码计算出1-100之间的素数(两个版本)
print(&apos; &apos;.join([str(item) for item in filter(lambda x: not [x % i for i in range(2, x) if x % i == 0], range(2, 101))]))
print(&apos; &apos;.join([str(item) for item in filter(lambda x: all(map(lambda p: x % p != 0, range(2, x))), range(2, 101))]))


# 一行代码输出斐波那契数列
print([x[0] for x in [(a[i][0], a.append([a[i][1], a[i][0]+a[i][1]])) for a in ([[1, 1]], ) for i in range(30)]])


# 一行代码实现快排算法
qsort = lambda arr: len(arr) &gt; 1 and qsort(list(filter(lambda x: x &lt;= arr[0], arr[1:]))) + arr[0:1] + qsort(list(filter(lambda x: x &gt; arr[0], arr[1:]))) or arr


# 一行代码解决八皇后问题
[__import__(&apos;sys&apos;).stdout.write(&apos;\n&apos;.join(&apos;.&apos; * i + &apos;Q&apos; + &apos;.&apos; * (8-i-1) for i in vec) + &quot;\n========\n&quot;) for vec in __import__(&apos;itertools&apos;).permutations(range(8)) if 8 == len(set(vec[i]+i for i in range(8))) == len(set(vec[i]-i for i in range(8)))]


# 一行代码实现数组的flatten功能: 将多维数组转化为一维
flatten = lambda x: [y for l in x for y in flatten(l)] if isinstance(x, list) else [x]


# 一行代码实现list, 有点类似与上个功能的反功能
array = lambda x: [x[i:i+3] for i in range(0, len(x), 3)]


# 一行代码实现求解2的1000次方的各位数之和
print(sum(map(int, str(2**1000))))
</code></pre><h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><pre><code># 内置库contextlib的使用
@contextlib.contextmanager
def open_func(file_name):
    # __enter__方法
    print(&quot;open file:&quot;, file_name, &quot;in __enter__&quot;)
    file_handler = open(file_name, &quot;r&quot;)

    yield file_handler

    # __exit__方法
    print(&quot;close file:&quot;, file_name, &quot;in __exit__&quot;)
    file_handler.close()
    return

# 使用实例
with open_func(&quot;python_base.py&quot;) as file_in:
    for line in file_in:
        print(line)
        break


# 内置库contextlib的使用
class MyOpen2(object):

    def __init__(self, file_name):
        &quot;&quot;&quot;初始化方法&quot;&quot;&quot;
        self.file_handler = open(file_name, &quot;r&quot;)
        return

    def close(self):
        &quot;&quot;&quot;关闭文件，会被自动调用&quot;&quot;&quot;
        print(&quot;call close in MyOpen2&quot;)
        if self.file_handler:
            self.file_handler.close()
        return

# 使用实例
with contextlib.closing(MyOpen2(&quot;python_base.py&quot;)) as file_in:
    pass
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一行代码&quot;&gt;&lt;a href=&quot;#一行代码&quot; class=&quot;headerlink&quot; title=&quot;一行代码&quot;&gt;&lt;/a&gt;一行代码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;# 一行代码实现变量值互换
a, b = 1, 2; a, b = b, a


# 一行代码解决FizzB
    
    </summary>
    
    
      <category term="with,一行代码" scheme="https://www.xncoding.com/tags/with-%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>函数</title>
    <link href="https://www.xncoding.com/2017/10/23/python/%E5%87%BD%E6%95%B0.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/函数.html</id>
    <published>2017-10-23T13:07:53.906Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><pre><code>from operator import add
import operator as op
from functools import partial, reduce

# 列表解析
a_list = [item**2 for item in range(5)]
print(a_list)

# 字典解析
a_dict = {&quot;%d^2&quot; % item: item**2 for item in range(5)}
print(a_dict)

# 生成器
a_generator = (item**2 for item in range(5))
print(a_generator)
print(next(a_generator))
print(next(a_generator))

# iter函数和next函数
a_list_generator = iter(a_list)
print(next(a_list_generator))
print(next(a_list_generator))
print(type(a_list), type(a_list_generator))

# lambda表达式
a_func = lambda x, y: x**y
print(a_func(2, 3))

# map函数
print(map(abs, range(-4, 5)))
print(list(map(abs, range(-4, 5))))
print(list(map(lambda x: x**2, range(5))))
print(list(map(lambda x, y: x**y, range(1, 5), range(1, 5))))
print(list(map(pow, [3, 4, 5], [1, 2, 3])))

# reduce函数
print(reduce(lambda x, y: x + y, range(10)))
print(reduce(lambda x, y: x + y, range(10), 100))
print(reduce(lambda x, y: x + y, [[1, 2], [3, 4]], [0]))

# filter函数
print(filter(None, range(-4, 5)))
print(list(filter(None, range(-4, 5))))
print(list(filter(lambda x: x &gt; 0, range(-4, 5))))

# all、any函数
print(all([0, 1, 2]))
print(any([0, 1, 2]))

# enumerate函数
for index, item in enumerate(range(5)):
    print(&quot;%d: %d&quot; % (index, item))

# zip函数
for a, b in zip([1, 2, 3], [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]):
    print(a, b)
a_dict = dict(zip([1, 2, 3], [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]))
print(a_dict)

# partial函数
print(int(&quot;10010&quot;, base=2))
int_base_2 = partial(int, base=2)
print(int_base_2(&quot;10010&quot;))

# operator.add函数
print(reduce(lambda x, y: x + y, range(10)))
print(reduce(add, range(10)))

# operator
def print_table(operator):
    for x in range(1, 3):
        for y in range(1, 3):
            print(str(operator(x, y)) + &apos;\n&apos;)

for operator in (op.add, op.sub, op.mul, op.truediv):
    print_table(operator)

from functools import partial
blocks = []
for block in iter(partial(f.read, 32), &apos;&apos;):
    blocks.append(block)
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;from operator import add
import operator as op
from functools 
    
    </summary>
    
    
      <category term="函数" scheme="https://www.xncoding.com/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>协程</title>
    <link href="https://www.xncoding.com/2017/10/23/python/%E5%8D%8F%E7%A8%8B.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/协程.html</id>
    <published>2017-10-23T13:07:53.903Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><pre><code>import asyncio
import aiohttp
import threading

# 生产者、消费者例子
def consumer():         # 定义消费者，由于有yeild关键词，此消费者为一个生成器
    print(&quot;[Consumer] Init Consumer ......&quot;)
    r = &quot;init ok&quot;       # 初始化返回结果，并在启动消费者时，返回给生产者
    while True:
        n = yield r     # 消费者通过yield关键词接收生产者产生的消息，同时返回结果给生产者
        print(&quot;[Consumer] conusme n = %s, r = %s&quot; % (n, r))
        r = &quot;consume %s OK&quot; % n     # 消费者消费结果，下个循环返回给生产者

def produce(c):         # 定义生产者，此时的 c 为一个生成器
    print(&quot;[Producer] Init Producer ......&quot;)
    r = c.send(None)    # 启动消费者生成器，同时第一次接收返回结果
    print(&quot;[Producer] Start Consumer, return %s&quot; % r)
    n = 0
    while n &lt; 5:
        n += 1
        print(&quot;[Producer] While, Producing %s ......&quot; % n)
        r = c.send(n)   # 向消费者发送消息，同时准备接收结果。此时会切换到消费者执行
        print(&quot;[Producer] Consumer return: %s&quot; % r)
    c.close()           # 关闭消费者生成器
    print(&quot;[Producer] Close Producer ......&quot;)

# produce(consumer())

# 异步IO例子：适配Python3.4，使用asyncio库
@asyncio.coroutine
def hello(index):                   # 通过装饰器asyncio.coroutine定义协程
    print(&apos;Hello world! index=%s, thread=%s&apos; %
          (index, threading.currentThread()))
    yield from asyncio.sleep(1)     # 模拟IO任务
    print(&apos;Hello again! index=%s, thread=%s&apos; %
          (index, threading.currentThread()))@asyncio.coroutine

loop = asyncio.get_event_loop()     # 得到一个事件循环模型
tasks = [hello(1), hello(2)]        # 初始化任务列表
loop.run_until_complete(asyncio.wait(tasks))    # 执行任务
loop.close()                        # 关闭事件循环列表

# 异步IO例子：适配Python3.5，使用async和await关键字
async def hello1(index):            # 通过关键字async定义协程
    print(&apos;Hello world! index=%s, thread=%s&apos; %
          (index, threading.currentThread()))
    await asyncio.sleep(1)          # 模拟IO任务
    print(&apos;Hello again! index=%s, thread=%s&apos; %
          (index, threading.currentThread()))

loop = asyncio.get_event_loop()     # 得到一个事件循环模型
tasks = [hello1(1), hello1(2)]      # 初始化任务列表
loop.run_until_complete(asyncio.wait(tasks))    # 执行任务
loop.close()                        # 关闭事件循环列表

# aiohttp 实例
async def get(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            print(url, resp.status)
            print(url, await resp.text())

loop = asyncio.get_event_loop()     # 得到一个事件循环模型
tasks = [                           # 初始化任务列表
    get(&quot;http://zhushou.360.cn/detail/index/soft_id/3283370&quot;),
    get(&quot;http://zhushou.360.cn/detail/index/soft_id/3264775&quot;),
    get(&quot;http://zhushou.360.cn/detail/index/soft_id/705490&quot;)
]
loop.run_until_complete(asyncio.wait(tasks))    # 执行任务
loop.close()                        # 关闭事件循环列表
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;协程&quot;&gt;&lt;a href=&quot;#协程&quot; class=&quot;headerlink&quot; title=&quot;协程&quot;&gt;&lt;/a&gt;协程&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;import asyncio
import aiohttp
import threading

# 生产者、消费者例子
de
    
    </summary>
    
    
      <category term="协程,异步" scheme="https://www.xncoding.com/tags/%E5%8D%8F%E7%A8%8B-%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>pep8</title>
    <link href="https://www.xncoding.com/2017/10/23/python/pep8.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/pep8.html</id>
    <published>2017-10-23T13:07:53.900Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pep8"><a href="#pep8" class="headerlink" title="pep8"></a>pep8</h1><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><pre><code>lowercase 小写字母
lower_case_with_underscores 使用下划线分隔的小写字母
UPPERCASE 大写字母
UPPER_CASE_WITH_UNDERSCORES 使用下划线分隔的大写字母
CapitalizedWords
类名: CamelCase ，缩写词大写（ HTTPWriter 而非 HttpWriter ）
变量名: lowercase_with_underscores
方法和函数名: lowercase_with_underscores
常量: UPPERCASE_WITH_UNDERSCORES
预编译正则表达式: name_re
比如：day_of_week, hosts_to_reboot, expired_cards
比如：port（端口号）、age（年龄）、radius（半径） 等等
比如：user_id、host_id
比如：length_of_username、max_length、users_count
is_superuser： 『是否超级用户』，只会有两种值：是 / 不是
has_error：    『有没有错误』，只会有两种值：有 / 没有
allow_vip：    『是否允许 VIP』，只会有两种值：允许 / 不允许
use_msgpack：  『是否使用 msgpack』，只会有两种值：使用 / 不使用
debug：        『是否开启调试模式』，被当做 bool 主要是因为约定俗成
异常名中使用后缀&quot;Error&quot;
dont:
    相似的变量名，比如同时出现 users、users1、 user3 这种序列
    不要使用带否定含义的变量名，用 is_special 代替 is_not_normal
    永远不要用字符&apos;l&apos;, &apos;O&apos;, 或&apos;I&apos;作为单字符的变量名.
</code></pre><h2 id="空格-空行"><a href="#空格-空行" class="headerlink" title="空格/空行"></a>空格/空行</h2><pre><code>在 list, dict, tuple, set, 参数列表的, 后面加一个空格
在 dict 的: 后面加一个空格
在注释符号  # 后面加一个空格，但是 #!/usr/bin/python 的 # 后不能有空格
操作符两端加一个空格，如 + , -, *, / , | , &amp; , =
接上一条，在参数列表里的 = 两端不需要空格
括号（(), {}, []）内的两端不需要空格

function 和 class 顶上两个空行

class 的 method 之间一个空行
函数内逻辑无关的段落之间空一行，不要过度使用空行
不要把多个语句写在一行，然后用
隔开
if / for / while 语句中，即使执行语句只有一句，也要另起一行
</code></pre><h2 id="最大行长度"><a href="#最大行长度" class="headerlink" title="最大行长度"></a>最大行长度</h2><pre><code>限制所有行最多79个字符。
income = (gross_wages
          + taxable_interest
          + (dividends - qualified_dividends)
          - ira_deduction
          - student_loan_interest)
折叠长行的首选方法是使用Pyhon支持的圆括号, 方括号(brackets)和花括号(braces)
反斜杠\
    a = &apos;1&apos; + &apos;2&apos; + &apos;3&apos; + \
    &apos;4&apos; + &apos;5&apos;
或者
a = (&apos;1&apos; + &apos;2&apos; + &apos;3&apos; +
     &apos;4&apos; + &apos;5&apos;)
</code></pre><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><pre><code>import os
import sys
from subprocess import Popen, PIPE
from sound.effects import echo
</code></pre><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><pre><code># 因为某种原因这个函数减慢程序执行。
def foo():
    &quot;&quot;&quot;This is a simple docstring&quot;&quot;&quot;

def bar():
    &quot;&quot;&quot;This is a longer docstring with so much information in there
    that it spans three lines.  In this case the closing triple quote
    is on its own line.
    &quot;&quot;&quot;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;pep8&quot;&gt;&lt;a href=&quot;#pep8&quot; class=&quot;headerlink&quot; title=&quot;pep8&quot;&gt;&lt;/a&gt;pep8&lt;/h1&gt;&lt;h2 id=&quot;命名&quot;&gt;&lt;a href=&quot;#命名&quot; class=&quot;headerlink&quot; title=&quot;命名&quot;&gt;&lt;/a&gt;命名&lt;/h
    
    </summary>
    
    
      <category term="pep8,命名" scheme="https://www.xncoding.com/tags/pep8-%E5%91%BD%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="https://www.xncoding.com/2017/10/23/python/python%E5%9F%BA%E7%A1%80.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/python基础.html</id>
    <published>2017-10-23T13:07:53.897Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><h2 id="类型和运算"><a href="#类型和运算" class="headerlink" title="类型和运算"></a>类型和运算</h2><h3 id="寻求帮助"><a href="#寻求帮助" class="headerlink" title="寻求帮助:"></a>寻求帮助:</h3><pre><code>dir(obj)            # 简单的列出对象obj所包含的方法名称，返回一个字符串列表
help(obj.func)      # 查询obj.func的具体介绍和用法
</code></pre><h3 id="测试类型的三种方法，推荐第三种"><a href="#测试类型的三种方法，推荐第三种" class="headerlink" title="测试类型的三种方法，推荐第三种"></a>测试类型的三种方法，推荐第三种</h3><pre><code>if type(L) == type([]):
    print(&quot;L is list&quot;)
if type(L) == list:
    print(&quot;L is list&quot;)
if isinstance(L, list):
    print(&quot;L is list&quot;)
</code></pre><h3 id="Python数据类型：哈希类型、不可哈希类型"><a href="#Python数据类型：哈希类型、不可哈希类型" class="headerlink" title="Python数据类型：哈希类型、不可哈希类型"></a>Python数据类型：哈希类型、不可哈希类型</h3><pre><code># 哈希类型，即在原地不能改变的变量类型，不可变类型。可利用hash函数查看其hash值，也可以作为字典的key
&quot;数字类型：int, float, decimal.Decimal, fractions.Fraction, complex&quot;
&quot;字符串类型：str, bytes&quot;
&quot;元组：tuple&quot;
&quot;冻结集合：frozenset&quot;
&quot;布尔类型：True, False&quot;
&quot;None&quot;
# 不可hash类型：原地可变类型：list、dict和set。它们不可以作为字典的key。
</code></pre><h3 id="数字常量"><a href="#数字常量" class="headerlink" title="数字常量"></a>数字常量</h3><pre><code>1234, -1234, 0, 999999999                    # 整数
1.23, 1., 3.14e-10, 4E210, 4.0e+210          # 浮点数
0o177, 0x9ff, 0X9FF, 0b101010                # 八进制、十六进制、二进制数字
3+4j, 3.0+4.0j, 3J                           # 复数常量，也可以用complex(real, image)来创建
hex(I), oct(I), bin(I)                       # 将十进制数转化为十六进制、八进制、二进制表示的“字符串”
int(string, base)                            # 将字符串转化为整数，base为进制数
# 2.x中，有两种整数类型：一般整数（32位）和长整数（无穷精度）。可以用l或L结尾，迫使一般整数成为长整数
float(&apos;inf&apos;), float(&apos;-inf&apos;), float(&apos;nan&apos;)    # 无穷大, 无穷小, 非数
</code></pre><h3 id="数字的表达式操作符"><a href="#数字的表达式操作符" class="headerlink" title="数字的表达式操作符"></a>数字的表达式操作符</h3><pre><code>yield x                                      # 生成器函数发送协议
lambda args: expression                      # 生成匿名函数
x if y else z                                # 三元选择表达式
x and y, x or y, not x                       # 逻辑与、逻辑或、逻辑非
x in y, x not in y                           # 成员对象测试
x is y, x is not y                           # 对象实体测试
x&lt;y, x&lt;=y, x&gt;y, x&gt;=y, x==y, x!=y             # 大小比较，集合子集或超集值相等性操作符
1 &lt; a &lt; 3                                    # Python中允许连续比较
x|y, x&amp;y, x^y                                # 位或、位与、位异或
x&lt;&lt;y, x&gt;&gt;y                                   # 位操作：x左移、右移y位
+, -, *, /, //, %, **                        # 真除法、floor除法：返回不大于真除法结果的整数值、取余、幂运算
-x, +x, ~x                                   # 一元减法、识别、按位求补（取反）
x[i], x[i:j:k]                               # 索引、分片、调用
int(3.14), float(3)                          # 强制类型转换
</code></pre><h3 id="整数可以利用bit-length函数测试所占的位数"><a href="#整数可以利用bit-length函数测试所占的位数" class="headerlink" title="整数可以利用bit_length函数测试所占的位数"></a>整数可以利用bit_length函数测试所占的位数</h3><pre><code>a = 1;       a.bit_length()    # 1
a = 1024;    a.bit_length()    # 11
</code></pre><h3 id="repr和str显示格式的区别"><a href="#repr和str显示格式的区别" class="headerlink" title="repr和str显示格式的区别"></a>repr和str显示格式的区别</h3><pre><code>&quot;&quot;&quot;
repr格式：默认的交互模式回显，产生的结果看起来它们就像是代码。
str格式：打印语句，转化成一种对用户更加友好的格式。
&quot;&quot;&quot;
</code></pre><h3 id="数字相关的模块"><a href="#数字相关的模块" class="headerlink" title="数字相关的模块"></a>数字相关的模块</h3><pre><code># Decimal模块：小数模块
    import decimal
    from decimal import Decimal
    Decimal(&quot;0.01&quot;) + Decimal(&quot;0.02&quot;)        # 返回Decimal(&quot;0.03&quot;)
    decimal.getcontext().prec = 4            # 设置全局精度为4 即小数点后边4位
# Fraction模块：分数模块
    from fractions import Fraction
    x = Fraction(4, 6)                       # 分数类型 4/6
    x = Fraction(&quot;0.25&quot;)                     # 分数类型 1/4 接收字符串类型的参数
</code></pre><h3 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h3><pre><code>&quot;&quot;&quot;
set是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素。
set支持union(联合), intersection(交), difference(差)和symmetric difference(对称差集)等数学运算。
set支持x in set, len(set), for x in set。
set不记录元素位置或者插入点, 因此不支持indexing, slicing, 或其它类序列的操作
&quot;&quot;&quot;
s = set([3,5,9,10])                          # 创建一个数值集合，返回{3, 5, 9, 10}
t = set(&quot;Hello&quot;)                             # 创建一个唯一字符的集合返回{}
a = t | s;    t.union(s)                     # t 和 s的并集
b = t &amp; s;    t.intersection(s)              # t 和 s的交集
c = t – s;    t.difference(s)                # 求差集（项在t中, 但不在s中）
d = t ^ s;    t.symmetric_difference(s)      # 对称差集（项在t或s中, 但不会同时出现在二者中）
t.add(&apos;x&apos;);   t.remove(&apos;H&apos;)                  # 增加/删除一个item
s.update([10,37,42])                         # 利用[......]更新s集合
x in s,  x not in s                          # 集合中是否存在某个值
s.issubset(t);      s &lt;= t                   # 测试是否 s 中的每一个元素都在 t 中
s.issuperset(t);    s &gt;= t                   # 测试是否 t 中的每一个元素都在 s 中
s.copy();
s.discard(x);                                # 删除s中x
s.clear()                                    # 清空s
{x**2 for x in [1, 2, 3, 4]}                 # 集合解析，结果：{16, 1, 4, 9}
{x for x in &apos;spam&apos;}                          # 集合解析，结果：{&apos;a&apos;, &apos;p&apos;, &apos;s&apos;, &apos;m&apos;}
</code></pre><h3 id="集合frozenset，不可变对象"><a href="#集合frozenset，不可变对象" class="headerlink" title="集合frozenset，不可变对象"></a>集合frozenset，不可变对象</h3><pre><code>&quot;&quot;&quot;
set是可变对象，即不存在hash值，不能作为字典的键值。同样的还有list等(tuple是可以作为字典key的)
frozenset是不可变对象，即存在hash值，可作为字典的键值
frozenset对象没有add、remove等方法，但有union/intersection/difference等方法
&quot;&quot;&quot;
a = set([1, 2, 3])
b = set()
b.add(a)                     # error: set是不可哈希类型
b.add(frozenset(a))          # ok，将set变为frozenset，可哈希
</code></pre><h3 id="布尔类型bool"><a href="#布尔类型bool" class="headerlink" title="布尔类型bool"></a>布尔类型bool</h3><pre><code>type(True)                   # 返回&lt;class &apos;bool&apos;&gt;
isinstance(False, int)       # bool类型属于整型，所以返回True
True == 1; True is 1         # 输出(True, False)
</code></pre><h3 id="动态类型简介"><a href="#动态类型简介" class="headerlink" title="动态类型简介"></a>动态类型简介</h3><pre><code>&quot;&quot;&quot;
变量名通过引用，指向对象。
Python中的“类型”属于对象，而不是变量，每个对象都包含有头部信息，比如&quot;类型标示符&quot; &quot;引用计数器&quot;等
&quot;&quot;&quot;
#共享引用及在原处修改：对于可变对象，要注意尽量不要共享引用！
#共享引用和相等测试：
    L = [1], M = [1], L is M            # 返回False
    L = M = [1, 2, 3], L is M           # 返回True，共享引用
#增强赋值和共享引用：普通+号会生成新的对象，而增强赋值+=会在原处修改
    L = M = [1, 2]
    L = L + [3, 4]                      # L = [1, 2, 3, 4], M = [1, 2]
    L += [3, 4]                         # L = [1, 2, 3, 4], M = [1, 2, 3, 4]
</code></pre><h3 id="常见字符串常量和表达式"><a href="#常见字符串常量和表达式" class="headerlink" title="常见字符串常量和表达式"></a>常见字符串常量和表达式</h3><pre><code>S = &apos;&apos;                                  # 空字符串
S = &quot;spam’s&quot;                            # 双引号和单引号相同
S = &quot;s\np\ta\x00m&quot;                      # 转义字符
S = &quot;&quot;&quot;spam&quot;&quot;&quot;                          # 三重引号字符串，一般用于函数说明
S = r&apos;\temp&apos;                            # Raw字符串，不会进行转义，抑制转义
S = b&apos;Spam&apos;                             # Python3中的字节字符串
S = u&apos;spam&apos;                             # Python2.6中的Unicode字符串
s1+s2, s1*3, s[i], s[i:j], len(s)       # 字符串操作
&apos;a %s parrot&apos; % &apos;kind&apos;                  # 字符串格式化表达式
&apos;a {1} {0} parrot&apos;.format(&apos;kind&apos;, &apos;red&apos;)# 字符串格式化方法
for x in s: print(x)                    # 字符串迭代，成员关系
[x*2 for x in s]                        # 字符串列表解析
&apos;,&apos;.join([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;])               # 字符串输出，结果：a,b,c
</code></pre><h3 id="内置str处理函数："><a href="#内置str处理函数：" class="headerlink" title="内置str处理函数："></a>内置str处理函数：</h3><pre><code>str1 = &quot;stringobject&quot;
str1.upper(); str1.lower(); str1.swapcase(); str1.capitalize(); str1.title()        # 全部大写，全部小写、大小写转换，首字母大写，每个单词的首字母都大写
str1.ljust(width)                       # 获取固定长度，左对齐，右边不够用空格补齐
str1.rjust(width)                       # 获取固定长度，右对齐，左边不够用空格补齐
str1.center(width)                      # 获取固定长度，中间对齐，两边不够用空格补齐
str1.zfill(width)                       # 获取固定长度，右对齐，左边不足用0补齐
str1.find(&apos;t&apos;,start,end)                # 查找字符串，可以指定起始及结束位置搜索
str1.rfind(&apos;t&apos;)                         # 从右边开始查找字符串
str1.count(&apos;t&apos;)                         # 查找字符串出现的次数
#上面所有方法都可用index代替，不同的是使用index查找不到会抛异常，而find返回-1
str1.replace(&apos;old&apos;,&apos;new&apos;)               # 替换函数，替换old为new，参数中可以指定maxReplaceTimes，即替换指定次数的old为new
str1.strip();                           # 默认删除空白符
str1.strip(&apos;d&apos;);                        # 删除str1字符串中开头、结尾处，位于 d 删除序列的字符
str1.lstrip();
str1.lstrip(&apos;d&apos;);                       # 删除str1字符串中开头处，位于 d 删除序列的字符
str1.rstrip();
str1.rstrip(&apos;d&apos;)                        # 删除str1字符串中结尾处，位于 d 删除序列的字符
str1.startswith(&apos;start&apos;)                # 是否以start开头
str1.endswith(&apos;end&apos;)                    # 是否以end结尾
str1.isalnum(); str1.isalpha(); str1.isdigit(); str1.islower(); str1.isupper()      # 判断字符串是否全为字符、数字、小写、大写
</code></pre><h3 id="三重引号编写多行字符串块，并且在代码折行处嵌入换行字符-n"><a href="#三重引号编写多行字符串块，并且在代码折行处嵌入换行字符-n" class="headerlink" title="三重引号编写多行字符串块，并且在代码折行处嵌入换行字符\n"></a>三重引号编写多行字符串块，并且在代码折行处嵌入换行字符\n</h3><pre><code>mantra = &quot;&quot;&quot;hello world
        hello python
        hello my friend&quot;&quot;&quot;
# mantra为&quot;&quot;&quot;hello world \n hello python \n hello my friend&quot;&quot;&quot;
</code></pre><h3 id="索引和分片："><a href="#索引和分片：" class="headerlink" title="索引和分片："></a>索引和分片：</h3><pre><code>S[0], S[len(S)–1], S[-1]                # 索引
S[1:3], S[1:], S[:-1], S[1:10:2]        # 分片，第三个参数指定步长，如`S[1:10:2]`是从1位到10位没隔2位获取一个字符。
</code></pre><h3 id="字符串转换工具："><a href="#字符串转换工具：" class="headerlink" title="字符串转换工具："></a>字符串转换工具：</h3><pre><code>int(&apos;42&apos;), str(42)                      # 返回(42, &apos;42&apos;)
float(&apos;4.13&apos;), str(4.13)                # 返回(4.13, &apos;4.13&apos;)
ord(&apos;s&apos;), chr(115)                      # 返回(115, &apos;s&apos;)
int(&apos;1001&apos;, 2)                          # 将字符串作为二进制数字，转化为数字，返回9
bin(13), oct(13), hex(13)               # 将整数转化为二进制/八进制/十六进制字符串，返回(&apos;0b1101&apos;, &apos;015&apos;, &apos;0xd&apos;)
</code></pre><h3 id="另类字符串连接"><a href="#另类字符串连接" class="headerlink" title="另类字符串连接"></a>另类字符串连接</h3><pre><code>name = &quot;wang&quot; &quot;hong&quot;                    # 单行，name = &quot;wanghong&quot;
name = &quot;wang&quot; \
        &quot;hong&quot;                          # 多行，name = &quot;wanghong&quot;
</code></pre><h3 id="Python中的字符串格式化实现1–字符串格式化表达式"><a href="#Python中的字符串格式化实现1–字符串格式化表达式" class="headerlink" title="Python中的字符串格式化实现1–字符串格式化表达式"></a>Python中的字符串格式化实现1–字符串格式化表达式</h3><pre><code>基于C语言的&apos;print&apos;模型，并且在大多数的现有的语言中使用。
通用结构：%[(name)][flag][width].[precision]typecode
&quot;&quot;&quot;
&quot;this is %d %s bird&quot; % (1, &apos;dead&apos;)                          # 一般的格式化表达式
&quot;%s---%s---%s&quot; % (42, 3.14, [1, 2, 3])                      # 字符串输出：&apos;42---3.14---[1, 2, 3]&apos;
&quot;%d...%6d...%-6d...%06d&quot; % (1234, 1234, 1234, 1234)         # 对齐方式及填充：&quot;1234...  1234...1234  ...001234&quot;
x = 1.23456789
&quot;%e | %f | %g&quot; % (x, x, x)                                  # 对齐方式：&quot;1.234568e+00 | 1.234568 | 1.23457&quot;
&quot;%6.2f*%-6.2f*%06.2f*%+6.2f&quot; % (x, x, x, x)                 # 对齐方式：&apos;  1.23*1.23  *001.23* +1.23&apos;
&quot;%(name1)d---%(name2)s&quot; % {&quot;name1&quot;:23, &quot;name2&quot;:&quot;value2&quot;}    # 基于字典的格式化表达式
&quot;%(name)s is %(age)d&quot; % vars()                              # vars()函数调用返回一个字典，包含了所有本函数调用时存在的变量
</code></pre><h3 id="Python中的字符串格式化实现2–字符串格式化调用方法"><a href="#Python中的字符串格式化实现2–字符串格式化调用方法" class="headerlink" title="Python中的字符串格式化实现2–字符串格式化调用方法"></a>Python中的字符串格式化实现2–字符串格式化调用方法</h3><pre><code># 普通调用
&quot;{0}, {1} and {2}&quot;.format(&apos;spam&apos;, &apos;ham&apos;, &apos;eggs&apos;)            # 基于位置的调用
&quot;{motto} and {pork}&quot;.format(motto = &apos;spam&apos;, pork = &apos;ham&apos;)   # 基于Key的调用
&quot;{motto} and {0}&quot;.format(&apos;ham&apos;, motto = &apos;spam&apos;)             # 混合调用
# 添加键 属性 偏移量 (import sys)
&quot;my {1[spam]} runs {0.platform}&quot;.format(sys, {&apos;spam&apos;:&apos;laptop&apos;})                 # 基于位置的键和属性
&quot;{config[spam]} {sys.platform}&quot;.format(sys = sys, config = {&apos;spam&apos;:&apos;laptop&apos;})   # 基于Key的键和属性
&quot;first = {0[0]}, second = {0[1]}&quot;.format([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;])                       # 基于位置的偏移量
# 具体格式化
&quot;{0:e}, {1:.3e}, {2:g}&quot;.format(3.14159, 3.14159, 3.14159)   # 输出&apos;3.141590e+00, 3.142e+00, 3.14159&apos;
&quot;{fieldname:format_spec}&quot;.format(......)
# 说明:
&quot;&quot;&quot;
    fieldname是指定参数的一个数字或关键字, 后边可跟可选的&quot;.name&quot;或&quot;[index]&quot;成分引用
    format_spec ::=  [[fill]align][sign][#][0][width][,][.precision][type]
    fill        ::=  &lt;any character&gt;              #填充字符
    align       ::=  &quot;&lt;&quot; | &quot;&gt;&quot; | &quot;=&quot; | &quot;^&quot;        #对齐方式
    sign        ::=  &quot;+&quot; | &quot;-&quot; | &quot; &quot;              #符号说明
    width       ::=  integer                      #字符串宽度
    precision   ::=  integer                      #浮点数精度
    type        ::=  &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;E&quot; | &quot;f&quot; | &quot;F&quot; | &quot;g&quot; | &quot;G&quot; | &quot;n&quot; | &quot;o&quot; | &quot;s&quot; | &quot;x&quot; | &quot;X&quot; | &quot;%&quot;
&quot;&quot;&quot;
# 例子:
    &apos;={0:10} = {1:10}&apos;.format(&apos;spam&apos;, 123.456)    # 输出&apos;=spam       =    123.456&apos;
    &apos;={0:&gt;10}=&apos;.format(&apos;test&apos;)                    # 输出&apos;=      test=&apos;
    &apos;={0:&lt;10}=&apos;.format(&apos;test&apos;)                    # 输出&apos;=test      =&apos;
    &apos;={0:^10}=&apos;.format(&apos;test&apos;)                    # 输出&apos;=   test   =&apos;
    &apos;{0:X}, {1:o}, {2:b}&apos;.format(255, 255, 255)   # 输出&apos;FF, 377, 11111111&apos;
    &apos;My name is {0:{1}}.&apos;.format(&apos;Fred&apos;, 8)       # 输出&apos;My name is Fred    .&apos;  动态指定参数
</code></pre><h3 id="常用列表常量和操作"><a href="#常用列表常量和操作" class="headerlink" title="常用列表常量和操作"></a>常用列表常量和操作</h3><pre><code>L = [[1, 2], &apos;string&apos;, {}]                        # 嵌套列表
L = list(&apos;spam&apos;)                                  # 列表初始化
L = list(range(0, 4))                             # 列表初始化
list(map(ord, &apos;spam&apos;))                            # 列表解析
len(L)                                            # 求列表长度
L.count(value)                                    # 求列表中某个值的个数
L.append(obj)                                     # 向列表的尾部添加数据，比如append(2)，添加元素2
L.insert(index, obj)                              # 向列表的指定index位置添加数据，index及其之后的数据后移
L.extend(interable)                               # 通过添加iterable中的元素来扩展列表，比如extend([2])，添加元素2，注意和append的区别
L.index(value, [start, [stop]])                   # 返回列表中值value的第一个索引
L.pop([index])                                    # 删除并返回index处的元素，默认为删除并返回最后一个元素
L.remove(value)                                   # 删除列表中的value值，只删除第一次出现的value的值
L.reverse()                                       # 反转列表
L.sort(cmp=None, key=None, reverse=False)         # 排序列表
a = [1, 2, 3], b = a[10:]                         # 注意，这里不会引发IndexError异常，只会返回一个空的列表[]
a = [], a += [1]                                  # 这里实在原有列表的基础上进行操作，即列表的id没有改变
a = [], a = a + [1]                               # 这里最后的a要构建一个新的列表，即a的id发生了变化
</code></pre><h3 id="用切片来删除序列的某一段"><a href="#用切片来删除序列的某一段" class="headerlink" title="用切片来删除序列的某一段"></a>用切片来删除序列的某一段</h3><pre><code>a = [1, 2, 3, 4, 5, 6, 7]
a[1:4] = []                                       # a = [1, 5, 6, 7]
a = [0, 1, 2, 3, 4, 5, 6, 7]
del a[::2]                                        # 去除偶数项(偶数索引的)，a = [1, 3, 5, 7]
</code></pre><h3 id="常用字典常量和操作"><a href="#常用字典常量和操作" class="headerlink" title="常用字典常量和操作"></a>常用字典常量和操作</h3><pre><code>D = {}
D = {&apos;spam&apos;:2, &apos;tol&apos;:{&apos;ham&apos;:1}}                   # 嵌套字典
D = dict.fromkeys([&apos;s&apos;, &apos;d&apos;], 8)                  # {&apos;s&apos;: 8, &apos;d&apos;: 8}
D = dict(name = &apos;tom&apos;, age = 12)                  # {&apos;age&apos;: 12, &apos;name&apos;: &apos;tom&apos;}
D = dict([(&apos;name&apos;, &apos;tom&apos;), (&apos;age&apos;, 12)])          # {&apos;age&apos;: 12, &apos;name&apos;: &apos;tom&apos;}
D = dict(zip([&apos;name&apos;, &apos;age&apos;], [&apos;tom&apos;, 12]))       # {&apos;age&apos;: 12, &apos;name&apos;: &apos;tom&apos;}
D.keys(); D.values(); D.items()                   # 字典键、值以及键值对
D.get(key, default)                               # get函数
D.update(D_other)                                 # 合并字典，如果存在相同的键值，D_other的数据会覆盖掉D的数据
D.pop(key, [D])                                   # 删除字典中键值为key的项，返回键值为key的值，如果不存在，返回默认值D，否则异常
D.popitem()                                       # pop字典中随机的一项（一个键值对）
D.setdefault(k[, d])                              # 设置D中某一项的默认值。如果k存在，则返回D[k]，否则设置D[k]=d，同时返回D[k]。
del D                                             # 删除字典
del D[&apos;key&apos;]                                      # 删除字典的某一项
if key in D:   if key not in D:                   # 测试字典键是否存在
# 字典注意事项：（1）对新索引赋值会添加一项（2）字典键不一定非得是字符串，也可以为任何的不可变对象
# 不可变对象：调用对象自身的任意方法，也不会改变该对象自身的内容，这些方法会创建新的对象并返回。
# 字符串、整数、tuple都是不可变对象，dict、set、list都是可变对象
D[(1,2,3)] = 2
prices={&apos;book&apos;:38,&apos;pen&apos;:2}
min_price = min(zip(prices.values(), prices.keys()))
max_price = max(zip(prices.values(), prices.keys()))
a,b={&apos;x&apos;:3,&apos;y&apos;:4},{&apos;x&apos;:3,&apos;z&apos;:5}
a.keys() &amp; b.keys()
a.keys() - b.keys()
a.items() &amp; b.items()                                   # tuple作为字典的key
calculator={&apos;plus&apos;:lambda x,y : x + y,&apos;minus&apos; : lambda x,y : x - y}
res = calculator[&apos;plus&apos;](2, 3)
from collections import Counter
a = {&apos;a&apos;:1,&apos;b&apos;:2}
b = {&apos;a&apos;:1}
c = Counter(a) + Counter(b)  # 此时c为Counter对象
c = dict(c)  # 转变成字典
</code></pre><h3 id="字典解析"><a href="#字典解析" class="headerlink" title="字典解析"></a>字典解析</h3><pre><code>D = {k:8 for k in [&apos;s&apos;, &apos;d&apos;]}                     # {&apos;s&apos;: 8, &apos;d&apos;: 8}
D = {k:v for (k, v) in zip([&apos;name&apos;, &apos;age&apos;], [&apos;tom&apos;, 12])}       # {&apos;age&apos;: 12, &apos;name&apos;: tom}
user_list = [{&apos;name&apos;: &apos;lucy&apos;, &apos;email&apos;: &apos;lucy@g.com&apos;}, {&apos;name&apos;: &apos;lily&apos;, &apos;email&apos;: &apos;lily@g.com&apos;}]
user_dict={user[&apos;name&apos;]: user[&apos;email&apos;] for user in user_list if &apos;email&apos; in user}
</code></pre><h3 id="字典的特殊方法missing：当查找找不到key时，会执行该方法"><a href="#字典的特殊方法missing：当查找找不到key时，会执行该方法" class="headerlink" title="字典的特殊方法missing：当查找找不到key时，会执行该方法"></a>字典的特殊方法<strong>missing</strong>：当查找找不到key时，会执行该方法</h3><pre><code>class Dict(dict):
    def __missing__(self, key):
        self[key] = []
        return self[key]
dct = Dict()
dct[&quot;foo&quot;].append(1)    # 这有点类似于collections.defalutdict
dct[&quot;foo&quot;]              # [1]
</code></pre><h3 id="元组和列表的唯一区别在于元组是不可变对象，列表时可变对象"><a href="#元组和列表的唯一区别在于元组是不可变对象，列表时可变对象" class="headerlink" title="元组和列表的唯一区别在于元组是不可变对象，列表时可变对象"></a>元组和列表的唯一区别在于元组是不可变对象，列表时可变对象</h3><pre><code>a = [1, 2, 3]           # a[1] = 0, OK
a = (1, 2, 3)           # a[1] = 0, Error
a = ([1, 2])            # a[0][1] = 0, OK
a = [(1, 2)]            # a[0][1] = 0, Error
</code></pre><h3 id="元组的特殊语法-逗号和圆括号"><a href="#元组的特殊语法-逗号和圆括号" class="headerlink" title="元组的特殊语法: 逗号和圆括号"></a>元组的特殊语法: 逗号和圆括号</h3><pre><code>D = (12)                # 此时D为一个整数 即D = 12
D = (12, )              # 此时D为一个元组 即D = (12, )
</code></pre><h3 id="文件基本操作"><a href="#文件基本操作" class="headerlink" title="文件基本操作"></a>文件基本操作</h3><pre><code>output = open(r&apos;C:\spam&apos;, &apos;w&apos;)          # 打开输出文件，用于写
input = open(&apos;data&apos;, &apos;r&apos;)               # 打开输入文件，用于读。打开的方式可以为&apos;w&apos;, &apos;r&apos;, &apos;a&apos;, &apos;wb&apos;, &apos;rb&apos;, &apos;ab&apos;等
fp.read([size])                         # size为读取的长度，以byte为单位
fp.readline([size])                     # 读一行，如果定义了size，有可能返回的只是一行的一部分
fp.readlines([size])                    # 把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长。
fp.readable()                           # 是否可读
fp.write(str)                           # 把str写到文件中，write()并不会在str后加上一个换行符
fp.writelines(seq)                      # 把seq的内容全部写到文件中(多行一次性写入)
fp.writeable()                          # 是否可写
fp.close()                              # 关闭文件。
fp.flush()                              # 把缓冲区的内容写入硬盘
fp.fileno()                             # 返回一个长整型的”文件标签“
fp.isatty()                             # 文件是否是一个终端设备文件（unix系统中的）
fp.tell()                               # 返回文件操作标记的当前位置，以文件的开头为原点
fp.next()                               # 返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。
fp.seek(offset[,whence])                # 将文件打操作标记移到offset的位置。whence可以为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。
fp.seekable()                           # 是否可以seek
fp.truncate([size])                     # 把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。
for line in open(&apos;data&apos;):
    print(line)                         # 使用for语句，比较适用于打开比较大的文件
open(&apos;f.txt&apos;, encoding = &apos;latin-1&apos;)     # Python3.x Unicode文本文件
open(&apos;f.bin&apos;, &apos;rb&apos;)                     # Python3.x 二进制bytes文件
# 文件对象还有相应的属性：buffer closed encoding errors line_buffering name newlines等
</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre><code># Python中的真假值含义：1. 数字如果非零，则为真，0为假。 2. 其他对象如果非空，则为真
# 通常意义下的类型分类：1. 数字、序列、映射。 2. 可变类型和不可变类型
</code></pre><h2 id="语法和语句"><a href="#语法和语句" class="headerlink" title="语法和语句"></a>语法和语句</h2><h3 id="赋值语句的形式"><a href="#赋值语句的形式" class="headerlink" title="赋值语句的形式"></a>赋值语句的形式</h3><pre><code>record = (&apos;ACME&apos;, 50, 123.45, (12, 18, 2012))
name, *_, (*_, year) = record
spam = &apos;spam&apos;                          # 基本形式
spam, ham = &apos;spam&apos;, &apos;ham&apos;              # 元组赋值形式
[spam, ham] = [&apos;s&apos;, &apos;h&apos;]               # 列表赋值形式
a, b, c, d = &apos;abcd&apos;                    # 序列赋值形式
a, *b, c = &apos;spam&apos;                      # 序列解包形式（Python3.x中才有）
spam = ham = &apos;no&apos;                      # 多目标赋值运算，涉及到共享引用
spam += 42                             # 增强赋值，涉及到共享引用
</code></pre><h3 id="序列赋值-序列解包"><a href="#序列赋值-序列解包" class="headerlink" title="序列赋值 序列解包"></a>序列赋值 序列解包</h3><pre><code>[a, b, c] = (1, 2, 3)                  # a = 1, b = 2, c = 3
a, b, c, d = &quot;spam&quot;                    # a = &apos;s&apos;, b = &apos;p&apos;, c = &apos;a&apos;, d = &apos;m&apos;
a, b, c = range(3)                     # a = 0, b = 1, c = 2
a, *b = [1, 2, 3, 4]                   # a = 1, b = [2, 3, 4]
*a, b = [1, 2, 3, 4]                   # a = [1, 2, 3], b = 4
a, *b, c = [1, 2, 3, 4]                # a = 1, b = [2, 3], c = 4
# 带有*时 会优先匹配*之外的变量 如
a, *b, c = [1, 2]                      # a = 1, c = 2, b = []
</code></pre><h3 id="print函数原型"><a href="#print函数原型" class="headerlink" title="print函数原型"></a>print函数原型</h3><pre><code>print(value, ..., sep=&apos; &apos;, end=&apos;\n&apos;, file=sys.stdout, flush=False)
# 流的重定向
print(&apos;hello world&apos;)                   # 等于sys.stdout.write(&apos;hello world&apos;)
temp = sys.stdout                      # 原有流的保存
sys.stdout = open(&apos;log.log&apos;, &apos;a&apos;)      # 流的重定向
print(&apos;hello world&apos;)                   # 写入到文件log.log
sys.stdout.close()
sys.stdout = temp                      # 原有流的复原
</code></pre><h3 id="Python中and或or总是返回对象-左边的对象或右边的对象-且具有短路求值的特性"><a href="#Python中and或or总是返回对象-左边的对象或右边的对象-且具有短路求值的特性" class="headerlink" title="Python中and或or总是返回对象(左边的对象或右边的对象) 且具有短路求值的特性"></a>Python中and或or总是返回对象(左边的对象或右边的对象) 且具有短路求值的特性</h3><pre><code>1 or 2 or 3                            # 返回 1
1 and 2 and 3                          # 返回 3
</code></pre><h3 id="if-else三元表达符（if语句在行内）"><a href="#if-else三元表达符（if语句在行内）" class="headerlink" title="if/else三元表达符（if语句在行内）"></a>if/else三元表达符（if语句在行内）</h3><pre><code>A = 1 if X else 2
A = 1 if X else (2 if Y else 3)
# 也可以使用and-or语句（一条语句实现多个if-else）
result = (a &gt; 20 and &quot;big than 20&quot; or a &gt; 10 and &quot;big than 10&quot; or a &gt; 5 and &quot;big than 5&quot;)
</code></pre><h3 id="Python的while语句或者for语句可以带else语句-当然也可以带continue-break-pass语句"><a href="#Python的while语句或者for语句可以带else语句-当然也可以带continue-break-pass语句" class="headerlink" title="Python的while语句或者for语句可以带else语句 当然也可以带continue/break/pass语句"></a>Python的while语句或者for语句可以带else语句 当然也可以带continue/break/pass语句</h3><pre><code>while a &gt; 1:
    anything
else:
    anything
# else语句会在循环结束后执行，除非在循环中执行了break，同样的还有for语句
for i in range(5):
    anything
else:
    anything
</code></pre><h3 id="for循环的元组赋值"><a href="#for循环的元组赋值" class="headerlink" title="for循环的元组赋值"></a>for循环的元组赋值</h3><pre><code>for (a, b) in [(1, 2), (3, 4)]:                   # 最简单的赋值
for ((a, b), c) in [((1, 2), 3), ((4, 5), 6)]:    # 自动解包赋值
for ((a, b), c) in [((1, 2), 3), (&quot;XY&quot;, 6)]:      # 自动解包 a = X, b = Y, c = 6
for (a, *b) in [(1, 2, 3), (4, 5, 6)]:            # 自动解包赋值
</code></pre><h3 id="列表解析语法"><a href="#列表解析语法" class="headerlink" title="列表解析语法"></a>列表解析语法</h3><pre><code>M = [[1,2,3], [4,5,6], [7,8,9]]
res = [sum(row) for row in M]                     # G = [6, 15, 24] 一般的列表解析 生成一个列表
res = [c * 2 for c in &apos;spam&apos;]                     # [&apos;ss&apos;, &apos;pp&apos;, &apos;aa&apos;, &apos;mm&apos;]
res = [a * b for a in [1, 2] for b in [4, 5]]     # 多解析过程 返回[4, 5, 8, 10]
res = [a for a in [1, 2, 3] if a &lt; 2]             # 带判断条件的解析过程
res = [a if a &gt; 0 else 0 for a in [-1, 0, 1]]     # 带判断条件的高级解析过程
# 两个列表同时解析：使用zip函数
for teama, teamb in zip([&quot;Packers&quot;, &quot;49ers&quot;], [&quot;Ravens&quot;, &quot;Patriots&quot;]):
    print(teama + &quot; vs. &quot; + teamb)
# 带索引的列表解析：使用enumerate函数
for index, team in enumerate([&quot;Packers&quot;, &quot;49ers&quot;, &quot;Ravens&quot;, &quot;Patriots&quot;]):
    print(index, team)                            # 输出0, Packers \n 1, 49ers \n ......
matrix = [[1, 2, 3],[4, 5, 6]]
res = zip( *matrix )
sum(a, [])  # 展平
a = [1, 2, [3, 4], [[5, 6], [7, 8]]]
flatten = lambda x: [y for l in x for y in flatten(l)] if type(x) is list else [x]
flatten(a)
multipliers = [(lambda x, i=i: x * i) for i in range(0, 20)]
</code></pre><h3 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h3><pre><code>G = (sum(row) for row in M)                       # 使用小括号可以创建所需结果的生成器generator object
next(G), next(G), next(G)                         # 输出(6, 15, 24)
G = {sum(row) for row in M}                       # G = {6, 15, 24} 解析语法还可以生成集合和字典
G = {i:sum(M[i]) for i in range(3)}               # G = {0: 6, 1: 15, 2: 24}
</code></pre><h3 id="文档字符串-出现在Module的开端以及其中函数或类的开端-使用三重引号字符串"><a href="#文档字符串-出现在Module的开端以及其中函数或类的开端-使用三重引号字符串" class="headerlink" title="文档字符串:出现在Module的开端以及其中函数或类的开端 使用三重引号字符串"></a>文档字符串:出现在Module的开端以及其中函数或类的开端 使用三重引号字符串</h3><pre><code>&quot;&quot;&quot;
module document
&quot;&quot;&quot;
def func():
    &quot;&quot;&quot;
    function document
    &quot;&quot;&quot;
    print()
class Employee:
    &quot;&quot;&quot;
    class document
    &quot;&quot;&quot;
    print()
print(func.__doc__)                # 输出函数文档字符串
print(Employee.__doc__)            # 输出类的文档字符串
</code></pre><h3 id="命名惯例"><a href="#命名惯例" class="headerlink" title="命名惯例:"></a>命名惯例:</h3><pre><code>&quot;&quot;&quot;
以单一下划线开头的变量名(_X)不会被from module import*等语句导入
前后有两个下划线的变量名(__X__)是系统定义的变量名，对解释器有特殊意义
以两个下划线开头但不以下划线结尾的变量名(__X)是类的本地(私有)变量
&quot;&quot;&quot;
</code></pre><h3 id="列表解析-in成员关系测试-map-sorted-zip-enumerate内置函数等都使用了迭代协议"><a href="#列表解析-in成员关系测试-map-sorted-zip-enumerate内置函数等都使用了迭代协议" class="headerlink" title="列表解析 in成员关系测试 map sorted zip enumerate内置函数等都使用了迭代协议"></a>列表解析 in成员关系测试 map sorted zip enumerate内置函数等都使用了迭代协议</h3><pre><code>&apos;first line&apos; in open(&apos;test.txt&apos;)   # in测试 返回True或False
list(map(str.upper, open(&apos;t&apos;)))    # map内置函数
sorted(iter([2, 5, 8, 3, 1]))      # sorted内置函数
list(zip([1, 2], [3, 4]))          # zip内置函数 [(1, 3), (2, 4)]
</code></pre><h3 id="del语句-手动删除某个变量"><a href="#del语句-手动删除某个变量" class="headerlink" title="del语句: 手动删除某个变量"></a>del语句: 手动删除某个变量</h3><pre><code>del X
</code></pre><h3 id="获取列表的子表的方法"><a href="#获取列表的子表的方法" class="headerlink" title="获取列表的子表的方法:"></a>获取列表的子表的方法:</h3><pre><code>x = [1,2,3,4,5,6]
x[:3]                              # 前3个[1,2,3]
x[1:5]                             # 中间4个[2,3,4,5]
x[-3:]                             # 最后3个[4,5,6]
x[::2]                             # 奇数项[1,3,5]
x[1::2]                            # 偶数项[2,4,6]
</code></pre><h3 id="手动迭代：iter和next"><a href="#手动迭代：iter和next" class="headerlink" title="手动迭代：iter和next"></a>手动迭代：iter和next</h3><pre><code>L = [1, 2]
I = iter(L)                        # I为L的迭代器
I.next()                           # 返回1
I.next()                           # 返回2
I.next()                           # Error:StopIteration
</code></pre><h3 id="Python中的可迭代对象"><a href="#Python中的可迭代对象" class="headerlink" title="Python中的可迭代对象"></a>Python中的可迭代对象</h3><pre><code>&quot;&quot;&quot;
1.range迭代器
2.map、zip和filter迭代器
3.字典视图迭代器：D.keys()), D.items()等
4.文件类型
&quot;&quot;&quot;
</code></pre><h2 id="函数语法规则"><a href="#函数语法规则" class="headerlink" title="函数语法规则"></a>函数语法规则</h2><h3 id="函数相关的语句和表达式"><a href="#函数相关的语句和表达式" class="headerlink" title="函数相关的语句和表达式"></a>函数相关的语句和表达式</h3><pre><code>myfunc(&apos;spam&apos;)                     # 函数调用
def myfunc():                      # 函数定义
return None                        # 函数返回值
global a                           # 全局变量
nonlocal x                         # 在函数或其他作用域中使用外层（非全局）变量
yield x                            # 生成器函数返回
lambda                             # 匿名函数
</code></pre><h3 id="Python函数变量名解析-LEGB原则，即"><a href="#Python函数变量名解析-LEGB原则，即" class="headerlink" title="Python函数变量名解析:LEGB原则，即:"></a>Python函数变量名解析:LEGB原则，即:</h3><pre><code>&quot;&quot;&quot;
local(functin) --&gt; encloseing function locals --&gt; global(module) --&gt; build-in(python)
说明:以下边的函数maker为例 则相对于action而言 X为Local N为Encloseing
&quot;&quot;&quot;
</code></pre><h3 id="嵌套函数举例-工厂函数"><a href="#嵌套函数举例-工厂函数" class="headerlink" title="嵌套函数举例:工厂函数"></a>嵌套函数举例:工厂函数</h3><pre><code>def maker(N):
    def action(X):
        return X ** N
    return action
f = maker(2)                       # pass 2 to N
f(3)                               # 9, pass 3 to X
</code></pre><h3 id="嵌套函数举例-lambda实例"><a href="#嵌套函数举例-lambda实例" class="headerlink" title="嵌套函数举例:lambda实例"></a>嵌套函数举例:lambda实例</h3><pre><code>def maker(N):
    action = (lambda X: X**N)
    return action
f = maker(2)                       # pass 2 to N
f(3)                               # 9, pass 3 to X
</code></pre><h3 id="nonlocal和global语句的区别"><a href="#nonlocal和global语句的区别" class="headerlink" title="nonlocal和global语句的区别"></a>nonlocal和global语句的区别</h3><pre><code># nonlocal应用于一个嵌套的函数的作用域中的一个名称 例如:
start = 100
def tester(start):
    def nested(label):
        nonlocal start             # 指定start为tester函数内的local变量 而不是global变量start
        print(label, start)
        start += 3
    return nested
# global为全局的变量 即def之外的变量
def tester(start):
    def nested(label):
        global start               # 指定start为global变量start
        print(label, start)
        start += 3
    return nested
</code></pre><h3 id="函数参数，不可变参数通过“值”传递，可变参数通过“引用”传递"><a href="#函数参数，不可变参数通过“值”传递，可变参数通过“引用”传递" class="headerlink" title="函数参数，不可变参数通过“值”传递，可变参数通过“引用”传递"></a>函数参数，不可变参数通过“值”传递，可变参数通过“引用”传递</h3><pre><code>def f(a, b, c): print(a, b, c)
f(1, 2, 3)                         # 参数位置匹配
f(1, c = 3, b = 2)                 # 参数关键字匹配
def f(a, b=1, c=2): print(a, b, c)
f(1)                               # 默认参数匹配
f(1, 2)                            # 默认参数匹配
f(a = 1, c = 3)                    # 关键字参数和默认参数的混合
# Keyword-Only参数:出现在*args之后 必须用关键字进行匹配
def keyOnly(a, *b, c): print(&apos;&apos;)   # c就为keyword-only匹配 必须使用关键字c = value匹配
def keyOnly(a, *, b, c): ......    # b c为keyword-only匹配 必须使用关键字匹配
def keyOnly(a, *, b = 1): ......   # b有默认值 或者省略 或者使用关键字参数b = value
</code></pre><h3 id="可变参数匹配-和"><a href="#可变参数匹配-和" class="headerlink" title="可变参数匹配:  和 *"></a>可变参数匹配: <em> 和 *</em></h3><pre><code>def f(*args): print(args)          # 在元组中收集不匹配的位置参数
f(1, 2, 3)                         # 输出(1, 2, 3)
def f(**args): print(args)         # 在字典中收集不匹配的关键字参数
f(a = 1, b = 2)                    # 输出{&apos;a&apos;:1, &apos;b&apos;:2}
def f(a, *b, **c): print(a, b, c)  # 两者混合使用
f(1, 2, 3, x=4, y=5)               # 输出1, (2, 3), {&apos;x&apos;:4, &apos;y&apos;:5}
</code></pre><h3 id="函数调用时的参数解包-和-分别解包元组和字典"><a href="#函数调用时的参数解包-和-分别解包元组和字典" class="headerlink" title="函数调用时的参数解包:  和 * 分别解包元组和字典"></a>函数调用时的参数解包: <em> 和 *</em> 分别解包元组和字典</h3><pre><code>func(1, *(2, 3))  &lt;==&gt;  func(1, 2, 3)
func(1, **{&apos;c&apos;:3, &apos;b&apos;:2})  &lt;==&gt;  func(1, b = 2, c = 3)
func(1, *(2, 3), **{&apos;c&apos;:3, &apos;b&apos;:2})  &lt;==&gt;  func(1, 2, 3, b = 2, c = 3)
</code></pre><h3 id="函数属性-自己定义的-函数可以添加属性"><a href="#函数属性-自己定义的-函数可以添加属性" class="headerlink" title="函数属性:(自己定义的)函数可以添加属性"></a>函数属性:(自己定义的)函数可以添加属性</h3><pre><code>def func():.....
func.count = 1                     # 自定义函数添加属性
print.count = 1                    # Error 内置函数不可以添加属性
</code></pre><h3 id="函数注解-编写在def头部行-主要用于说明参数范围、参数类型、返回值类型等"><a href="#函数注解-编写在def头部行-主要用于说明参数范围、参数类型、返回值类型等" class="headerlink" title="函数注解: 编写在def头部行 主要用于说明参数范围、参数类型、返回值类型等"></a>函数注解: 编写在def头部行 主要用于说明参数范围、参数类型、返回值类型等</h3><pre><code>def func(a:&apos;spam&apos;, b:(1, 10), c:float) -&gt; int :
    print(a, b, c)
func.__annotations__               # {&apos;c&apos;:&lt;class &apos;float&apos;&gt;, &apos;b&apos;:(1, 10), &apos;a&apos;:&apos;spam&apos;, &apos;return&apos;:&lt;class &apos;int&apos;&gt;}
# 编写注解的同时 还是可以使用函数默认值 并且注解的位置位于=号的前边
def func(a:&apos;spam&apos;=&apos;a&apos;, b:(1, 10)=2, c:float=3) -&gt; int :
    print(a, b, c)
</code></pre><h3 id="匿名函数-lambda"><a href="#匿名函数-lambda" class="headerlink" title="匿名函数:lambda"></a>匿名函数:lambda</h3><pre><code>f = lambda x, y, z : x + y + z     # 普通匿名函数，使用方法f(1, 2, 3)
f = lambda x = 1, y = 1: x + y     # 带默认参数的lambda函数
def action(x):                     # 嵌套lambda函数
    return (lambda y : x + y)
f = lambda: a if xxx() else b      # 无参数的lambda函数，使用方法f()
</code></pre><h3 id="lambda函数与map-filter-reduce函数的结合"><a href="#lambda函数与map-filter-reduce函数的结合" class="headerlink" title="lambda函数与map filter reduce函数的结合"></a>lambda函数与map filter reduce函数的结合</h3><pre><code>list(map((lambda x: x + 1), [1, 2, 3]))              # [2, 3, 4]
list(filter((lambda x: x &gt; 0), range(-4, 5)))        # [1, 2, 3, 4]
functools.reduce((lambda x, y: x + y), [1, 2, 3])    # 6
functools.reduce((lambda x, y: x * y), [2, 3, 4])    # 24
</code></pre><h3 id="生成器函数-yield-VS-return"><a href="#生成器函数-yield-VS-return" class="headerlink" title="生成器函数:yield VS return"></a>生成器函数:yield VS return</h3><pre><code>def gensquare(N):
    for i in range(N):
        yield i** 2                # 状态挂起 可以恢复到此时的状态
for i in gensquare(5):             # 使用方法
    print(i, end = &apos; &apos;)            # [0, 1, 4, 9, 16]
x = gensquare(2)                   # x是一个生成对象
next(x)                            # 等同于x.__next__() 返回0
next(x)                            # 等同于x.__next__() 返回1
next(x)                            # 等同于x.__next__() 抛出异常StopIteration
</code></pre><h3 id="生成器表达式-小括号进行列表解析"><a href="#生成器表达式-小括号进行列表解析" class="headerlink" title="生成器表达式:小括号进行列表解析"></a>生成器表达式:小括号进行列表解析</h3><pre><code>G = (x ** 2 for x in range(3))     # 使用小括号可以创建所需结果的生成器generator object
next(G), next(G), next(G)          # 和上述中的生成器函数的返回值一致
#（1）生成器(生成器函数/生成器表达式)是单个迭代对象
G = (x ** 2 for x in range(4))
I1 = iter(G)                       # 这里实际上iter(G) = G
next(I1)                           # 输出0
next(G)                            # 输出1
next(I1)                           # 输出4
#（2）生成器不保留迭代后的结果
gen = (i for i in range(4))
2 in gen                           # 返回True
3 in gen                           # 返回True
1 in gen                           # 返回False，其实检测2的时候，1已经就不在生成器中了，即1已经被迭代过了，同理2、3也不在了
</code></pre><h3 id="本地变量是静态检测的"><a href="#本地变量是静态检测的" class="headerlink" title="本地变量是静态检测的"></a>本地变量是静态检测的</h3><pre><code>X = 22                             # 全局变量X的声明和定义
def test():
    print(X)                       # 如果没有下一语句 则该句合法 打印全局变量X
    X = 88                         # 这一语句使得上一语句非法 因为它使得X变成了本地变量 上一句变成了打印一个未定义的本地变量(局部变量)
    if False:                      # 即使这样的语句 也会把print语句视为非法语句 因为:
        X = 88                     # Python会无视if语句而仍然声明了局部变量X
def test():                        # 改进
    global X                       # 声明变量X为全局变量
    print(X)                       # 打印全局变量X
    X = 88                         # 改变全局变量X
</code></pre><h3 id="函数的默认值是在函数定义的时候实例化的-而不是在调用的时候-例子"><a href="#函数的默认值是在函数定义的时候实例化的-而不是在调用的时候-例子" class="headerlink" title="函数的默认值是在函数定义的时候实例化的 而不是在调用的时候 例子:"></a>函数的默认值是在函数定义的时候实例化的 而不是在调用的时候 例子:</h3><pre><code>def foo(numbers=[]):               # 这里的[]是可变的
    numbers.append(9)
    print(numbers)
foo()                              # first time, like before, [9]
foo()                              # second time, not like before, [9, 9]
foo()                              # third time, not like before too, [9, 9, 9]
# 改进:
def foo(numbers=None):
    if numbers is None: numbers = []
    numbers.append(9)
    print(numbers)
# 另外一个例子 参数的默认值为不可变的:
def foo(count=0):                  # 这里的0是数字, 是不可变的
    count += 1
    print(count)
foo()                              # 输出1
foo()                              # 还是输出1
foo(3)                             # 输出4
foo()                              # 还是输出1
</code></pre><h2 id="函数例子"><a href="#函数例子" class="headerlink" title="函数例子"></a>函数例子</h2><pre><code>&quot;&quot;&quot;数学运算类&quot;&quot;&quot;
abs(x)                              # 求绝对值，参数可以是整型，也可以是复数，若参数是复数，则返回复数的模
complex([real[, imag]])             # 创建一个复数
divmod(a, b)                        # 分别取商和余数，注意：整型、浮点型都可以
float([x])                          # 将一个字符串或数转换为浮点数。如果无参数将返回0.0
int([x[, base]])                    # 将一个字符串或浮点数转换为int类型，base表示进制
long([x[, base]])                   # 将一个字符串或浮点数转换为long类型
pow(x, y)                           # 返回x的y次幂
range([start], stop[, step])        # 产生一个序列，默认从0开始
round(x[, n])                       # 四舍五入
sum(iterable[, start])              # 对集合求和
oct(x)                              # 将一个数字转化为8进制字符串
hex(x)                              # 将一个数字转换为16进制字符串
chr(i)                              # 返回给定int类型对应的ASCII字符
unichr(i)                           # 返回给定int类型的unicode
ord(c)                              # 返回ASCII字符对应的整数
bin(x)                              # 将整数x转换为二进制字符串
bool([x])                           # 将x转换为Boolean类型

&quot;&quot;&quot;集合类操作&quot;&quot;&quot;
basestring()                        # str和unicode的超类，不能直接调用，可以用作isinstance判断
format(value [, format_spec])       # 格式化输出字符串，格式化的参数顺序从0开始，如“I am {0},I like {1}”
enumerate(sequence[, start=0])      # 返回一个可枚举的对象，注意它有第二个参数
iter(obj[, sentinel])               # 生成一个对象的迭代器，第二个参数表示分隔符
max(iterable[, args...][key])       # 返回集合中的最大值
min(iterable[, args...][key])       # 返回集合中的最小值
dict([arg])                         # 创建数据字典
list([iterable])                    # 将一个集合类转换为另外一个集合类
set()                               # set对象实例化
frozenset([iterable])               # 产生一个不可变的set
tuple([iterable])                   # 生成一个tuple类型
str([object])                       # 转换为string类型
sorted(iterable[, cmp[, key[, reverse]]])             # 集合排序
    L = [(&apos;b&apos;,2),(&apos;a&apos;,1),(&apos;c&apos;,3),(&apos;d&apos;,4)]
    sorted(L, key=lambda x: x[1]), reverse=True)      # 使用Key参数和reverse参数
    sorted(L, key=lambda x: (x[0], x[1]))             # 使用key参数进行多条件排序，即如果x[0]相同，则比较x[1]

&quot;&quot;&quot;逻辑判断&quot;&quot;&quot;
all(iterable)                       # 集合中的元素都为真的时候为真，特别的，若为空串返回为True
any(iterable)                       # 集合中的元素有一个为真的时候为真，特别的，若为空串返回为False
cmp(x, y)                           # 如果x &lt; y ,返回负数；x == y, 返回0；x &gt; y,返回正数

&quot;&quot;&quot;IO操作&quot;&quot;&quot;
file(filename [, mode [, bufsize]]) # file类型的构造函数。
input([prompt])                     # 获取用户输入，推荐使用raw_input，因为该函数将不会捕获用户的错误输入
raw_input([prompt])                 # 设置输入，输入都是作为字符串处理
open(name[, mode[, buffering]])     # 打开文件，与file有什么不同？推荐使用open

&quot;&quot;&quot;其他&quot;&quot;&quot;
callable(object)                    # 检查对象object是否可调用
classmethod(func)                   # 用来说明这个func是个类方法
staticmethod(func)                  # 用来说明这个func为静态方法
dir([object])                       # 不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。
help(obj)                           # 返回obj的帮助信息
eval(expression)                    # 计算表达式expression的值，并返回
exec(str)                           # 将str作为Python语句执行
execfile(filename)                  # 用法类似exec()，不同的是execfile的参数filename为文件名，而exec的参数为字符串。
filter(function, iterable)          # 构造一个序列，等价于[item for item in iterable if function(item)]，function返回值为True或False的函数
    list(filter(bool, range(-3, 4)))# 返回[-3, -2, -1, 1, 2, 3], 没有0
hasattr(object, name)               # 判断对象object是否包含名为name的特性
getattr(object, name [, defalut])   # 获取一个类的属性
setattr(object, name, value)        # 设置属性值
delattr(object, name)               # 删除object对象名为name的属性
globals()                           # 返回一个描述当前全局符号表的字典
hash(object)                        # 如果对象object为哈希表类型，返回对象object的哈希值
id(object)                          # 返回对象的唯一标识，一串数字
isinstance(object, classinfo)       # 判断object是否是class的实例
    isinstance(1, int)              # 判断是不是int类型
    isinstance(1, (int, float))     # isinstance的第二个参数接受一个元组类型
issubclass(class, classinfo)        # 判断class是否为classinfo的子类
locals()                            # 返回当前的变量列表
map(function, iterable, ...)        # 遍历每个元素，执行function操作
    list(map(abs, range(-3, 4)))    # 返回[3, 2, 1, 0, 1, 2, 3]
next(iterator[, default])           # 类似于iterator.next()
property([fget[, fset[, fdel[, doc]]]])           # 属性访问的包装类，设置后可以通过c.x=value等来访问setter和getter
reduce(function, iterable[, initializer])         # 合并操作，从第一个开始是前两个参数，然后是前两个的结果与第三个合并进行处理，以此类推
    def add(x,y):return x + y
    reduce(add, range(1, 11))                     # 返回55 (注:1+2+3+4+5+6+7+8+9+10 = 55)
    reduce(add, range(1, 11), 20)                 # 返回75
reload(module)                      # 重新加载模块
repr(object)                        # 将一个对象变幻为可打印的格式
slice(start, stop[, step])          # 产生分片对象
type(object)                        # 返回该object的类型
vars([object])                      # 返回对象的变量名、变量值得字典
    a = Class();                    # Class为一个空类
    a.name = &apos;qi&apos;, a.age = 9
    vars(a)                         # {&apos;name&apos;:&apos;qi&apos;, &apos;age&apos;:9}
zip([iterable, ...])                # 返回对应数组
    list(zip([1, 2, 3], [4, 5, 6])) # [(1, 4), (2, 5), (3, 6)]
    a = [1, 2, 3],  b = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
    z = zip(a, b)                   # 压缩：[(1, &quot;a&quot;), (2, &quot;b&quot;), (3, &quot;c&quot;)]
    zip(*z)                         # 解压缩：[(1, 2, 3), (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)]
unicode(string, encoding, errors)   # 将字符串string转化为unicode形式，string为encoded string。
</code></pre><h2 id="模块Moudle"><a href="#模块Moudle" class="headerlink" title="模块Moudle"></a>模块Moudle</h2><h3 id="Python模块搜索路径"><a href="#Python模块搜索路径" class="headerlink" title="Python模块搜索路径:"></a>Python模块搜索路径:</h3><pre><code>&quot;&quot;&quot;
(1)程序的主目录    (2)PYTHONPATH目录 (3)标准链接库目录 (4)任何.pth文件的内容
&quot;&quot;&quot;
</code></pre><h3 id="查看全部的模块搜索路径"><a href="#查看全部的模块搜索路径" class="headerlink" title="查看全部的模块搜索路径"></a>查看全部的模块搜索路径</h3><pre><code>import sys
sys.path
sys.argv                            # 获得脚本的参数
sys.builtin_module_names            # 查找内建模块
sys.platform                        # 返回当前平台 出现如： &quot;win32&quot; &quot;linux&quot; &quot;darwin&quot;等
sys.modules                         # 查找已导入的模块
sys.modules.keys()
sys.stdout                          # stdout 和 stderr 都是类文件对象，但是它们都是只写的。它们都没有 read 方法，只有 write 方法
sys.stdout.write(&quot;hello&quot;)
sys.stderr
sys.stdin
</code></pre><h3 id="模块的使用代码"><a href="#模块的使用代码" class="headerlink" title="模块的使用代码"></a>模块的使用代码</h3><pre><code>import module1, module2             # 导入module1 使用module1.printer()
from module1 import printer         # 导入module1中的printer变量 使用printer()
from module1 import *               # 导入module1中的全部变量 使用不必添加module1前缀
</code></pre><h3 id="重载模块reload-这是一个内置函数-而不是一条语句"><a href="#重载模块reload-这是一个内置函数-而不是一条语句" class="headerlink" title="重载模块reload: 这是一个内置函数 而不是一条语句"></a>重载模块reload: 这是一个内置函数 而不是一条语句</h3><pre><code>from imp import reload
reload(module)
</code></pre><h3 id="模块的包导入-使用点号-而不是路径-dir1-dir2-进行导入"><a href="#模块的包导入-使用点号-而不是路径-dir1-dir2-进行导入" class="headerlink" title="模块的包导入:使用点号(.)而不是路径(dir1\dir2)进行导入"></a>模块的包导入:使用点号(.)而不是路径(dir1\dir2)进行导入</h3><pre><code>import dir1.dir2.mod                # d导入包(目录)dir1中的包dir2中的mod模块 此时dir1必须在Python可搜索路径中
from dir1.dir2.mod import *         # from语法的包导入
</code></pre><h3 id="init-py包文件-每个导入的包中都应该包含这么一个文件"><a href="#init-py包文件-每个导入的包中都应该包含这么一个文件" class="headerlink" title="init.py包文件:每个导入的包中都应该包含这么一个文件"></a><strong>init</strong>.py包文件:每个导入的包中都应该包含这么一个文件</h3><pre><code>&quot;&quot;&quot;
该文件可以为空
首次进行包导入时 该文件会自动执行
高级功能:在该文件中使用__all__列表来定义包(目录)以from*的形式导入时 需要导入什么
&quot;&quot;&quot;
</code></pre><h3 id="包相对导入-使用点号-只能使用from语句"><a href="#包相对导入-使用点号-只能使用from语句" class="headerlink" title="包相对导入:使用点号(.) 只能使用from语句"></a>包相对导入:使用点号(.) 只能使用from语句</h3><pre><code>from . import spam                  # 导入当前目录下的spam模块（错误: 当前目录下的模块, 直接导入即可）
from .spam import name              # 导入当前目录下的spam模块的name属性（错误: 当前目录下的模块, 直接导入即可，不用加.）
from .. import spam                 # 导入当前目录的父目录下的spam模块
</code></pre><h3 id="包相对导入与普通导入的区别"><a href="#包相对导入与普通导入的区别" class="headerlink" title="包相对导入与普通导入的区别"></a>包相对导入与普通导入的区别</h3><pre><code>from string import *                # 这里导入的string模块为sys.path路径上的 而不是本目录下的string模块(如果存在也不是)
from .string import *               # 这里导入的string模块为本目录下的(不存在则导入失败) 而不是sys.path路径上的
</code></pre><h3 id="模块数据隐藏-最小化from-的破坏"><a href="#模块数据隐藏-最小化from-的破坏" class="headerlink" title="模块数据隐藏:最小化from*的破坏"></a>模块数据隐藏:最小化from*的破坏</h3><pre><code>_X                                  # 变量名前加下划线可以防止from*导入时该变量名被复制出去
__all__ = [&apos;x&apos;, &apos;x1&apos;, &apos;x2&apos;]         # 使用__all__列表指定from*时复制出去的变量名(变量名在列表中为字符串形式)
</code></pre><h3 id="可以使用name进行模块的单元测试-当模块为顶层执行文件时值为’main‘-当模块被导入时为模块名"><a href="#可以使用name进行模块的单元测试-当模块为顶层执行文件时值为’main‘-当模块被导入时为模块名" class="headerlink" title="可以使用name进行模块的单元测试:当模块为顶层执行文件时值为’main‘ 当模块被导入时为模块名"></a>可以使用<strong>name</strong>进行模块的单元测试:当模块为顶层执行文件时值为’<strong>main</strong>‘ 当模块被导入时为模块名</h3><pre><code>if __name__ == &apos;__main__&apos;:
    doSomething
# 模块属性中还有其他属性，例如：
__doc__                             # 模块的说明文档
__file__                            # 模块文件的文件名，包括全路径
__name__                            # 主文件或者被导入文件
__package__                         # 模块所在的包
</code></pre><h3 id="import语句from语句的as扩展"><a href="#import语句from语句的as扩展" class="headerlink" title="import语句from语句的as扩展"></a>import语句from语句的as扩展</h3><pre><code>import modulename as name
from modulename import attrname as name
</code></pre><h3 id="得到模块属性的几种方法-假设为了得到name属性的值"><a href="#得到模块属性的几种方法-假设为了得到name属性的值" class="headerlink" title="得到模块属性的几种方法 假设为了得到name属性的值"></a>得到模块属性的几种方法 假设为了得到name属性的值</h3><pre><code>M.name
M.__dict__[&apos;name&apos;]
sys.modules[&apos;M&apos;].name
getattr(M, &apos;name&apos;)
</code></pre><h2 id="类与面向对象"><a href="#类与面向对象" class="headerlink" title="类与面向对象"></a>类与面向对象</h2><h3 id="最普通的类"><a href="#最普通的类" class="headerlink" title="最普通的类"></a>最普通的类</h3><pre><code>class C1(C2, C3):
    spam = 42                       # 数据属性
    def __init__(self, name):       # 函数属性:构造函数
        self.name = name
    def __del__(self):              # 函数属性:析构函数
        print(&quot;goodbey &quot;, self.name)
I1 = C1(&apos;bob&apos;)
</code></pre><h3 id="Python的类没有基于参数的函数重载"><a href="#Python的类没有基于参数的函数重载" class="headerlink" title="Python的类没有基于参数的函数重载"></a>Python的类没有基于参数的函数重载</h3><pre><code>class FirstClass:
    def test(self, string):
        print(string)
    def test(self):                 # 此时类中只有一个test函数 即后者test(self) 它覆盖掉前者带参数的test函数
        print(&quot;hello world&quot;)
</code></pre><h3 id="子类扩展超类-尽量调用超类的方法"><a href="#子类扩展超类-尽量调用超类的方法" class="headerlink" title="子类扩展超类: 尽量调用超类的方法"></a>子类扩展超类: 尽量调用超类的方法</h3><pre><code>class Manager(Person):
    def giveRaise(self, percent, bonus = .10):
        self.pay = int(self.pay*(1 + percent + bonus))     # 不好的方式 复制粘贴超类代码
        Person.giveRaise(self, percent + bonus)            # 好的方式 尽量调用超类方法
</code></pre><h3 id="类内省工具"><a href="#类内省工具" class="headerlink" title="类内省工具"></a>类内省工具</h3><pre><code>bob = Person(&apos;bob&apos;)
bob.__class__                       # &lt;class &apos;Person&apos;&gt;
bob.__class__.__name__              # &apos;Person&apos;
bob.__dict__                        # {&apos;pay&apos;:0, &apos;name&apos;:&apos;bob&apos;, &apos;job&apos;:&apos;Manager&apos;}
</code></pre><h3 id="返回1中-数据属性spam是属于类-而不是对象"><a href="#返回1中-数据属性spam是属于类-而不是对象" class="headerlink" title="返回1中 数据属性spam是属于类 而不是对象"></a>返回1中 数据属性spam是属于类 而不是对象</h3><pre><code>I1 = C1(&apos;bob&apos;); I2 = C2(&apos;tom&apos;)      # 此时I1和I2的spam都为42 但是都是返回的C1的spam属性
C1.spam = 24                        # 此时I1和I2的spam都为24
I1.spam = 3                         # 此时I1新增自有属性spam 值为2 I2和C1的spam还都为24
</code></pre><h3 id="类方法调用的两种方式"><a href="#类方法调用的两种方式" class="headerlink" title="类方法调用的两种方式"></a>类方法调用的两种方式</h3><pre><code>instance.method(arg...)
class.method(instance, arg...)
</code></pre><h3 id="抽象超类的实现方法"><a href="#抽象超类的实现方法" class="headerlink" title="抽象超类的实现方法"></a>抽象超类的实现方法</h3><pre><code># (1)某个函数中调用未定义的函数 子类中定义该函数
    def delegate(self):
        self.action()               # 本类中不定义action函数 所以使用delegate函数时就会出错
# (2)定义action函数 但是返回异常
    def action(self):
        raise NotImplementedError(&quot;action must be defined&quot;)
# (3)上述的两种方法还都可以定义实例对象 实际上可以利用@装饰器语法生成不能定义的抽象超类
    from abc import ABCMeta, abstractmethod
    class Super(metaclass = ABCMeta):
        @abstractmethod
        def action(self): pass
    x = Super()                     # 返回 TypeError: Can&apos;t instantiate abstract class Super with abstract methods action
</code></pre><h3 id="OOP和继承-“is-a”的关系"><a href="#OOP和继承-“is-a”的关系" class="headerlink" title="# OOP和继承: “is-a”的关系"></a># OOP和继承: “is-a”的关系</h3><pre><code>class A(B):
    pass
a = A()
isinstance(a, B)                    # 返回True, A是B的子类 a也是B的一种
# OOP和组合: &quot;has-a&quot;的关系
pass
# OOP和委托: &quot;包装&quot;对象 在Python中委托通常是以&quot;__getattr__&quot;钩子方法实现的, 这个方法会拦截对不存在属性的读取
# 包装类(或者称为代理类)可以使用__getattr__把任意读取转发给被包装的对象
class wrapper:
    def __init__(self, object):
        self.wrapped = object
    def __getattr(self, attrname):
        print(&apos;Trace: &apos;, attrname)
        return getattr(self.wrapped, attrname)
# 注:这里使用getattr(X, N)内置函数以变量名字符串N从包装对象X中取出属性 类似于X.__dict__[N]
x = wrapper([1, 2, 3])
x.append(4)                         # 返回 &quot;Trace: append&quot; [1, 2, 3, 4]
x = wrapper({&apos;a&apos;:1, &apos;b&apos;:2})
list(x.keys())                      # 返回 &quot;Trace: keys&quot; [&apos;a&apos;, &apos;b&apos;]
</code></pre><h3 id="类的伪私有属性-使用-attr"><a href="#类的伪私有属性-使用-attr" class="headerlink" title="类的伪私有属性:使用__attr"></a>类的伪私有属性:使用__attr</h3><pre><code>class C1:
    def __init__(self, name):
        self.__name = name          # 此时类的__name属性为伪私有属性 原理 它会自动变成self._C1__name = name
    def __str__(self):
        return &apos;self.name = %s&apos; % self.__name
I = C1(&apos;tom&apos;)
print(I)                            # 返回 self.name = tom
I.__name = &apos;jeey&apos;                   # 这里无法访问 __name为伪私有属性
I._C1__name = &apos;jeey&apos;                # 这里可以修改成功 self.name = jeey
</code></pre><h3 id="类方法是对象-无绑定类方法对象-绑定实例方法对象"><a href="#类方法是对象-无绑定类方法对象-绑定实例方法对象" class="headerlink" title="类方法是对象:无绑定类方法对象 / 绑定实例方法对象"></a>类方法是对象:无绑定类方法对象 / 绑定实例方法对象</h3><pre><code>class Spam:
    def doit(self, message):
        print(message)
    def selfless(message)
        print(message)
obj = Spam()
x = obj.doit                        # 类的绑定方法对象 实例 + 函数
x(&apos;hello world&apos;)
x = Spam.doit                       # 类的无绑定方法对象 类名 + 函数
x(obj, &apos;hello world&apos;)
x = Spam.selfless                   # 类的无绑定方法是函数 在3.0之前无效
x(&apos;hello world&apos;)
</code></pre><h3 id="获取对象信息-属性和方法"><a href="#获取对象信息-属性和方法" class="headerlink" title="获取对象信息: 属性和方法"></a>获取对象信息: 属性和方法</h3><pre><code>a = MyObject()
dir(a)                              # 使用dir函数
hasattr(a, &apos;x&apos;)                     # 测试是否有x属性或方法 即a.x是否已经存在
setattr(a, &apos;y&apos;, 19)                 # 设置属性或方法 等同于a.y = 19
getattr(a, &apos;z&apos;, 0)                  # 获取属性或方法 如果属性不存在 则返回默认值0
#这里有个小技巧，setattr可以设置一个不能访问到的属性，即只能用getattr获取
setattr(a, &quot;can&apos;t touch&quot;, 100)      # 这里的属性名带有空格，不能直接访问
getattr(a, &quot;can&apos;t touch&quot;, 0)        # 但是可以用getattr获取
</code></pre><h3 id="为类动态绑定属性或方法-MethodType方法"><a href="#为类动态绑定属性或方法-MethodType方法" class="headerlink" title="为类动态绑定属性或方法: MethodType方法"></a>为类动态绑定属性或方法: MethodType方法</h3><pre><code># 一般创建了一个class的实例后, 可以给该实例绑定任何属性和方法, 这就是动态语言的灵活性
class Student(object):
    pass
s = Student()
s.name = &apos;Michael&apos;                  # 动态给实例绑定一个属性
def set_age(self, age):             # 定义一个函数作为实例方法
    self.age = age
from types import MethodType
s.set_age = MethodType(set_age, s)  # 给实例绑定一个方法 类的其他实例不受此影响
s.set_age(25)                       # 调用实例方法
Student.set_age = MethodType(set_age, Student)    # 为类绑定一个方法 类的所有实例都拥有该方法
</code></pre><h2 id="类的高级话题"><a href="#类的高级话题" class="headerlink" title="类的高级话题"></a>类的高级话题</h2><h3 id="多重继承-“混合类”-搜索方式”从下到上-从左到右-广度优先”"><a href="#多重继承-“混合类”-搜索方式”从下到上-从左到右-广度优先”" class="headerlink" title="多重继承: “混合类”, 搜索方式”从下到上 从左到右 广度优先”"></a>多重继承: “混合类”, 搜索方式”从下到上 从左到右 广度优先”</h3><pre><code>class A(B, C):
    pass
</code></pre><h3 id="类的继承和子类的初始化"><a href="#类的继承和子类的初始化" class="headerlink" title="类的继承和子类的初始化"></a>类的继承和子类的初始化</h3><pre><code># 1.子类定义了__init__方法时，若未显示调用基类__init__方法，python不会帮你调用。
# 2.子类未定义__init__方法时，python会自动帮你调用首个基类的__init__方法，注意是首个。
# 3.子类显示调用基类的初始化函数：
class FooParent(object):
    def __init__(self, a):
        self.parent = &apos;I\&apos;m the Parent.&apos;
        print(&apos;Parent:a=&apos; + str(a))
    def bar(self, message):
        print(message + &apos; from Parent&apos;)
class FooChild(FooParent):
    def __init__(self, a):
        FooParent.__init__(self, a)
        print(&apos;Child:a=&apos; + str(a))
    def bar(self, message):
        FooParent.bar(self, message)
        print(message + &apos; from Child&apos;)
fooChild = FooChild(10)
fooChild.bar(&apos;HelloWorld&apos;)
</code></pre><h3 id="实例方法-静态方法-类方法"><a href="#实例方法-静态方法-类方法" class="headerlink" title="#实例方法 / 静态方法 / 类方法"></a>#实例方法 / 静态方法 / 类方法</h3><pre><code>class Methods:
    def imeth(self, x): print(self, x)      # 实例方法：传入的是实例和数据，操作的是实例的属性
    def smeth(x): print(x)                  # 静态方法：只传入数据 不传入实例，操作的是类的属性而不是实例的属性
    def cmeth(cls, x): print(cls, x)        # 类方法：传入的是类对象和数据
    smeth = staticmethod(smeth)             # 调用内置函数，也可以使用@staticmethod
    cmeth = classmethod(cmeth)              # 调用内置函数，也可以使用@classmethod
obj = Methods()
obj.imeth(1)                                # 实例方法调用 &lt;__main__.Methods object...&gt; 1
Methods.imeth(obj, 2)                       # &lt;__main__.Methods object...&gt; 2
Methods.smeth(3)                            # 静态方法调用 3
obj.smeth(4)                                # 这里可以使用实例进行调用
Methods.cmeth(5)                            # 类方法调用 &lt;class &apos;__main__.Methods&apos;&gt; 5
obj.cmeth(6)                                # &lt;class &apos;__main__.Methods&apos;&gt; 6
</code></pre><h3 id="函数装饰器-是它后边的函数的运行时的声明-由-符号以及后边紧跟的”元函数”-metafunction-组成"><a href="#函数装饰器-是它后边的函数的运行时的声明-由-符号以及后边紧跟的”元函数”-metafunction-组成" class="headerlink" title="函数装饰器:是它后边的函数的运行时的声明 由@符号以及后边紧跟的”元函数”(metafunction)组成"></a>函数装饰器:是它后边的函数的运行时的声明 由@符号以及后边紧跟的”元函数”(metafunction)组成</h3><pre><code>    @staticmethod
    def smeth(x): print(x)
# 等同于:
    def smeth(x): print(x)
    smeth = staticmethod(smeth)
# 同理
    @classmethod
    def cmeth(cls, x): print(x)
# 等同于
    def cmeth(cls, x): print(x)
    cmeth = classmethod(cmeth)
</code></pre><h3 id="类修饰器-是它后边的类的运行时的声明-由-符号以及后边紧跟的”元函数”-metafunction-组成"><a href="#类修饰器-是它后边的类的运行时的声明-由-符号以及后边紧跟的”元函数”-metafunction-组成" class="headerlink" title="类修饰器:是它后边的类的运行时的声明 由@符号以及后边紧跟的”元函数”(metafunction)组成"></a>类修饰器:是它后边的类的运行时的声明 由@符号以及后边紧跟的”元函数”(metafunction)组成</h3><pre><code>    def decorator(aClass):.....
    @decorator
    class C:....
# 等同于:
    class C:....
    C = decorator(C)
</code></pre><h3 id="限制class属性-slots属性"><a href="#限制class属性-slots属性" class="headerlink" title="限制class属性: slots属性"></a>限制class属性: <strong>slots</strong>属性</h3><pre><code>class Student:
    __slots__ = (&apos;name&apos;, &apos;age&apos;)             # 限制Student及其实例只能拥有name和age属性
# __slots__属性只对当前类起作用, 对其子类不起作用
# __slots__属性能够节省内存
# __slots__属性可以为列表list，或者元组tuple
</code></pre><h3 id="类属性高级话题-property"><a href="#类属性高级话题-property" class="headerlink" title="类属性高级话题: @property"></a>类属性高级话题: @property</h3><pre><code># 假设定义了一个类:C，该类必须继承自object类，有一私有变量_x
class C(object):
    def __init__(self):
        self.__x = None
# 第一种使用属性的方法
    def getx(self):
        return self.__x
    def setx(self, value):
        self.__x = value
    def delx(self):
        del self.__x
    x = property(getx, setx, delx, &apos;&apos;)
# property函数原型为property(fget=None,fset=None,fdel=None,doc=None)
# 使用
c = C()
c.x = 100                         # 自动调用setx方法
y = c.x                           # 自动调用getx方法
del c.x                           # 自动调用delx方法
# 第二种方法使用属性的方法
    @property
    def x(self):
        return self.__x
    @x.setter
    def x(self, value):
       self.__x = value
    @x.deleter
    def x(self):
       del self.__x
# 使用
c = C()
c.x = 100                         # 自动调用setter方法
y = c.x                           # 自动调用x方法
del c.x                           # 自动调用deleter方法
</code></pre><h3 id="定制类-重写类的方法"><a href="#定制类-重写类的方法" class="headerlink" title="定制类: 重写类的方法"></a>定制类: 重写类的方法</h3><pre><code># (1)__str__方法、__repr__方法: 定制类的输出字符串
# (2)__iter__方法、next方法: 定制类的可迭代性
class Fib(object):
    def __init__(self):
        self.a, self.b = 0, 1     # 初始化两个计数器a，b
    def __iter__(self):
        return self               # 实例本身就是迭代对象，故返回自己
    def next(self):
        self.a, self.b = self.b, self.a + self.b
        if self.a &gt; 100000:       # 退出循环的条件
            raise StopIteration()
        return self.a             # 返回下一个值
for n in Fib():
    print(n)                      # 使用
# (3)__getitem__方法、__setitem__方法: 定制类的下标操作[] 或者切片操作slice
class Indexer(object):
    def __init__(self):
        self.data = {}
    def __getitem__(self, n):             # 定义getitem方法
        print(&apos;getitem:&apos;, n)
        return self.data[n]
    def __setitem__(self, key, value):    # 定义setitem方法
        print(&apos;setitem:key = {0}, value = {1}&apos;.format(key, value))
        self.data[key] = value
test = Indexer()
test[0] = 1;   test[3] = &apos;3&apos;              # 调用setitem方法
print(test[0])                            # 调用getitem方法
# (4)__getattr__方法: 定制类的属性操作
class Student(object):
    def __getattr__(self, attr):          # 定义当获取类的属性时的返回值
        if attr==&apos;age&apos;:
            return 25                     # 当获取age属性时返回25
    raise AttributeError(&apos;object has no attribute: %s&apos; % attr)
    # 注意: 只有当属性不存在时 才会调用该方法 且该方法默认返回None 需要在函数最后引发异常
s = Student()
s.age                                     # s中age属性不存在 故调用__getattr__方法 返回25
# (5)__call__方法: 定制类的&apos;可调用&apos;性
class Student(object):
    def __call__(self):                   # 也可以带参数
        print(&apos;Calling......&apos;)
s = Student()
s()                                       # s变成了可调用的 也可以带参数
callable(s)                               # 测试s的可调用性 返回True
#    (6)__len__方法：求类的长度
def __len__(self):
    return len(self.data)
</code></pre><h3 id="动态创建类type"><a href="#动态创建类type" class="headerlink" title="动态创建类type()"></a>动态创建类type()</h3><pre><code># 一般创建类 需要在代码中提前定义
    class Hello(object):
        def hello(self, name=&apos;world&apos;):
            print(&apos;Hello, %s.&apos; % name)
    h = Hello()
    h.hello()                             # Hello, world
    type(Hello)                           # Hello是一个type类型 返回&lt;class &apos;type&apos;&gt;
    type(h)                               # h是一个Hello类型 返回&lt;class &apos;Hello&apos;&gt;
# 动态类型语言中 类可以动态创建 type函数可用于创建新类型
    def fn(self, name=&apos;world&apos;):           # 先定义函数
        print(&apos;Hello, %s.&apos; % name)
    Hello = type(&apos;Hello&apos;, (object,), dict(hello=fn))
    # 创建Hello类 type原型: type(name, bases, dict)
    h = Hello()                           # 此时的h和上边的h一致
</code></pre><h2 id="异常相关"><a href="#异常相关" class="headerlink" title="异常相关"></a>异常相关</h2><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="#捕获异常:"></a>#捕获异常:</h3><pre><code>    try:
    except:                               # 捕获所有的异常 等同于except Exception:
    except name:                          # 捕获指定的异常
    except name, value:                   # 捕获指定的异常和额外的数据(实例)
    except (name1, name2):
    except (name1, name2), value:
    except name4 as X:
    else:                                 # 如果没有发生异常
    finally:                              # 总会执行的部分
# 引发异常: raise子句(raise IndexError)
    raise &lt;instance&gt;                      # raise instance of a class, raise IndexError()
    raise &lt;class&gt;                         # make and raise instance of a class, raise IndexError
    raise                                 # reraise the most recent exception
</code></pre><h3 id="Python3-x中的异常链-raise-exception-from-otherException"><a href="#Python3-x中的异常链-raise-exception-from-otherException" class="headerlink" title="Python3.x中的异常链: raise exception from otherException"></a>Python3.x中的异常链: raise exception from otherException</h3><pre><code>except Exception as X:
    raise IndexError(&apos;Bad&apos;) from X
</code></pre><h3 id="assert子句-assert"><a href="#assert子句-assert" class="headerlink" title="assert子句: assert , "></a>assert子句: assert <test>, <data></data></test></h3><pre><code>assert x &lt; 0, &apos;x must be negative&apos;
</code></pre><h3 id="with-as环境管理器-作为常见的try-finally用法模式的替代方案"><a href="#with-as环境管理器-作为常见的try-finally用法模式的替代方案" class="headerlink" title="with/as环境管理器:作为常见的try/finally用法模式的替代方案"></a>with/as环境管理器:作为常见的try/finally用法模式的替代方案</h3><pre><code>with expression [as variable], expression [as variable]:
# 例子:
    with open(&apos;test.txt&apos;) as myfile:
        for line in myfile: print(line)
# 等同于:
    myfile = open(&apos;test.txt&apos;)
    try:
        for line in myfile: print(line)
    finally:
        myfile.close()
</code></pre><h3 id="用户自定义异常-class-Bad-Exception-…"><a href="#用户自定义异常-class-Bad-Exception-…" class="headerlink" title="用户自定义异常: class Bad(Exception):….."></a>用户自定义异常: class Bad(Exception):…..</h3><pre><code>&quot;&quot;&quot;
Exception超类 / except基类即可捕获到其所有子类
Exception超类有默认的打印消息和状态 当然也可以定制打印显示:
&quot;&quot;&quot;
class MyBad(Exception):
    def __str__(self):
        return &apos;定制的打印消息&apos;
try:
    MyBad()
except MyBad as x:
    print(x)
</code></pre><h3 id="用户定制异常数据"><a href="#用户定制异常数据" class="headerlink" title="用户定制异常数据"></a>用户定制异常数据</h3><pre><code>class FormatError(Exception):
    def __init__(self, line ,file):
        self.line = line
        self.file = file
try:
    raise FormatError(42, &apos;test.py&apos;)
except FormatError as X:
    print(&apos;Error at &apos;, X.file, X.line)
# 用户定制异常行为(方法):以记录日志为例
class FormatError(Exception):
    logfile = &apos;formaterror.txt&apos;
    def __init__(self, line ,file):
        self.line = line
        self.file = file
    def logger(self):
        open(self.logfile, &apos;a&apos;).write(&apos;Error at &apos;, self.file, self.line)
try:
    raise FormatError(42, &apos;test.py&apos;)
except FormatError as X:
    X.logger()
</code></pre><h3 id="关于sys-exc-info-允许一个异常处理器获取对最近引发的异常的访问"><a href="#关于sys-exc-info-允许一个异常处理器获取对最近引发的异常的访问" class="headerlink" title="关于sys.exc_info:允许一个异常处理器获取对最近引发的异常的访问"></a>关于sys.exc_info:允许一个异常处理器获取对最近引发的异常的访问</h3><pre><code>try:
    ......
except:
    # 此时sys.exc_info()返回一个元组(type, value, traceback)
    # type:正在处理的异常的异常类型
    # value:引发的异常的实例
    # traceback:堆栈信息
</code></pre><h3 id="异常层次"><a href="#异常层次" class="headerlink" title="异常层次"></a>异常层次</h3><pre><code>BaseException
+-- SystemExit
+-- KeyboardInterrupt
+-- GeneratorExit
+-- Exception
    +-- StopIteration
    +-- ArithmeticError
    +-- AssertionError
    +-- AttributeError
    +-- BufferError
    +-- EOFError
    +-- ImportError
    +-- LookupError
    +-- MemoryError
    +-- NameError
    +-- OSError
    +-- ReferenceError
    +-- RuntimeError
    +-- SyntaxError
    +-- SystemError
    +-- TypeError
    +-- ValueError
    +-- Warning
</code></pre><h2 id="Unicode和字节字符串"><a href="#Unicode和字节字符串" class="headerlink" title="Unicode和字节字符串"></a>Unicode和字节字符串</h2><h3 id="Python的字符串类型"><a href="#Python的字符串类型" class="headerlink" title="Python的字符串类型"></a>Python的字符串类型</h3><pre><code>&quot;&quot;&quot;Python2.x&quot;&quot;&quot;
# 1.str表示8位文本和二进制数据
# 2.unicode表示宽字符Unicode文本
&quot;&quot;&quot;Python3.x&quot;&quot;&quot;
# 1.str表示Unicode文本（8位或者更宽）
# 2.bytes表示不可变的二进制数据
# 3.bytearray是一种可变的bytes类型
</code></pre><h3 id="字符编码方法"><a href="#字符编码方法" class="headerlink" title="字符编码方法"></a>字符编码方法</h3><pre><code>&quot;&quot;&quot;ASCII&quot;&quot;&quot;                   # 一个字节，只包含英文字符，0到127，共128个字符，利用函数可以进行字符和数字的相互转换
ord(&apos;a&apos;)                      # 字符a的ASCII码为97，所以这里返回97
chr(97)                       # 和上边的过程相反，返回字符&apos;a&apos;
&quot;&quot;&quot;Latin-1&quot;&quot;&quot;                 # 一个字节，包含特殊字符，0到255，共256个字符，相当于对ASCII码的扩展
chr(196)                      # 返回一个特殊字符：Ä
&quot;&quot;&quot;Unicode&quot;&quot;&quot;                 # 宽字符，一个字符包含多个字节，一般用于亚洲的字符集，比如中文有好几万字
&quot;&quot;&quot;UTF-8&quot;&quot;&quot;                   # 可变字节数，小于128的字符表示为单个字节，128到0X7FF之间的代码转换为两个字节，0X7FF以上的代码转换为3或4个字节
# 注意：可以看出来，ASCII码是Latin-1和UTF-8的一个子集
# 注意：utf-8是unicode的一种实现方式，unicode、gbk、gb2312是编码字符集
</code></pre><h3 id="查看Python中的字符串编码名称，查看系统的编码"><a href="#查看Python中的字符串编码名称，查看系统的编码" class="headerlink" title="查看Python中的字符串编码名称，查看系统的编码"></a>查看Python中的字符串编码名称，查看系统的编码</h3><pre><code>import encodings
help(encoding)
import sys
sys.platform                  # &apos;win64&apos;
sys.getdefaultencoding()      # &apos;utf-8&apos;
sys.getdefaultencoding()      # 返回当前系统平台的编码类型
sys.getsizeof(object)         # 返回object占有的bytes的大小
</code></pre><h3 id="源文件字符集编码声明-添加注释来指定想要的编码形式-从而改变默认值-注释必须出现在脚本的第一行或者第二行"><a href="#源文件字符集编码声明-添加注释来指定想要的编码形式-从而改变默认值-注释必须出现在脚本的第一行或者第二行" class="headerlink" title="源文件字符集编码声明: 添加注释来指定想要的编码形式 从而改变默认值 注释必须出现在脚本的第一行或者第二行"></a>源文件字符集编码声明: 添加注释来指定想要的编码形式 从而改变默认值 注释必须出现在脚本的第一行或者第二行</h3><pre><code>&quot;&quot;&quot;说明：其实这里只会检查#和coding:utf-8，其余的字符都是为了美观加上的&quot;&quot;&quot;
# _*_ coding: utf-8 _*_
# coding = utf-8
</code></pre><h3 id="编码-字符串-–-gt-原始字节-解码-原始字节-–-gt-字符串"><a href="#编码-字符串-–-gt-原始字节-解码-原始字节-–-gt-字符串" class="headerlink" title="#编码: 字符串 –&gt; 原始字节       #解码: 原始字节 –&gt; 字符串"></a>#编码: 字符串 –&gt; 原始字节       #解码: 原始字节 –&gt; 字符串</h3><h3 id="Python3-x中的字符串应用"><a href="#Python3-x中的字符串应用" class="headerlink" title="Python3.x中的字符串应用"></a>Python3.x中的字符串应用</h3><pre><code>s = &apos;...&apos;                     # 构建一个str对象，不可变对象
b = b&apos;...&apos;                    # 构建一个bytes对象，不可变对象
s[0], b[0]                    # 返回(&apos;.&apos;, 113)
s[1:], b[1:]                  # 返回(&apos;..&apos;, b&apos;..&apos;)
B = B&quot;&quot;&quot;
    xxxx
    yyyy
    &quot;&quot;&quot;
# B = b&apos;\nxxxx\nyyyy\n&apos;
# 编码，将str字符串转化为其raw bytes形式：
    str.encode(encoding = &apos;utf-8&apos;, errors = &apos;strict&apos;)
    bytes(str, encoding)
# 编码例子：
    S = &apos;egg&apos;
    S.encode()                    # b&apos;egg&apos;
    bytes(S, encoding = &apos;ascii&apos;)  # b&apos;egg&apos;
# 解码，将raw bytes字符串转化为str形式：
    bytes.decode(encoding = &apos;utf-8&apos;, errors = &apos;strict&apos;)
    str(bytes_or_buffer[, encoding[, errors]])
# 解码例子：
    B = b&apos;spam&apos;
    B.decode()                # &apos;spam&apos;
    str(B)                    # &quot;b&apos;spam&apos;&quot;，不带编码的str调用，结果为打印该bytes对象
    str(B, encoding = &apos;ascii&apos;)# &apos;spam&apos;，带编码的str调用，结果为转化该bytes对象
</code></pre><h3 id="bytes对象"><a href="#bytes对象" class="headerlink" title="bytes对象"></a>bytes对象</h3><pre><code>B = b&apos;abc&apos;
B = bytes(&apos;abc&apos;, &apos;ascii&apos;)
B = bytes([97, 98, 99])
B = &apos;abc&apos;.encode()
# bytes对象的方法调用基本和str类型一致 但:B[0]返回的是ASCII码值97, 而不是b&apos;a&apos;
</code></pre><h3 id="文本文件-根据Unicode编码来解释文件内容，要么是平台的默认编码，要么是指定的编码类型"><a href="#文本文件-根据Unicode编码来解释文件内容，要么是平台的默认编码，要么是指定的编码类型" class="headerlink" title="#文本文件: 根据Unicode编码来解释文件内容，要么是平台的默认编码，要么是指定的编码类型"></a>#文本文件: 根据Unicode编码来解释文件内容，要么是平台的默认编码，要么是指定的编码类型</h3><pre><code># 二进制文件：表示字节值的整数的一个序列 open(&apos;bin.txt&apos;, &apos;rb&apos;)
</code></pre><h3 id="Unicode文件"><a href="#Unicode文件" class="headerlink" title="Unicode文件"></a>Unicode文件</h3><pre><code>s = &apos;A\xc4B\xe8C&apos;             # s = &apos;A?BèC&apos;  len(s) = 5
#手动编码
    l = s.encode(&apos;latin-1&apos;)   # l = b&apos;A\xc4B\xe8C&apos;  len(l) = 5
    u = s.encode(&apos;utf-8&apos;)     # u = b&apos;A\xc3\x84B\xc3\xa8C&apos;  len(u) = 7
#文件输出编码
    open(&apos;latindata&apos;, &apos;w&apos;, encoding = &apos;latin-1&apos;).write(s)
    l = open(&apos;latindata&apos;, &apos;rb&apos;).read()                        # l = b&apos;A\xc4B\xe8C&apos;  len(l) = 5
    open(&apos;uft8data&apos;, &apos;w&apos;, encoding = &apos;utf-8&apos;).write(s)
    u = open(&apos;uft8data&apos;, &apos;rb&apos;).read()                         # u = b&apos;A\xc3\x84B\xc3\xa8C&apos;  len(u) = 7
#文件输入编码
    s = open(&apos;latindata&apos;, &apos;r&apos;, encoding = &apos;latin-1&apos;).read()   # s = &apos;A?BèC&apos;  len(s) = 5
    s = open(&apos;latindata&apos;, &apos;rb&apos;).read().decode(&apos;latin-1&apos;)      # s = &apos;A?BèC&apos;  len(s) = 5
    s = open(&apos;utf8data&apos;, &apos;r&apos;, encoding = &apos;utf-8&apos;).read()      # s = &apos;A?BèC&apos;  len(s) = 5
    s = open(&apos;utf8data&apos;, &apos;rb&apos;).read().decode(&apos;utf-8&apos;)         # s = &apos;A?BèC&apos;  len(s) = 5
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python基础&quot;&gt;&lt;a href=&quot;#python基础&quot; class=&quot;headerlink&quot; title=&quot;python基础&quot;&gt;&lt;/a&gt;python基础&lt;/h1&gt;&lt;h2 id=&quot;类型和运算&quot;&gt;&lt;a href=&quot;#类型和运算&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="基础" scheme="https://www.xncoding.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python 文件操作</title>
    <link href="https://www.xncoding.com/2017/10/23/python/python%20%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/python 文件操作.html</id>
    <published>2017-10-23T13:07:53.893Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>基本的模式</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>说明</th>
<th>注意事项</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>只读模式</td>
<td>文件必须存在</td>
</tr>
<tr>
<td>w</td>
<td>只写模式</td>
<td>文件不存在则创建文件，文件存在则清空文件内容</td>
</tr>
<tr>
<td>x</td>
<td>只写模式</td>
<td>文件不可读，文件不存在则创建，存在则报错</td>
</tr>
<tr>
<td>a</td>
<td>追加模式</td>
<td>文件不存在创建文件，文件存在则在文件末尾添加内容</td>
</tr>
</tbody>
</table>
<p>带<code>+</code>的模式</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>r+</td>
<td>读写</td>
</tr>
<tr>
<td>w+</td>
<td>写读</td>
</tr>
<tr>
<td>x+</td>
<td>写读</td>
</tr>
<tr>
<td>a+</td>
<td>写读</td>
</tr>
</tbody>
</table>
<p>带<code>b</code>的模式</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>rb</td>
<td>二进制读模式</td>
</tr>
<tr>
<td>wb</td>
<td>二进制写模式</td>
</tr>
<tr>
<td>xb</td>
<td>二进制只写模式</td>
</tr>
<tr>
<td>ab</td>
<td>二进制追加模式</td>
</tr>
</tbody>
</table>
<p>带<code>+</code>带<code>b</code>的模式</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>rb+</td>
<td>二进制读写模式</td>
</tr>
<tr>
<td>wb+</td>
<td>二进制读写模式</td>
</tr>
<tr>
<td>xb+</td>
<td>二进制只写模式</td>
</tr>
<tr>
<td>ab+</td>
<td>二进制读写模式</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本的模式&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模式&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;注意事项&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;td&gt;只读模式&lt;/td&gt;
&lt;td&gt;文件必须存在&lt;/td&gt;
    
    </summary>
    
    
      <category term="文件" scheme="https://www.xncoding.com/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>image相关</title>
    <link href="https://www.xncoding.com/2017/10/23/python/image%E7%9B%B8%E5%85%B3.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/image相关.html</id>
    <published>2017-10-23T13:07:53.890Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="image相关"><a href="#image相关" class="headerlink" title="image相关"></a>image相关</h1><p><code>sudo apt-get install tesseract-ocr  # 安装语言支持 tesseract-ocr-chi-sim</code></p>
<h2 id="PIL"><a href="#PIL" class="headerlink" title="PIL"></a>PIL</h2><pre><code>from PIL import Image, ImageFilter, ImageDraw, ImageFont, ImageEnhance, ImageFilter
w, h = image.size
box = (p1, p2, p3, p4)
image = image.crop(box)
image.show()
image.thumbnail((size1, size2), Image.ANTIALIAS)#压缩
image.show()
image = image.rotate(jiaodu)
image.show()
image = image.convert(&apos;L&apos;)  #灰度
image.filter(ImageFilter.DETAIL)#过滤
draw = ImageDraw.Draw(image)#写字
draw.text((p1, p2), text)
image.show()
im.resize((128, 128))#resize
im.rotate(45) #45度 顺时针
im.transpose(Image.ROTATE_90)# 旋转90度
image = image.convert(&apos;1&apos;)
image = image.convert(&apos;P&apos;)  # 虚化
image = image.convert(&apos;LA&apos;)#怀旧
def 图片拼接(image1, image2):
    images = (image1, image2)
    w, h = image1.size
    target = Image.new(&apos;RGB&apos;, (w * 2, h))
    left = 0
    right = w
    for image in images:
        temp = image.resize((w, h), Image.ANTIALIAS)
        target.paste(temp, (left, 0, right, h))
        left += w
        right += w
    target.show()
def 图片锐化(image, qiangdu):
    enhancer = ImageEnhance.Sharpness(image)
    enhancer.enhance(qiangdu).show()

def 图片色彩增强(image, qiangdu):
    enhancer = ImageEnhance.Color(image)
    enhancer.enhance(qiangdu).show()

def 图片亮度增强(image, qiangdu):
    enhancer = ImageEnhance.Brightness(image)
    enhancer.enhance(qiangdu).show()

def 图片对比度增强(image, qiangdu):
    enhancer = ImageEnhance.Contrast(image)
    enhancer.enhance(qiangdu).show()

def 图片BlUR(image):
    image = image.filter(ImageFilter.BLUR)
    image.show()

def 图片MinFilter(image):
    image = image.filter(ImageFilter.MinFilter)
    image.show()

def 图片转换黑白线条(image):
    image = image.filter(ImageFilter.CONTOUR)
    image.show()

def 图片EMBOSS(image):
    image = image.filter(ImageFilter.EMBOSS)
    image.show()

def 图片FIND_EDGES(image):
    image = image.filter(ImageFilter.FIND_EDGES)
    image.show()
</code></pre><h2 id="验证码生成"><a href="#验证码生成" class="headerlink" title="验证码生成"></a>验证码生成</h2><pre><code>from captcha.image import ImageCaptcha
number = &apos;0123456789&apos;
alphabet = &apos;abcdefghijklmnopqrstuvwxyz&apos;
char_set = number  # +alphabet+alphabet.upper()
# 生成字符对应的验证码


def gen_captcha_text_and_image():
    image = ImageCaptcha()
    captcha_text = [random.choice(char_set)for i in range(4)]
    captcha_text = &apos;&apos;.join(captcha_text)
    captcha = image.generate(captcha_text)
    captcha_image = Image.open(captcha)
    captcha_image = captcha_image.convert(&apos;L&apos;)
    captcha_image = captcha_image.resize([128, 64])
    captcha_image = np.array(captcha_image)/255.0
    return captcha_text, captcha_image
</code></pre><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><pre><code>from pyocr import pyocr
tools = pyocr.get_available_tools()[:]
tools[0].get_name()
tools[0].image_to_string(im, lang=&apos;eng&apos;)
tools[0].image_to_string(im, lang=&apos;chi_sim&apos;)


import requests
import pytesseract as ocr
from PIL import Image
from io import BytesIO
def retrive_img(url):
    resp = requests.get(url)
    img_fp = BytesIO(resp.content)
    return Image.open(img_fp)
def process_img(img, threshold=140):
    # 灰度转换
    img = img.convert(&apos;L&apos;)
    # 二值化
    pixels = img.load()
    for x in range(img.width):
        for y in range(img.height):
            pixels[x,y] = 255 if pixels[x,y] &gt; threshold else 0
    return img
def recognize(img, lang=&apos;eng&apos;):
    return ocr.image_to_string(img, lang)
if __name__ == &apos;__main__&apos;:
    img = process_img(retrive_img(&apos;http://zfcg.fjqz.gov.cn/ucapqzzfcg/portal/validate/img2.jsp&apos;))
    print(recognize(img))
    img.show()
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;image相关&quot;&gt;&lt;a href=&quot;#image相关&quot; class=&quot;headerlink&quot; title=&quot;image相关&quot;&gt;&lt;/a&gt;image相关&lt;/h1&gt;&lt;p&gt;&lt;code&gt;sudo apt-get install tesseract-ocr  # 安装语言支持
    
    </summary>
    
    
      <category term="验证码,PIL" scheme="https://www.xncoding.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81-PIL/"/>
    
  </entry>
  
  <entry>
    <title>python 各种库和其他</title>
    <link href="https://www.xncoding.com/2017/10/23/python/python%20%E5%90%84%E7%A7%8D%E5%BA%93%E5%92%8C%E5%85%B6%E4%BB%96.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/python 各种库和其他.html</id>
    <published>2017-10-23T13:07:53.887Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-各种库和其他"><a href="#python-各种库和其他" class="headerlink" title="python 各种库和其他"></a>python 各种库和其他</h1><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><pre><code>assert &apos;wor&apos; in demo_str
assert demo_str.startswith(&apos;hello&apos;)
assert hasattr(demo_str, &apos;__sizeof__&apos;)
assert 4 == 4.0
assert 5 &gt; 4
assert re.match(&apos;hello \d+&apos;, &apos;hello 9527&apos;)
assert &apos;x&apos; in json.loads(&apos;{&quot;x&quot;:1, &quot;y&quot;:2}&apos;)
assert True
</code></pre><h2 id="random"><a href="#random" class="headerlink" title="random"></a>random</h2><pre><code>random.sample([&quot;I&quot;, &quot;love&quot;, 3, &quot;python&quot;, 66], 4)
a = [3, 4, 5, 6]
random.shuffle(a)
random.randrange(0, 101, 2)  # 偶数
random.randint(3, 8)
random.uniform(4, 8)
random.random()  # 0-1
random.choice()
</code></pre><h2 id="pypinyin"><a href="#pypinyin" class="headerlink" title="pypinyin"></a>pypinyin</h2><pre><code>import pinyin
pinyin.get(&apos;你 好&apos;)
pinyin.get(&apos;你好&apos;, format=&quot;strip&quot;, delimiter=&quot; &quot;)
pinyin.get(&apos;你好&apos;, format=&quot;numerical&quot;)
pinyin.get_initial(&apos;你好&apos;)

from pypinyin import pinyin, lazy_pinyin
import pypinyin
pinyin(&apos;qianxinan&apos;, style=pypinyin.FIRST_LETTER)
pinyin(&apos;中心&apos;)
[[&apos;zhōng&apos;], [&apos;xīn&apos;]]
pinyin(&apos;中心&apos;, heteronym=True)  # 启用多音字模式
[[&apos;zhōng&apos;, &apos;zhòng&apos;], [&apos;xīn&apos;]]
pinyin(&apos;中心&apos;, style=pypinyin.FIRST_LETTER)  # 设置拼音风格
[[&apos;z&apos;], [&apos;x&apos;]]
pinyin(&apos;中心&apos;, style=pypinyin.TONE2, heteronym=True)
[[&apos;zho1ng&apos;, &apos;zho4ng&apos;], [&apos;xi1n&apos;]]
lazy_pinyin(&apos;中心&apos;)  # 不考虑多音字的情况
[&apos;zhong&apos;, &apos;xin&apos;]
lazy_pinyin(&apos;你好☆☆&apos;, errors=&apos;ignore&apos;)
[&apos;ni&apos;, &apos;hao&apos;]
lazy_pinyin(&apos;你好☆☆&apos;, errors=lambda x: &apos;star&apos;)
[&apos;ni&apos;, &apos;hao&apos;, &apos;star&apos;]
# 自定义
from pypinyin import lazy_pinyin, load_phrases_dict, TONE2
hans = &apos;桔子&apos;
lazy_pinyin(hans, style=TONE2)
load_phrases_dict({&apos;桔子&apos;: [[&apos;jú&apos;], [&apos;zǐ&apos;]]})
lazy_pinyin(hans, style=TONE2)
</code></pre><h2 id="operator"><a href="#operator" class="headerlink" title="operator"></a>operator</h2><pre><code>a + b               add(a, b)
a - b               sub(a, b)
a * b               mul(a, b)
a / b               truediv(a, b)
a // b              floordiv(a, b)

a ** b              pow(a, b)
a % b               mod(a, b)

a @ b               matmul(a, b)
- a                 neg(a)
not a               not_(a)
+ a                 pos(a)

a &amp; b               and_(a, b)
a ^ b               xor(a, b)
~ a                 invert(a)
a | b               or_(a, b)
a is b              is_(a, b)
a is not b          is_not(a, b)
a &lt;&lt; b              lshift(a, b)
a &gt;&gt; b              rshift(a, b)

a &lt; b               lt(a, b)
a &lt;= b              le(a, b)
a == b              eq(a, b)
a != b              ne(a, b)
a &gt;= b              ge(a, b)
a &gt; b               gt(a, b)
</code></pre><h2 id="pdb"><a href="#pdb" class="headerlink" title="pdb"></a>pdb</h2><pre><code>h(elp) 显示命令列表
help command 显示命令的说明文档
c(continue) 回复程序的执行
q(uit) 退出调试器
b(reak) number 在指定行设置断点
s(tep) 单步进入(step into)函数
n(next) 执行当前行(step over)，并进入下一行
u(p) / d(own) 在函数调用栈中向上或向下移动
a(rgs) 显示当前函数的参数
debug statement 在新的调试器中调用语句statement
l(ist) statement 显示当前行，以及当前栈级别上的上下文参考代码
w(here) 打印当前位置的完整栈跟踪
</code></pre><h2 id="ipdb"><a href="#ipdb" class="headerlink" title="ipdb"></a>ipdb</h2><pre><code>-m ipdb
ENTER(重复上次命令)
c(继续)
l(查找当前位于哪里)
s(进入子程序)
r(运行直到子程序结束)
!&lt;python 命令 &gt;
h(帮助)
a(rgs) 打印当前函数的参数
j(ump) 让程序跳转到指定的行数
l(ist) 可以列出当前将要运行的代码块
n(ext) 让程序运行下一行，如果当前语句有一个函数调用，用 n 是不会进入被调用的函数体中的
p(rint) 最有用的命令之一，打印某个变量
q(uit) 退出调试
r(eturn) 继续执行，直到函数体返回
s(tep) 跟 n 相似，但是如果当前有一个函数调用，那么 s 会进入被调用的函数体中
</code></pre><h2 id="模板编写"><a href="#模板编写" class="headerlink" title="模板编写"></a>模板编写</h2><pre><code> ${PROJECT_NAME} - 当前Project名称;

 ${NAME} - 在创建文件的对话框中指定的文件名;

 ${USER} - 当前用户名;

 ${DATE} - 当前系统日期;

 ${TIME} - 当前系统时间;

 ${YEAR} - 年;

 ${MONTH} - 月;

 ${DAY} - 日;

 ${HOUR} - 小时;

 ${MINUTE} - 分钟；

 ${PRODUCT_NAME} - 创建文件的IDE名称;

 ${MONTH_NAME_SHORT} - 英文月份缩写, 如: Jan, Feb, etc;

 ${MONTH_NAME_FULL} - 英文月份全称, 如: January, February, etc；

 # -*- coding: utf-8 -*-
&quot;&quot;&quot;
-------------------------------------------------
   File Name：     ${NAME}
   Description :
   Author :       ${USER}
   date：          ${DATE}
-------------------------------------------------
   Change Activity:
                   ${DATE}:
-------------------------------------------------
&quot;&quot;&quot;
__author__ = &apos;${USER}&apos;
</code></pre><h2 id="python执行命令"><a href="#python执行命令" class="headerlink" title="python执行命令"></a>python执行命令</h2><pre><code>os.system(&quot;命令加参数&quot;)
stream = os.popen(&quot;命令和参数&quot;)
subprocess模块的管道Popen.
subprocess.Popen(&quot;echo Hello World&quot;,shell=True,stdout=PIPE).stdout.read()
os.popen(&quot;echo Hello World&quot;).read()
subprocess.call(&quot;echo Hello World&quot;, shell=True)
subprocess.check_call([&quot;ls&quot;, &quot;-l&quot;])
# shell = True 必须为字符串 shell = False 必须为序列
# check_output 返回命令的执行结果
# check_all 如果结果为0则返回0 如果命令执行出错则抛出异常
# 执行python命令，进入python解释器，stdin标准输入、stdout标准输出、stderr错误输出，universal_newlines=True自动输入换行符
obj = subprocess.Popen([&quot;python&quot;], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
</code></pre><h2 id="csv"><a href="#csv" class="headerlink" title="csv"></a>csv</h2><pre><code>import csv
import datetime

# 数据
data = [
    [1, &quot;a,bc&quot;, 19.353, datetime.datetime(2001, 3, 17)],
    [2, &quot;ei,f&quot;, 13.287, datetime.datetime(2011, 4, 27)],
    [3, &quot;q\&quot;ij&quot;, 15.852, datetime.datetime(2003, 7, 14)],
    [4, &quot;zh&apos;n&quot;, 11.937, datetime.datetime(2012, 1, 9)],
    [5, &quot;i\&apos;op&quot;, 12.057, datetime.datetime(2009, 5, 18)],
]

# 写文件
with open(&quot;test.csv&quot;, &quot;w&quot;) as file:
    writer = csv.writer(file, dialect=&quot;excel&quot;)
    # writer.writerows(data)
    for item in data:
        writer.writerow(item)

# 读文件
with open(&quot;test.csv&quot;, &quot;r&quot;) as file:
    reader = csv.reader(file, dialect=&quot;excel&quot;)
    for item in reader:
        print(item)

# 读文件
with open(&quot;test.csv&quot;, &quot;r&quot;) as file:
    reader = csv.DictReader(file, fieldnames=[&quot;id&quot;, &quot;name&quot;, &quot;float&quot;, &quot;datetime&quot;], dialect=&quot;excel&quot;)
    data = [item for item in reader]
    print(data)

# 写文件
with open(&quot;test.csv&quot;, &quot;w&quot;) as file:
    writer = csv.DictWriter(file, fieldnames=[&quot;id&quot;, &quot;name&quot;, &quot;float&quot;, &quot;datetime&quot;], dialect=&quot;excel&quot;)
    writer.writeheader()
    for item in data:
        writer.writerow(item)
</code></pre><h2 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h2><pre><code>import itertools
for i in itertools.count(10,2):                 #开始，步数
    print(i)
    if i&gt;100:
        break
for i,j in enumerate(itertools.cycle(&apos;Abc&apos;)):
    print(j)
    if i&gt;16:
        break
for item in itertools.repeat(&apos;hi&apos;,5):
    print(item)

num=itertools.chain([3,4],(5,6),{3,4},[3,[5,9]])#可迭代连接
list(itertools.compress(&apos;abcdef&apos;,[0,1,0,0,0,0]))# b
from itertools import dropwhile
list(dropwhile(lambda x:x&lt;5,[2,3,4,5,7,2,3]))   #返回 不满足的至最后
from itertools import takewhile
list(takewhile(lambda x:x&lt;5,[2,3,4,5,7,2,3]))   #返回 0:满足
from itertools import filterfalse
list(filterfalse(lambda x:x&lt;5,[2,3,4,5,7,2,3])) # 返回不满足的

from itertools import groupby
for i,j in groupby(&apos;abdcdfffggeehhhaa&apos;):
    print(i,&apos;:&apos;,list(j))
data=[&apos;a&apos;,&apos;bb&apos;,&apos;ccc&apos;,&apos;dd&apos;,&apos;ee&apos;,&apos;f&apos;]
for i,j in groupby(data,len):
    print(i,&apos;:&apos;,list(j))

from itertools import zip_longest
for i in zip_longest(&apos;abcd&apos;,&apos;xy&apos;,fillvalue=&apos;--&apos;):
    print(i)

for item in itertools.product(&apos;abcd&apos;,&apos;xy&apos;):
    print(item)
list(itertools.product(&apos;xy&apos;,&apos;12&apos;,&apos;ab&apos;))

from itertools import permutations
list(&apos;&apos;.join(i)for i in permutations(&apos;abcd&apos;,4))
</code></pre><h2 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h2><h3 id="nametuple"><a href="#nametuple" class="headerlink" title="nametuple"></a>nametuple</h3><pre><code>from collections import namedtuple

websites = [
    (&apos;Sohu&apos;, &apos;http://www.google.com/&apos;, u&apos;张朝阳&apos;),
    (&apos;Sina&apos;, &apos;http://www.sina.com.cn/&apos;, u&apos;王志东&apos;),
    (&apos;163&apos;, &apos;http://www.163.com/&apos;, u&apos;丁磊&apos;)
]

Website = namedtuple(&apos;Website&apos;, [&apos;name&apos;, &apos;url&apos;, &apos;founder&apos;])
for website in websites:
    website = Website._make(website)
    print (website)
</code></pre><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><pre><code>from collections import deque
q = deque([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;])
appendleft()和popleft()
</code></pre><h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><pre><code>from collections import defaultdict
colours = (
    (&apos;Yasoob&apos;, &apos;Yellow&apos;),
    (&apos;Ali&apos;, &apos;Blue&apos;),
    (&apos;Arham&apos;, &apos;Green&apos;),
    (&apos;Ali&apos;, &apos;Black&apos;),
    (&apos;Yasoob&apos;, &apos;Red&apos;),
    (&apos;Ahmed&apos;, &apos;Silver&apos;),
)
favourite_colours = defaultdict(list)
for name, colour in colours:
    favourite_colours[name].append(colour)

print(favourite_colours)

tree = lambda: defaultdict(tree)
some_dict = tree()
some_dict[&apos;colours&apos;][&apos;favourite&apos;] = &quot;yellow&quot;
import json
print(json.dumps(some_dict))
print(json.dumps(favourite_colours))
</code></pre><h3 id="OrderedDict"><a href="#OrderedDict" class="headerlink" title="OrderedDict"></a>OrderedDict</h3><pre><code>from collections import OrderedDict
colours = OrderedDict([(&quot;Red&quot;, 198), (&quot;Green&quot;, 170), (&quot;Blue&quot;, 160)])
for key, value in colours.items():
    print(key, value)
</code></pre><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><pre><code>from collections import Counter
colours = (
    (&apos;Yasoob&apos;, &apos;Yellow&apos;),
    (&apos;Ali&apos;, &apos;Blue&apos;),
    (&apos;Arham&apos;, &apos;Green&apos;),
    (&apos;Ali&apos;, &apos;Black&apos;),
    (&apos;Yasoob&apos;, &apos;Red&apos;),
    (&apos;Ahmed&apos;, &apos;Silver&apos;),
)
favs = Counter(name for name, colour in colours)
print(favs)

with open(&apos;filename&apos;, &apos;rb&apos;) as f:
    line_count = Counter(f)
print(line_count)

word_counts = Counter()
with open(&apos;&apos;) as f:
    for line in f:
        word_counts.update(line.strip().split(&apos;:&apos;))

for key, val in (word_counts.most_common(3)):
    print(key, &apos;:&apos;, val)
</code></pre><h2 id="pyinstaller-转exe"><a href="#pyinstaller-转exe" class="headerlink" title="pyinstaller 转exe"></a>pyinstaller 转exe</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install pyinstaller</div><div class="line">pyinstaller yourprogram.py</div></pre></td></tr></table></figure>
<h2 id="heapq-最大3个-最小3个"><a href="#heapq-最大3个-最小3个" class="headerlink" title="heapq 最大3个 最小3个"></a>heapq 最大3个 最小3个</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">portfolio = [</div><div class="line">    &#123;&apos;name&apos;: &apos;IBM&apos;, &apos;shares&apos;: 100, &apos;price&apos;: 91.1&#125;,</div><div class="line">    &#123;&apos;name&apos;: &apos;AAPL&apos;, &apos;shares&apos;: 50, &apos;price&apos;: 543.22&#125;,</div><div class="line">    &#123;&apos;name&apos;: &apos;FB&apos;, &apos;shares&apos;: 200, &apos;price&apos;: 21.09&#125;,</div><div class="line">    &#123;&apos;name&apos;: &apos;HPQ&apos;, &apos;shares&apos;: 35, &apos;price&apos;: 31.75&#125;,</div><div class="line">    &#123;&apos;name&apos;: &apos;YHOO&apos;, &apos;shares&apos;: 45, &apos;price&apos;: 16.35&#125;,</div><div class="line">    &#123;&apos;name&apos;: &apos;ACME&apos;, &apos;shares&apos;: 75, &apos;price&apos;: 115.65&#125;</div><div class="line">]</div><div class="line">cheap = heapq.nsmallest(3, portfolio, key=lambda s: s[&apos;price&apos;])</div><div class="line">expensive = heapq.nlargest(3, portfolio, key=lambda s: s[&apos;price&apos;])</div></pre></td></tr></table></figure>
<h2 id="url操作-furl"><a href="#url操作-furl" class="headerlink" title="url操作 furl"></a>url操作 furl</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">from furl import furl</div><div class="line">f = furl(&apos;http://www.google.com/?one=1&amp;two=2&apos;)</div><div class="line">f.args[&apos;three&apos;] = &apos;3&apos;</div><div class="line">del f.args[&apos;one&apos;]</div><div class="line">f.url</div><div class="line">&apos;http://www.google.com/?two=2&amp;three=3&apos;</div><div class="line"></div><div class="line">f = furl(&apos;http://www.google.com/&apos;)</div><div class="line">f.fragment.path.segments = [&apos;two&apos;, &apos;directories&apos;]</div><div class="line">f.fragment.args = &#123;&apos;one&apos;:&apos;argument&apos;&#125;</div><div class="line">f.url</div><div class="line">&apos;http://www.google.com/#two/directories?one=argument&apos;</div><div class="line"></div><div class="line">f = furl(&apos;http://www.google.com/&apos;)</div><div class="line">f.path = &apos;some encoding here&apos;</div><div class="line">f.args[&apos;and some encoding&apos;] = &apos;here, too&apos;</div><div class="line">f.url</div><div class="line">&apos;http://www.google.com/some%20encoding%20here?and+some+encoding=here,+too&apos;</div><div class="line">f.set(host=u&apos;ドメイン.テスト&apos;, path=u&apos;джк&apos;, query=u&apos;☃=☺&apos;)</div><div class="line">f.url</div><div class="line">&apos;http://xn--eckwd4c7c.xn--zckzah/%D0%B4%D0%B6%D0%BA?%E2%98%83=%E2%98%BA&apos;</div></pre></td></tr></table></figure>
<h2 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import bleach</div><div class="line">bleach.clean(&apos;an &lt;script&gt;evil()&lt;/script&gt; example&apos;)</div><div class="line">bleach.linkify(&apos;an http://example.com url&apos;)</div></pre></td></tr></table></figure>
<h2 id="时间解析"><a href="#时间解析" class="headerlink" title="时间解析"></a>时间解析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from dateparser import parse</div><div class="line">parse(&apos;2016-4&apos;)</div></pre></td></tr></table></figure>
<h2 id="字符相似"><a href="#字符相似" class="headerlink" title="字符相似"></a>字符相似</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">from fuzzywuzzy import fuzz</div><div class="line">from fuzzywuzzy import process</div><div class="line">fuzz.ratio(&quot;this is a test&quot;, &quot;this is a test!&quot;)</div><div class="line">fuzz.partial_ratio(&quot;this is a test&quot;, &quot;this is a test!&quot;)</div><div class="line">fuzz.ratio(&quot;fuzzy wuzzy was a bear&quot;, &quot;wuzzy fuzzy was a bear&quot;)</div><div class="line">fuzz.token_sort_ratio(&quot;fuzzy wuzzy was a bear&quot;, &quot;wuzzy fuzzy was a bear&quot;)</div><div class="line">fuzz.token_sort_ratio(&quot;fuzzy was a bear&quot;, &quot;fuzzy fuzzy was a bear&quot;)</div><div class="line">fuzz.token_set_ratio(&quot;fuzzy was a bear&quot;, &quot;fuzzy fuzzy was a bear&quot;)</div><div class="line">choices = [&quot;Atlanta Falcons&quot;, &quot;New York Jets&quot;, &quot;New York Giants&quot;, &quot;Dallas Cowboys&quot;]</div><div class="line">process.extract(&quot;new york jets&quot;, choices, limit=2)</div><div class="line">    [(&apos;New York Jets&apos;, 100), (&apos;New York Giants&apos;, 78)]</div><div class="line">process.extractOne(&quot;cowboys&quot;, choices)</div><div class="line">    (&quot;Dallas Cowboys&quot;, 90)</div></pre></td></tr></table></figure>
<h2 id="名字"><a href="#名字" class="headerlink" title="名字"></a>名字</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">from nameparser import HumanName</div><div class="line">name = HumanName(&quot;Dr. Juan Q. Xavier de la Vega III (Doc Vega)&quot;)</div><div class="line">name.last</div><div class="line">name.as_dict()</div><div class="line">str(name)</div><div class="line">name.string_format = &quot;&#123;first&#125; &#123;last&#125;&quot;</div><div class="line">str(name)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-各种库和其他&quot;&gt;&lt;a href=&quot;#python-各种库和其他&quot; class=&quot;headerlink&quot; title=&quot;python 各种库和其他&quot;&gt;&lt;/a&gt;python 各种库和其他&lt;/h1&gt;&lt;h2 id=&quot;断言&quot;&gt;&lt;a href=&quot;#断言&quot; cla
    
    </summary>
    
    
      <category term="库" scheme="https://www.xncoding.com/tags/%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>requests</title>
    <link href="https://www.xncoding.com/2017/10/23/python/requests.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/requests.html</id>
    <published>2017-10-23T13:07:53.884Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><pre><code>import requests.adapters
# 不同方式获取网页内容, 返回一个Response对象, 请求的参数可以为url或Request对象
r0 = requests.get(&quot;https://github.com/timeline.json&quot;)
r1 = requests.post(&quot;http://httpbin.org/post&quot;)
r2 = requests.put(&quot;http://httpbin.org/put&quot;)
r3 = requests.delete(&quot;http://httpbin.org/delete&quot;)
r4 = requests.head(&quot;http://httpbin.org/get&quot;)
r5 = requests.options(&quot;http://httpbin.org/get&quot;)
r6 = requests.patch(&quot;http://httpbin.org/get&quot;)

# Request对象:
# class requests.Request(method=None, url=None, headers=None, files=None, data=None, params=None, auth=None, cookies=None, hooks=None, json=None)

# 上边所有的获取方式都调用底层的request方法, 所以request方法有的参数, 上边几个函数都应该有:
# requests.request(method, url, **kwargs)
# kwargs包括: params / data / json / headers / cookies / files / auth / timeout / allow_redirects(bool) / proxies / verify(bool) / stream / cert

# Response对象: class requests.Response
# 包含的主要属性: content / cookies / encoding / headers / history / is_permanent_redirect / is_redirect / reason / status_code / text / url 等
# 包含的主要方法: iter_content(chunk_size=1, decode_unicode=False) / iter_lines(chunk_size=512, decode_unicode=None, delimiter=None)
# 包含的主要方法: close() / json(**kwargs) / raise_for_status() 等

# 以字典的形式传递URL参数, 也可以直接以?xx=xx&amp;xx=xx的形式将其放在url后
params = {&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;}
r = requests.get(&quot;http://httpbin.org/get&quot;, params=params)
print(r.url)                # http://httpbin.org/get?key2=value2&amp;key1=value1

# 以字典的形式传递URL参数: 字典里带有列表
params = {&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: [&quot;value2&quot;, &quot;value3&quot;]}
r = requests.get(&quot;http://httpbin.org/get&quot;, params=params)
print(r.url)                # http://httpbin.org/get?key1=value1&amp;key2=value2&amp;key2=value3

# 获取网页内容
r = requests.get(&quot;https://github.com/timeline.json&quot;)
print(r.text)               # 返回正常的网页内容, 即解压解码之后的内容
print(r.content)            # 返回byte类型的网页内容, 即值解压, 没有解码
print(r.json())             # 如果网页内容为json, 直接返回一个json对象
print(r.encoding)           # 返回网页的编码: &quot;utf-8&quot;

# Requests会自动解码来自服务器的内容, 也可以自己更改
r.encoding = &quot;ISO-8859-1&quot;
print(r.text)               # 此时使用新的r.encoding解码后的新值

# 编码的其他操作
# requests.utils.get_encodings_from_content(content): Returns encodings from given content string.
# requests.utils.get_encoding_from_headers(headers): Returns encodings from given HTTP Header Dict.
# requests.utils.get_unicode_from_response(r): Returns the requested content back in unicode.

# 原始响应内容: 获取来自服务器的原始套接字响应
r = requests.get(&quot;https://github.com/timeline.json&quot;, stream=True)
print(r.raw)                # &lt;requests.packages.urllib3.response.HTTPResponse object at 0x101194810&gt;
print(r.raw.read(10))       # &quot;\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03&quot;

# 一般情况下, 应该以下面的模式将文本流保存到文件
with open(&quot;test&quot;, &quot;wb&quot;) as fd:
    for chunk in r.iter_content(chunk_size=256):
        fd.write(chunk)
# 注意: 设置的timeout对connect和read起作用. 但一旦和服务器建立连接, r.content或r.iter_content就处于一个read的状态, 不受timeout影响

# 定制请求头: 一个字典
headers = {&quot;user-agent&quot;: &quot;my-app/0.0.1&quot;}
r = requests.get(&quot;https://api.github.com/some/endpoint&quot;, headers=headers)
print(r.request.headers)    # 获取request的头部
print(r.headers)            # 获取response的头部
# {
#     &quot;content-encoding&quot;: &quot;gzip&quot;,
#     &quot;transfer-encoding&quot;: &quot;chunked&quot;,
#     &quot;connection&quot;: &quot;close&quot;,
#     &quot;server&quot;: &quot;nginx/1.0.4&quot;,
#     &quot;x-runtime&quot;: &quot;148ms&quot;,
#     &quot;etag&quot;: &quot;e1ca502697e5c9317743dc078f67693f&quot;,
#     &quot;content-type&quot;: &quot;application/json&quot;
# }
print(r.headers[&quot;Content-Type&quot;])        # &quot;application/json&quot;
print(r.headers.get(&quot;content-type&quot;))    # &quot;application/json&quot;

# 更加复杂的POST请求: 表单
post_dict = {&quot;key1&quot;: &quot;value1&quot;, &quot;key2&quot;: &quot;value2&quot;}
r = requests.post(&quot;http://httpbin.org/post&quot;, data=post_dict)
print(r.text)

# POST一个多部分编码(Multipart-Encoded)的文件
files = {&quot;file&quot;: open(&quot;report.xls&quot;, &quot;rb&quot;)}
r = requests.post(&quot;http://httpbin.org/post&quot;, files=files)
print(r.text)

# 你可以显式地设置文件名, 文件类型和请求头
files = {&quot;file&quot;: (&quot;report.xls&quot;, open(&quot;report.xls&quot;, &quot;rb&quot;), &quot;application/vnd.ms-excel&quot;, {&quot;Expires&quot;: &quot;0&quot;})}
r = requests.post(&quot;http://httpbin.org/post&quot;, files=files)
print(r.text)

# 你也可以发送文本字符串
files = {&quot;file&quot;: (&quot;report.csv&quot;, &quot;some,data,to,send\nanother,row,to,send\n&quot;)}
r = requests.post(&quot;http://httpbin.org/post&quot;, files=files)
print(r.text)

# 响应状态码
r = requests.get(&quot;http://httpbin.org/get&quot;)
print(r.status_code)                            # 200
print(r.status_code == requests.codes.ok)       # True 响应状态码查询

# 如果发送了一个错误请求(4XX客户端错误, 或5XX服务器错误响应), 可以通过 Response.raise_for_status() 来抛出异常:
bad_r = requests.get(&quot;http://httpbin.org/status/404&quot;)
print(bad_r.status_code)                        # 404
bad_r.raise_for_status()                        # 引发异常

# Cookie: 如果某个响应中包含一些cookie, 则会被放到response.cookies(CookieJar类型)中
r = requests.get(&quot;http://example.com/some/cookie/setting/url&quot;)
print(r.cookies[&quot;example_cookie_name&quot;])         # &quot;example_cookie_value&quot;

# 要想发送你的cookies到服务器, 可以使用cookies参数(一个字典)
cookies = dict(cookies_are=&quot;working&quot;)
r = requests.get(&quot;http://httpbin.org/cookies&quot;, cookies=cookies)
print(r.text)

# cookie的其他操作
# requests.utils.dict_from_cookiejar(cj): Returns a key/value dictionary from a CookieJar.
# requests.utils.cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True): Returns a CookieJar from a key/value dictionary.
# requests.utils.add_dict_to_cookiejar(cj, cookie_dict): Returns a CookieJar from a key/value dictionary.

# 通用CookieJar类, 一个cookielib.CookieJar, 但是提供一个dict接口
# class requests.cookies.RequestsCookieJar(policy=None): Compatibility class; is a cookielib.CookieJar, but exposes a dict interface.

# 会话对象: 会话对象让你能够跨请求保持某些参数, 它也会在同一个Session实例发出的所有请求之间保持cookie
s = requests.Session()
s.get(&quot;http://httpbin.org/cookies/set/sessioncookie/123456789&quot;)
s.get(&quot;http://httpbin.org/cookies&quot;)
for cookie in s.cookies:
    print(cookie)

# 如果你要手动为会话添加cookie, 就是用Cookie utility函数来操纵Session.cookies
requests.utils.add_dict_to_cookiejar(s.cookies, {&quot;cookie_key&quot;: &quot;cookie_value&quot;})

# 会话也可用来为请求方法提供缺省数据, 这是通过为会话对象的属性提供数据来实现的
s.auth = (&quot;user&quot;, &quot;pass&quot;)
s.headers.update({&quot;x-test&quot;: &quot;true&quot;})
s.get(&quot;http://httpbin.org/headers&quot;, headers={&quot;x-test2&quot;: &quot;true&quot;})        # both &quot;x-test&quot; and &quot;x-test2&quot; are sent

# 不过需要注意, 就算使用了会话, 方法级别的参数也不会被跨请求保持, 下面的例子只会给第一个请求发送cookie
s.get(&quot;http://httpbin.org/cookies&quot;, cookies={&quot;from-my&quot;: &quot;browser&quot;})     # 带有cookie
s.get(&quot;http://httpbin.org/cookies&quot;)                                     # 不带cookie

# 会话还可以用作前后文管理器
with requests.Session() as s:
    s.get(&quot;http://httpbin.org/cookies/set/sessioncookie/123456789&quot;)
# class requests.Session类, 和requests外层有的函数/属性基本一致, 只不过是封装了一层跨域请求的功能

# 重定向与请求历史, 默认情况下, 除了HEAD, Requests会自动处理所有重定向, 可以通过allow_redirects参数禁用重定向处理
# 可以使用响应对象的history方法来追踪重定向, Response.history 是一个Response对象的列表, 按照从最老到最近的请求进行排序
r = requests.get(&quot;http://github.com&quot;, allow_redirects=True)
print(r.status_code)        # 200
print(r.history)            # [&lt;Response [301]&gt;]
r = requests.get(&quot;http://github.com&quot;, allow_redirects=False)
print(r.status_code)        # 301
print(r.history)            # []

# 超时, 设置timeout参数
requests.get(&quot;http://github.com&quot;, timeout=0.001)
# Traceback (most recent call last):
#   File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
# requests.exceptions.Timeout: HTTPConnectionPool(host=&quot;github.com&quot;, port=80): Request timed out. (timeout=0.001)

# 注意: timeout仅对连接过程有效, 与响应体的下载无关
# timeout并不是整个下载响应的时间限制, 而是如果服务器在timeout秒内没有应答, 将会引发一个异常
# 更精确地说, 是在timeout秒内没有从基础套接字上接收到任何字节的数据时
requests.get(&quot;https://github.com&quot;, timeout=5)

# 上边的timeout值将会用作 connect 和 read 二者的timeout, 如果要分别制定, 就传入一个元组
requests.get(&quot;https://github.com&quot;, timeout=(3.05, 27))

# 错误与异常: 遇到网络问题(如: DNS 查询失败、拒绝连接等)时, Requests 会抛出一个 ConnectionError 异常
# 如果 HTTP 请求返回了不成功的状态码, Response.raise_for_status() 会抛出一个 HTTPError 异常
# 若请求超时, 则抛出一个 Timeout 异常
# 若请求超过了设定的最大重定向次数, 则会抛出一个 TooManyRedirects 异常
# 所有Requests显式抛出的异常都继承自 requests.exceptions.RequestException

# 所有异常:
# exception requests.RequestException(*args, **kwargs): There was an ambiguous exception that occurred while handling your request.
# exception requests.ConnectionError(*args, **kwargs): A Connection error occurred.
# exception requests.HTTPError(*args, **kwargs): An HTTP error occurred.
# exception requests.URLRequired(*args, **kwargs): A valid URL is required to make a request.
# exception requests.TooManyRedirects(*args, **kwargs): Too many redirects.
# exception requests.ConnectTimeout(*args, **kwargs): The request timed out while trying to connect to the remote server.
# exception requests.ReadTimeout(*args, **kwargs): The server did not send any data in the allotted amount of time.
# exception requests.Timeout(*args, **kwargs): The request timed out.

# SSL证书验证, verify设置为True表示检查证书, 设置为False表示忽略证书
requests.get(&quot;https://kennethreitz.com&quot;, verify=True)       # 未设置SSL证书, 抛出异常
# requests.exceptions.SSLError: hostname &quot;kennethreitz.com&quot; doesn&quot;t match either of &quot;*.herokuapp.com&quot;, &quot;herokuapp.com&quot;
requests.get(&quot;https://github.com&quot;, verify=True)             # &lt;Response [200]&gt;, 已设置SSL证书
# 对于私有证书，你也可以传递一个 CA_BUNDLE 文件的路径给 verify

# 你也可以指定一个本地证书用作客户端证书, 可以是单个文件（包含密钥和证书）或一个包含两个文件路径的元组:
requests.get(&quot;https://kennethreitz.com&quot;, cert=(&quot;/path/server.crt&quot;, &quot;/path/key&quot;))
requests.get(&quot;https://kennethreitz.com&quot;, cert=&quot;/wrong_path/server.pem&quot;)
# SSLError: [Errno 336265225] _ssl.c:347: error:140B0009:SSL routines:SSL_CTX_use_PrivateKey_file:PEM lib
# 警告: 本地证书的私有 key 必须是解密状态. 目前Requests不支持使用加密的 key

# 流式上传, 允许你发送大的数据流或文件而无需先把它们读入内存
with open(&quot;massive-body&quot;) as f:
    requests.post(&quot;http://some.url/streamed&quot;, data=f)


# 事件挂钩, 可用的钩子: response(从一个请求产生的响应)
# 你可以通过传递一个 {hook_name: callback_function} 字典给 hooks 请求参数为每个请求分配一个钩子函数
def print_url(resp):
    print(resp.url)
    return
requests.get(&quot;http://httpbin.org&quot;, hooks=dict(response=print_url))

# 代理
proxies = {
    &quot;http&quot;: &quot;http://10.10.1.10:3128&quot;,
    &quot;https&quot;: &quot;http://10.10.1.10:1080&quot;,
}
requests.get(&quot;http://example.org&quot;, proxies=proxies)
# 若代理需要使用HTTP Basic Auth, 可以使用http://user:password@host:port/, 比如&quot;http&quot;: &quot;http://user:pass@10.10.1.10:3128/&quot;

# 除了基本的 HTTP 代理, Request 还支持 SOCKS 协议的代理, 此时需要单独安装:
# $ pip install requests[socks]
proxies = {
    &quot;http&quot;: &quot;socks5://user:pass@host:port&quot;,
    &quot;https&quot;: &quot;socks5://user:pass@host:port&quot;
}
requests.get(&quot;http://example.org&quot;, proxies=proxies)

# Requests 传输适配器
# 从 v1.0.0 以后，Requests 的内部采用了模块化设计。部分原因是为了实现传输适配器（Transport Adapter）。
# 传输适配器提供了一个机制，让你可以为 HTTP 服务定义交互方法。尤其是它允许你应用服务前的配置。
# Requests 自带了一个传输适配器，也就是 HTTPAdapter。 这个适配器使用了强大的 urllib3，为 Requests 提供了默认的 HTTP 和 HTTPS 交互。
# 每当 Session 被初始化，就会有适配器附着在 Session 上，其中一个供 HTTP 使用，另一个供 HTTPS 使用。
# Request 允许用户创建和使用他们自己的传输适配器，实现他们需要的特殊功能。创建好以后，传输适配器可以被加载到一个会话对象上，附带着一个说明，告诉会话适配器应该应用在哪个 web 服务上。
s = requests.Session()
s.mount(&quot;http://baidu.com&quot;, requests.adapters.HTTPAdapter())

# 出现错误: Connection pool is full, discarding connection: xxxx.com
s.mount(&apos;https://&apos;, requests.adapters.HTTPAdapter(pool_connections=100, pool_maxsize=100))

# 关闭InsecurePlatformWarning
# requests.packages.urllib3.disable_warnings()
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;requests&quot;&gt;&lt;a href=&quot;#requests&quot; class=&quot;headerlink&quot; title=&quot;requests&quot;&gt;&lt;/a&gt;requests&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;import requests.adapters
# 不同方式获取网页内容,
    
    </summary>
    
    
      <category term="requests,爬虫" scheme="https://www.xncoding.com/tags/requests-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.xncoding.com/2017/10/23/python/Python%20%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3%20-%20python%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%20-%20CSDN%E5%8D%9A%E5%AE%A2.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/Python 魔法方法详解 - python的学习之路 - CSDN博客.html</id>
    <published>2017-10-23T13:07:53.880Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-魔法方法详解"><a href="#Python-魔法方法详解" class="headerlink" title="Python 魔法方法详解"></a><a href="http://blog.csdn.net/koko66/article/details/42709279" target="_blank" rel="external">Python 魔法方法详解</a></h1><p>标签： <a href="http://www.csdn.net/tag/%e9%ad%94%e6%b3%95%e6%96%b9%e6%b3%95" target="_blank" rel="external">魔法方法</a> 2015-01-14 14:17 5500人阅读 <a href="http://blog.csdn.net/koko66/article/details/42709279#comments" target="_blank" rel="external">评论</a>(0) <a href="#" title="收藏">收藏</a> <a href="http://blog.csdn.net/koko66/article/details/42709279#report" title="举报" target="_blank" rel="external">举报</a> . <img src="./category_icon.jpg" alt="" title="category_icon.jpg"> 分类： python知识点和实例<em>（16）</em> <img src="./arrow_triangle _down.jpg" alt="" title="arrow_triangle _down.jpg"> . 据说，Python 的对象天生拥有一些神奇的方法，它们总被双下划线所包围，他们是面向对象的 Python 的一切。</p>
<p>他们是可以给你的类增加魔力的特殊方法，如果你的对象实现（重载）了这些方法中的某一个，那么这个方法就会在特殊的情况下被 Python 所调用，你可以定义自己想要的行为，而这一切都是自动发生的。</p>
<p>Python 的魔术方法非常强大，然而随之而来的则是责任。了解正确的方法去使用非常重要！</p>
<p>| 魔法方法 | 含义 |
| 
 | 基本的魔法方法 |
| <strong>new</strong>(cls[, …]) | 1. <strong>new</strong> 是在一个对象实例化的时候所调用的第一个方法
2. 它的第一个参数是这个类，其他的参数是用来直接传递给 <strong>init</strong> 方法
3. <strong>new</strong> 决定是否要使用该 <strong>init</strong> 方法，因为 <strong>new</strong> 可以调用其他类的构造方法或者直接返回别的实例对象来作为本类的实例，如果 <strong>new</strong> 没有返回实例对象，则 <strong>init</strong> 不会被调用
4. <strong>new</strong> 主要是用于继承一个不可变的类型比如一个 tuple 或者 string |
| <strong>init</strong>(self[, …]) | 构造器，当一个实例被创建的时候调用的初始化方法 |
| <strong>del</strong>(self) | 析构器，当一个实例被销毁的时候调用的方法 |
| <strong>call</strong>(self[, args…]) | 允许一个类的实例像函数一样被调用：x(a, b) 调用 x.<strong>call</strong>(a, b) |
| <strong>len</strong>(self) | 定义当被 len() 调用时的行为 |
| <strong>repr</strong>(self) | 定义当被 repr() 调用时的行为 |
| <strong>str</strong>(self) | 定义当被 str() 调用时的行为 |
| <strong>bytes</strong>(self) | 定义当被 bytes() 调用时的行为 |
| <strong>hash</strong>(self) | 定义当被 hash() 调用时的行为 |
| <strong>bool</strong>(self) | 定义当被 bool() 调用时的行为，应该返回 True 或 False |
| <strong>format</strong>(self, format_spec) | 定义当被 format() 调用时的行为 |
|   | 有关属性 |
| <strong>getattr</strong>(self, name) | 定义当用户试图获取一个不存在的属性时的行为 |
| <strong>getattribute</strong>(self, name) | 定义当该类的属性被访问时的行为 |
| <strong>setattr</strong>(self, name, value) | 定义当一个属性被设置时的行为 |
| <strong>delattr</strong>(self, name) | 定义当一个属性被删除时的行为 |
| <strong>dir</strong>(self) | 定义当 dir() 被调用时的行为 |
| <strong>get</strong>(self, instance, owner) | 定义当描述符的值被取得时的行为 |
| <strong>set</strong>(self, instance, value) | 定义当描述符的值被改变时的行为 |
| <strong>delete</strong>(self, instance) | 定义当描述符的值被删除时的行为 |
|   | 比较操作符 |
| <strong>lt</strong>(self, other) | 定义小于号的行为：x &lt; y 调用 x.<strong>lt</strong>(y) |
| <strong>le</strong>(self, other) | 定义小于等于号的行为：x &lt;= y 调用 x.<strong>le</strong>(y) |
| <strong>eq</strong>(self, other) | 定义等于号的行为：x == y 调用 x.<strong>eq</strong>(y) |
| <strong>ne</strong>(self, other) | 定义不等号的行为：x != y 调用 x.<strong>ne</strong>(y) |
| <strong>gt</strong>(self, other) | 定义大于号的行为：x &gt; y 调用 x.<strong>gt</strong>(y) |
| <strong>ge</strong>(self, other) | 定义大于等于号的行为：x &gt;= y 调用 x.<strong>ge</strong>(y) |
|   | 算数运算符 |
| <strong>add</strong>(self, other) | 定义加法的行为：+ |
| <strong>sub</strong>(self, other) | 定义减法的行为：- |
| <strong>mul</strong>(self, other) | 定义乘法的行为：<em> |
| <strong>truediv</strong>(self, other) | 定义真除法的行为：/ |
| <strong>floordiv</strong>(self, other) | 定义整数除法的行为：// |
| <strong>mod</strong>(self, other) | 定义取模算法的行为：% |
| <strong>divmod</strong>(self, other) | 定义当被 divmod() 调用时的行为 |
| <strong>pow</strong>(self, other[, modulo]) | 定义当被 power() 调用或 ** 运算时的行为 |
| <strong>lshift</strong>(self, other) | 定义按位左移位的行为：&lt;&lt; |
| <strong>rshift</strong>(self, other) | 定义按位右移位的行为：&gt;&gt; |
| <strong>and</strong>(self, other) | 定义按位与操作的行为：&amp; |
| <strong>xor</strong>(self, other) | 定义按位异或操作的行为：^ |
| <strong>or</strong>(self, other) | 定义按位或操作的行为：| |
|   | 反运算 |
| <strong>radd</strong>(self, other) | （与上方相同，当左操作数不支持相应的操作时被调用） |
| <strong>rsub</strong>(self, other) | （与上方相同，当左操作数不支持相应的操作时被调用） |
| <strong>rmul</strong>(self, other) | （与上方相同，当左操作数不支持相应的操作时被调用） |
| <strong>rtruediv</strong>(self, other) | （与上方相同，当左操作数不支持相应的操作时被调用） |
| <strong>rfloordiv</strong>(self, other) | （与上方相同，当左操作数不支持相应的操作时被调用） |
| <strong>rmod</strong>(self, other) | （与上方相同，当左操作数不支持相应的操作时被调用） |
| <strong>rdivmod</strong>(self, other) | （与上方相同，当左操作数不支持相应的操作时被调用） |
| <strong>rpow</strong>(self, other) | （与上方相同，当左操作数不支持相应的操作时被调用） |
| <strong>rlshift</strong>(self, other) | （与上方相同，当左操作数不支持相应的操作时被调用） |
| <strong>rrshift</strong>(self, other) | （与上方相同，当左操作数不支持相应的操作时被调用） |
| <strong>rxor</strong>(self, other) | （与上方相同，当左操作数不支持相应的操作时被调用） |
| <strong>ror</strong>(self, other) | （与上方相同，当左操作数不支持相应的操作时被调用） |
|   | 增量赋值运算 |
| <strong>iadd</strong>(self, other) | 定义赋值加法的行为：+= |
| <strong>isub</strong>(self, other) | 定义赋值减法的行为：-= |
| <strong>imul</strong>(self, other) | 定义赋值乘法的行为：</em>= |
| <strong>itruediv</strong>(self, other) | 定义赋值真除法的行为：/= |
| <strong>ifloordiv</strong>(self, other) | 定义赋值整数除法的行为：//= |
| <strong>imod</strong>(self, other) | 定义赋值取模算法的行为：%= |
| <strong>ipow</strong>(self, other[, modulo]) | 定义赋值幂运算的行为：**= |
| <strong>ilshift</strong>(self, other) | 定义赋值按位左移位的行为：&lt;&lt;= |
| <strong>irshift</strong>(self, other) | 定义赋值按位右移位的行为：&gt;&gt;= |
| <strong>iand</strong>(self, other) | 定义赋值按位与操作的行为：&amp;= |
| <strong>ixor</strong>(self, other) | 定义赋值按位异或操作的行为：^= |
| <strong>ior</strong>(self, other) | 定义赋值按位或操作的行为：|= |
|   | 一元操作符 |
| <strong>neg</strong>(self) | 定义正号的行为：+x |
| <strong>pos</strong>(self) | 定义负号的行为：-x |
| <strong>abs</strong>(self) | 定义当被 abs() 调用时的行为 |
| <strong>invert</strong>(self) | 定义按位求反的行为：~x |
|   | 类型转换 |
| <strong>complex</strong>(self) | 定义当被 complex() 调用时的行为（需要返回恰当的值） |
| <strong>int</strong>(self) | 定义当被 int() 调用时的行为（需要返回恰当的值） |
| <strong>float</strong>(self) | 定义当被 float() 调用时的行为（需要返回恰当的值） |
| <strong>round</strong>(self[, n]) | 定义当被 round() 调用时的行为（需要返回恰当的值） |
| <strong>index</strong>(self) | 1. 当对象是被应用在切片表达式中时，实现整形强制转换
2. 如果你定义了一个可能在切片时用到的定制的数值型,你应该定义 <strong>index</strong>
3. 如果 <strong>index</strong> 被定义，则 <strong>int</strong> 也需要被定义，且返回相同的值 |
|   | 上下文管理（with 语句） |
| <strong>enter</strong>(self) | 1. 定义当使用 with 语句时的初始化行为
2. <strong>enter</strong> 的返回值被 with 语句的目标或者 as 后的名字绑定 |
| <strong>exit</strong>(self, exc_type, exc_value, traceback) | 1. 定义当一个代码块被执行或者终止后上下文管理器应该做什么
2. 一般被用来处理异常，清除工作或者做一些代码块执行完毕之后的日常工作 |
|   | 容器类型 |
| <strong>len</strong>(self) | 定义当被 len() 调用时的行为（返回容器中元素的个数） |
| <strong>getitem</strong>(self, key) | 定义获取容器中指定元素的行为，相当于 self[key] |
| <strong>setitem</strong>(self, key, value) | 定义设置容器中指定元素的行为，相当于 self[key] = value |
| <strong>delitem</strong>(self, key) | 定义删除容器中指定元素的行为，相当于 del self[key] |
| <strong>iter</strong>(self) | 定义当迭代容器中的元素的行为 |
| <strong>reversed</strong>(self) | 定义当被 reversed() 调用时的行为 |
| <strong>contains</strong>(self, item) | 定义当使用成员测试运算符（in 或 not in）时的行为
 |</p>
<p><a href="http://blog.csdn.net/koko66/article/details/42709279#" target="_blank" rel="external"></a><a href="http://blog.csdn.net/koko66/article/details/42709279#" title="分享到QQ空间" target="_blank" rel="external"></a><a href="http://blog.csdn.net/koko66/article/details/42709279#" title="分享到新浪微博" target="_blank" rel="external"></a><a href="http://blog.csdn.net/koko66/article/details/42709279#" title="分享到腾讯微博" target="_blank" rel="external"></a><a href="http://blog.csdn.net/koko66/article/details/42709279#" title="分享到人人网" target="_blank" rel="external"></a><a href="http://blog.csdn.net/koko66/article/details/42709279#" title="分享到微信" target="_blank" rel="external"></a>.</p>
<p>顶
: 2</p>
<p>踩
: 1<a href="#"> </a> <a href="#"> </a></p>
<ul>
<li>上一篇<a href="http://blog.csdn.net/koko66/article/details/42024007" target="_blank" rel="external">集合类型内建方法总结</a></li>
<li><p>下一篇<a href="http://blog.csdn.net/koko66/article/details/42709313" target="_blank" rel="external">os、os.path 模块中关于文件、目录常用的函数使用方法</a></p>
<p>相关文章推荐</p>
</li>
<li><p><em>•</em> <a href="http://blog.csdn.net/koko66/article/details/42001625" title="Python正则表达式" target="_blank" rel="external">Python正则表达式</a></p>
</li>
<li><em>•</em> <a href="http://edu.csdn.net/huiyiCourse/series_detail/61?utm_soruce=blog7" title="30天系统掌握机器学习--唐宇迪" target="_blank" rel="external">30天系统掌握机器学习–唐宇迪</a></li>
<li><em>•</em> <a href="http://blog.csdn.net/BeMoreQuiet/article/details/54572887" title="Python零基础入门之十五类中的魔法方法" target="_blank" rel="external">Python零基础入门之十五类中的魔法方法</a></li>
<li><em>•</em> <a href="http://edu.csdn.net/huiyiCourse/detail/564?utm_source=blog7" title="【免费】XGBoost模型原理及其在各大竞赛中的优异表现" target="_blank" rel="external">【免费】XGBoost模型原理及其在各大竞赛中的优异表现</a></li>
<li><em>•</em> <a href="http://blog.csdn.net/cmd_cong/article/details/53769586" title="Python魔法方法--基本的魔法方法" target="_blank" rel="external">Python魔法方法–基本的魔法方法</a></li>
<li><em>•</em> <a href="http://edu.csdn.net/course/detail/357?utm_source=blog7" title="全能项目经理训练视频" target="_blank" rel="external">全能项目经理训练视频</a></li>
<li><em>•</em> <a href="http://blog.csdn.net/wangjianno2/article/details/49050107" title="Python魔法方法指南" target="_blank" rel="external">Python魔法方法指南</a></li>
<li><p><em>•</em> <a href="http://edu.csdn.net/course/detail/3049?utm_source=blog7" title="Python网络爬虫快速入门指导" target="_blank" rel="external">Python网络爬虫快速入门指导</a></p>
</li>
<li><p><em>•</em> <a href="http://blog.csdn.net/wangjianno2/article/details/49050041" title="python中魔法属性和魔法方法" target="_blank" rel="external">python中魔法属性和魔法方法</a></p>
</li>
<li><em>•</em> <a href="http://edu.csdn.net/combo/detail/192?utm_source=blog7" title="Android实战基础知识" target="_blank" rel="external">Android实战基础知识</a></li>
<li><em>•</em> <a href="http://blog.csdn.net/pipisorry/article/details/50708812" title="python类：magic魔术方法" target="_blank" rel="external">python类：magic魔术方法</a></li>
<li><em>•</em> <a href="http://edu.csdn.net/combo/detail/532?utm_source=blog7" title="机器学习需要的掌握的数学知识汇总" target="_blank" rel="external">机器学习需要的掌握的数学知识汇总</a></li>
<li><em>•</em> <a href="http://blog.csdn.net/mmc2015/article/details/71250090" title="tensorflow自定义网络层、激活函数（self-defined layer）" target="_blank" rel="external">tensorflow自定义网络层、激活函数（self-defined layer）</a></li>
<li><em>•</em> <a href="http://blog.csdn.net/mmc2015/article/details/47685031" title="去哪网实习总结：怎样配置数据库连接（JavaWeb）" target="_blank" rel="external">去哪网实习总结：怎样配置数据库连接（JavaWeb）</a></li>
<li><em>•</em> <a href="http://blog.csdn.net/mmc2015/article/details/47971253" title="去哪网实习总结：windows下配置JavaWeb环境、开发helloworld、发布系统（附截图，绝对详细）（JavaWeb）" target="_blank" rel="external">去哪网实习总结：windows下配置JavaWeb环境、开发helloworld、发布系统（附截图，绝对详细）（JavaWeb）</a></li>
<li><em>•</em> <a href="http://blog.csdn.net/wangbowj123/article/details/76910743" title="Python的魔法方法" target="_blank" rel="external">Python的魔法方法</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-魔法方法详解&quot;&gt;&lt;a href=&quot;#Python-魔法方法详解&quot; class=&quot;headerlink&quot; title=&quot;Python 魔法方法详解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.csdn.net/koko66/article/de
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.xncoding.com/2017/10/23/python/adb.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/adb.html</id>
    <published>2017-10-23T13:07:53.874Z</published>
    <updated>2017-10-23T05:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h1><p>adb<a name="adb_1"></a><a name="adb"></a></p>
<h1 id="adb-1"><a href="#adb-1" class="headerlink" title="adb"></a>adb</h1><ul>
<li><a href="#">基本用法</a><ul>
<li><a href="#">命令语法</a></li>
<li><a href="#">为命令指定目标设备</a></li>
<li><a href="#">启动/停止</a></li>
<li><a href="#">查看 adb 版本</a></li>
<li><a href="#">以 root 权限运行 adbd</a></li>
<li><a href="#">指定 adb server 的网络端口</a></li>
</ul>
</li>
<li><a href="#">设备连接管理</a><ul>
<li><a href="#">查询已连接设备/模拟器</a></li>
<li><a href="#">USB 连接</a></li>
<li><a href="#">无线连接（需要借助 USB 线）</a></li>
<li><a href="#">无线连接（无需借助 USB 线）</a></li>
</ul>
</li>
<li><a href="#">应用管理</a><ul>
<li><a href="#">查看应用列表</a><ul>
<li><a href="#">所有应用</a></li>
<li><a href="#">系统应用</a></li>
<li><a href="#">第三方应用</a></li>
<li><a href="#">包名包含某字符串的应用</a></li>
</ul>
</li>
<li><a href="#">安装 APK</a></li>
<li><a href="#">卸载应用</a></li>
<li><a href="#">清除应用数据与缓存</a></li>
<li><a href="#">查看前台 Activity</a></li>
<li><a href="#">查看正在运行的 Services</a></li>
</ul>
</li>
<li><a href="#">与应用交互</a><ul>
<li><a href="#">调起 Activity</a></li>
<li><a href="#">调起 Service</a></li>
<li><a href="#">发送广播</a></li>
<li><a href="#">强制停止应用</a></li>
</ul>
</li>
<li><a href="#">文件管理</a><ul>
<li><a href="#">复制设备里的文件到电脑</a></li>
<li><a href="#">复制电脑里的文件到设备</a></li>
</ul>
</li>
<li><a href="#">模拟按键/输入</a><ul>
<li><a href="#">电源键</a></li>
<li><a href="#">菜单键</a></li>
<li><a href="#">HOME 键</a></li>
<li><a href="#">返回键</a></li>
<li><a href="#">音量控制</a></li>
<li><a href="#">媒体控制</a></li>
<li><a href="#">点亮/熄灭屏幕</a></li>
<li><a href="#">滑动解锁</a></li>
<li><a href="#">输入文本</a></li>
</ul>
</li>
<li><a href="#">查看日志</a><ul>
<li><a href="#">Android 日志</a><ul>
<li><a href="#">按级别过滤日志</a></li>
<li><a href="#">按 tag 和级别过滤日志</a></li>
<li><a href="#">日志格式</a></li>
<li><a href="#">清空日志</a></li>
</ul>
</li>
<li><a href="#">内核日志</a></li>
</ul>
</li>
<li><a href="#">查看设备信息</a><ul>
<li><a href="#">型号</a></li>
<li><a href="#">电池状况</a></li>
<li><a href="#">屏幕分辨率</a></li>
<li><a href="#">屏幕密度</a></li>
<li><a href="#">显示屏参数</a></li>
<li><a href="#">android_id</a></li>
<li><a href="#">IMEI</a></li>
<li><a href="#">Android 系统版本</a></li>
<li><a href="#">IP 地址</a></li>
<li><a href="#">Mac 地址</a></li>
<li><a href="#">CPU 信息</a></li>
<li><a href="#">内存信息</a></li>
<li><a href="#">更多硬件与系统属性</a></li>
</ul>
</li>
<li><a href="#">修改设置</a><ul>
<li><a href="#">分辨率</a></li>
<li><a href="#">屏幕密度</a></li>
<li><a href="#">显示区域</a></li>
<li><a href="#">关闭 USB 调试模式</a></li>
<li><a href="#">状态栏和导航栏的显示隐藏</a></li>
</ul>
</li>
<li><a href="#">实用功能</a><ul>
<li><a href="#">屏幕截图</a></li>
<li><a href="#">录制屏幕</a></li>
<li><a href="#">重新挂载 system 分区为可写</a></li>
<li><a href="#">查看连接过的 WiFi 密码</a></li>
<li><a href="#">设置系统日期和时间</a></li>
<li><a href="#">重启手机</a></li>
<li><a href="#">检测设备是否已 root</a></li>
<li><a href="#">使用 Monkey 进行压力测试</a></li>
<li><a href="#">开启/关闭 WiFi</a></li>
</ul>
</li>
<li><a href="#">刷机相关命令</a><ul>
<li><a href="#">重启到 Recovery 模式</a></li>
<li><a href="#">从 Recovery 重启到 Android</a></li>
<li><a href="#">重启到 Fastboot 模式</a></li>
<li><a href="#">通过 sideload 更新系统</a></li>
</ul>
</li>
<li><a href="#">更多 adb shell 命令</a><ul>
<li><a href="#">查看进程</a></li>
<li><a href="#">查看实时资源占用情况</a></li>
<li><a href="#">其它</a></li>
</ul>
</li>
<li><a href="#">常见问题</a><ul>
<li><a href="#">启动 adb server 失败</a></li>
</ul>
</li>
<li><a href="#">adb 的非官方实现</a></li>
<li><a href="#">致谢</a></li>
<li><a href="#">参考链接</a></li>
</ul>
<p><a name="e59fbae69cace794a8e6b395_2"></a><a name="基本用法"></a></p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p><a name="e591bde4bba4e8afade6b395_3"></a><a name="命令语法"></a></p>
<h3 id="命令语法"><a href="#命令语法" class="headerlink" title="命令语法"></a>命令语法</h3><p>adb 命令的基本语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb [-d|-e|-s &lt;serialNumber&gt;] &lt;command&gt;</div></pre></td></tr></table></figure>
<p>如果只有一个设备/模拟器连接时，可以省略掉 <code>[-d|-e|-s &lt;serialNumber&gt;]</code> 这一部分，直接使用 <code>adb &lt;command&gt;</code>。</p>
<p><a name="e4b8bae591bde4bba4e68c87e5ae9ae79baee6a087e8aebee5a487_4"></a><a name="为命令指定目标设备"></a></p>
<h3 id="为命令指定目标设备"><a href="#为命令指定目标设备" class="headerlink" title="为命令指定目标设备"></a>为命令指定目标设备</h3><p>如果有多个设备/模拟器连接，则需要为命令指定目标设备。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>指定当前唯一通过 USB 连接的 Android 设备为命令目标</td>
</tr>
<tr>
<td>-e</td>
<td>指定当前唯一运行的模拟器为命令目标</td>
</tr>
<tr>
<td><code>-s &lt;serialNumber&gt;</code></td>
<td>指定相应 serialNumber 号的设备/模拟器为命令目标</td>
</tr>
</tbody>
</table>
<p>在多个设备/模拟器连接的情况下较常用的是 <code>-s &lt;serialNumber&gt;</code> 参数，serialNumber 可以通过 <code>adb devices</code> 命令获取。如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ adb devices</div><div class="line"></div><div class="line">List of devices attached</div><div class="line">cf264b8f	device</div><div class="line">emulator-5554	device</div><div class="line">10.129.164.6:5555	device</div></pre></td></tr></table></figure>
<p>输出里的 <code>cf264b8f</code>、<code>emulator-5554</code> 和 <code>10.129.164.6:5555</code> 即为 serialNumber。</p>
<p>比如这时想指定 <code>cf264b8f</code> 这个设备来运行 adb 命令获取屏幕分辨率：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb -s cf264b8f shell wm size</div></pre></td></tr></table></figure>
<p>又如想给 <code>10.129.164.6:5555</code> 这个设备安装应用（<em>这种形式的 serialNumber 格式为 <code>&lt;IP&gt;:&lt;Port&gt;</code>，一般为无线连接的设备或 Genymotion 等第三方 Android 模拟器</em>）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb -s 10.129.164.6:5555 install test.apk</div></pre></td></tr></table></figure>
<p><strong>遇到多设备/模拟器的情况均使用这几个参数为命令指定目标设备，下文中为简化描述，不再重复。</strong></p>
<p><a name="e590afe58aa8e5819ce6ada2_5"></a><a name="启动停止"></a></p>
<h3 id="启动-停止"><a href="#启动-停止" class="headerlink" title="启动/停止"></a>启动/停止</h3><p>启动 adb server 命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb start-server</div></pre></td></tr></table></figure>
<p>（一般无需手动执行此命令，在运行 adb 命令时若发现 adb server 没有启动会自动调起。）</p>
<p>停止 adb server 命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb kill-server</div></pre></td></tr></table></figure>
<p><a name="e69fa5e79c8b20adb20e78988e69cac_6"></a><a name="查看-adb-版本"></a></p>
<h3 id="查看-adb-版本"><a href="#查看-adb-版本" class="headerlink" title="查看 adb 版本"></a>查看 adb 版本</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb version</div></pre></td></tr></table></figure>
<p>示例输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Android Debug Bridge version 1.0.36</div><div class="line">Revision 8f855a3d9b35-android</div></pre></td></tr></table></figure>
<p><a name="e4bba520root20e69d83e99990e8bf90e8a18c20adbd_7"></a><a name="以-root-权限运行-adbd"></a></p>
<h3 id="以-root-权限运行-adbd"><a href="#以-root-权限运行-adbd" class="headerlink" title="以 root 权限运行 adbd"></a>以 root 权限运行 adbd</h3><p>adb 的运行原理是 PC 端的 adb server 与手机端的守护进程 adbd 建立连接，然后 PC 端的 adb client 通过 adb server 转发命令，adbd 接收命令后解析运行。</p>
<p>所以如果 adbd 以普通权限执行，有些需要 root 权限才能执行的命令无法直接用 <code>adb xxx</code> 执行。这时可以 <code>adb shell</code> 然后 <code>su</code> 后执行命令，也可以让 adbd 以 root 权限执行，这个就能随意执行高权限命令了。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb root</div></pre></td></tr></table></figure>
<p>正常输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">restarting adbd as root</div></pre></td></tr></table></figure>
<p>现在再运行 <code>adb shell</code>，看看命令行提示符是不是变成 <code>#</code> 了？</p>
<p>有些手机 root 后也无法通过 <code>adb root</code> 命令让 adbd 以 root 权限执行，比如三星的部分机型，会提示 <code>adbd cannot run as root in production builds</code>，此时可以先安装 adbd Insecure，然后 <code>adb root</code> 试试。</p>
<p>相应地，如果要恢复 adbd 为非 root 权限的话，可以使用 <code>adb unroot</code> 命令。</p>
<p><a name="e68c87e5ae9a20adb20server20e79a84e7bd91e7bb9ce7abafe58fa3_8"></a><a name="指定-adb-server-的网络端口"></a></p>
<h3 id="指定-adb-server-的网络端口"><a href="#指定-adb-server-的网络端口" class="headerlink" title="指定 adb server 的网络端口"></a>指定 adb server 的网络端口</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb -P &lt;port&gt; start-server</div></pre></td></tr></table></figure>
<p>默认端口为 5037。</p>
<p><a name="e8aebee5a487e8bf9ee68ea5e7aea1e79086_9"></a><a name="设备连接管理"></a></p>
<h2 id="设备连接管理"><a href="#设备连接管理" class="headerlink" title="设备连接管理"></a>设备连接管理</h2><p><a name="e69fa5e8afa2e5b7b2e8bf9ee68ea5e8aebee5a487e6a8a1e68b9fe599a8_10"></a><a name="查询已连接设备模拟器"></a></p>
<h3 id="查询已连接设备-模拟器"><a href="#查询已连接设备-模拟器" class="headerlink" title="查询已连接设备/模拟器"></a>查询已连接设备/模拟器</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb devices</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List of devices attached</div><div class="line">cf264b8f	device</div><div class="line">emulator-5554	device</div><div class="line">10.129.164.6:5555	device</div></pre></td></tr></table></figure>
<p>输出格式为 <code>[serialNumber] [state]</code>，serialNumber 即我们常说的 SN，state 有如下几种：</p>
<ul>
<li><p><code>offline</code> —— 表示设备未连接成功或无响应。</p>
</li>
<li><p><code>device</code> —— 设备已连接。注意这个状态并不能标识 Android 系统已经完全启动和可操作，在设备启动过程中设备实例就可连接到 adb，但启动完毕后系统才处于可操作状态。</p>
</li>
<li><p><code>no device</code> —— 没有设备/模拟器连接。</p>
</li>
</ul>
<p>以上输出显示当前已经连接了三台设备/模拟器，<code>cf264b8f</code>、<code>emulator-5554</code> 和 <code>10.129.164.6:5555</code> 分别是它们的 SN。从 <code>emulator-5554</code> 这个名字可以看出它是一个 Android 模拟器，而 <code>10.129.164.6:5555</code> 这种形为 <code>&lt;IP&gt;:&lt;Port&gt;</code> 的 serialNumber 一般是无线连接的设备或 Genymotion 等第三方 Android 模拟器。</p>
<p>常见异常输出：</p>
<ol>
<li><p>没有设备/模拟器连接成功。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List of devices attached</div></pre></td></tr></table></figure>
</li>
<li><p>设备/模拟器未连接到 adb 或无响应。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List of devices attached</div><div class="line">cf264b8f	offline</div></pre></td></tr></table></figure>
</li>
</ol>
<p><a name="usb20e8bf9ee68ea5_11"></a><a name="usb-连接"></a></p>
<h3 id="USB-连接"><a href="#USB-连接" class="headerlink" title="USB 连接"></a>USB 连接</h3><p>通过 USB 连接来正常使用 adb 需要保证几点：</p>
<ol>
<li><p>硬件状态正常。</p>
<p>包括 Android 设备处于正常开机状态，USB 连接线和各种接口完好。</p>
</li>
<li><p>Android 设备的开发者选项和 USB 调试模式已开启。</p>
<p>可以到「设置」-「开发者选项」-「Android 调试」查看。</p>
<p>如果在设置里找不到开发者选项，那需要通过一个彩蛋来让它显示出来：在「设置」-「关于手机」连续点击「版本号」7 次。</p>
</li>
<li><p>设备驱动状态正常。</p>
<p>这一点貌似在 Linux 和 Mac OS X 下不用操心，在 Windows 下有可能遇到需要安装驱动的情况，确认这一点可以右键「计算机」-「属性」，到「设备管理器」里查看相关设备上是否有黄色感叹号或问号，如果没有就说明驱动状态已经好了。否则可以下载一个手机助手类程序来安装驱动先。</p>
</li>
<li><p>通过 USB 线连接好电脑和设备后确认状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb devices</div></pre></td></tr></table></figure>
<p>如果能看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxxxxx device</div></pre></td></tr></table></figure>
<p>说明连接成功。</p>
</li>
</ol>
<p><a name="e697a0e7babfe8bf9ee68ea5efbc88e99c80e8a681e5809fe58aa920usb20e7babfefbc89_12"></a><a name="无线连接需要借助-usb-线"></a></p>
<h3 id="无线连接（需要借助-USB-线）"><a href="#无线连接（需要借助-USB-线）" class="headerlink" title="无线连接（需要借助 USB 线）"></a>无线连接（需要借助 USB 线）</h3><p>除了可以通过 USB 连接设备与电脑来使用 adb，也可以通过无线连接——虽然连接过程中也有需要使用 USB 的步骤，但是连接成功之后你的设备就可以在一定范围内摆脱 USB 连接线的限制啦！</p>
<p>操作步骤：</p>
<ol>
<li><p>将 Android 设备与要运行 adb 的电脑连接到同一个局域网，比如连到同一个 WiFi。</p>
</li>
<li><p>将设备与电脑通过 USB 线连接。</p>
<p>应确保连接成功（可运行 <code>adb devices</code> 看是否能列出该设备）。</p>
</li>
<li><p>让设备在 5555 端口监听 TCP/IP 连接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb tcpip 5555</div></pre></td></tr></table></figure>
</li>
<li><p>断开 USB 连接。</p>
</li>
<li><p>找到设备的 IP 地址。</p>
<p>一般能在「设置」-「关于手机」-「状态信息」-「IP地址」找到，也可以使用下文里 <a href="#">查看设备信息 - IP 地址</a> 一节里的方法用 adb 命令来查看。</p>
</li>
<li><p>通过 IP 地址连接设备。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb connect &lt;device-ip-address&gt;</div></pre></td></tr></table></figure>
<p>这里的 <code>&lt;device-ip-address&gt;</code> 就是上一步中找到的设备 IP 地址。</p>
</li>
<li><p>确认连接状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb devices</div></pre></td></tr></table></figure>
<p>如果能看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;device-ip-address&gt;:5555 device</div></pre></td></tr></table></figure>
<p>说明连接成功。</p>
</li>
</ol>
<p>如果连接不了，请确认 Android 设备与电脑是连接到了同一个 WiFi，然后再次执行 <code>adb connect &lt;device-ip-address&gt;</code> 那一步；</p>
<p>如果还是不行的话，通过 <code>adb kill-server</code> 重新启动 adb 然后从头再来一次试试。</p>
<p><strong>断开无线连接</strong></p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb disconnect &lt;device-ip-address&gt;</div></pre></td></tr></table></figure>
<p><a name="e697a0e7babfe8bf9ee68ea5efbc88e697a0e99c80e5809fe58aa920usb20e7babfefbc89_13"></a><a name="无线连接无需借助-usb-线"></a></p>
<h3 id="无线连接（无需借助-USB-线）"><a href="#无线连接（无需借助-USB-线）" class="headerlink" title="无线连接（无需借助 USB 线）"></a>无线连接（无需借助 USB 线）</h3><p><strong>注：需要 root 权限。</strong></p>
<p>上一节「无线连接（需要借助 USB 线）」是官方文档里介绍的方法，需要借助于 USB 数据线来实现无线连接。</p>
<p>既然我们想要实现无线连接，那能不能所有步骤下来都是无线的呢？答案是能的。</p>
<ol>
<li><p>在 Android 设备上安装一个终端模拟器。</p>
<p>已经安装过的设备可以跳过此步。我使用的终端模拟器下载地址是：<a href="https://jackpal.github.io/Android-Terminal-Emulator/" target="_blank" rel="external">Terminal Emulator for Android Downloads</a></p>
</li>
<li><p>将 Android 设备与要运行 adb 的电脑连接到同一个局域网，比如连到同一个 WiFi。</p>
</li>
<li><p>打开 Android 设备上的终端模拟器，在里面依次运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">su</div><div class="line">setprop service.adb.tcp.port 5555</div></pre></td></tr></table></figure>
</li>
<li><p>找到 Android 设备的 IP 地址。</p>
<p>一般能在「设置」-「关于手机」-「状态信息」-「IP地址」找到，也可以使用下文里 <a href="#">查看设备信息 - IP 地址</a> 一节里的方法用 adb 命令来查看。</p>
</li>
<li><p>在电脑上通过 adb 和 IP 地址连接 Android 设备。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb connect &lt;device-ip-address&gt;</div></pre></td></tr></table></figure>
<p>这里的 <code>&lt;device-ip-address&gt;</code> 就是上一步中找到的设备 IP 地址。</p>
<p>如果能看到 <code>connected to &lt;device-ip-address&gt;:5555</code> 这样的输出则表示连接成功。</p>
</li>
</ol>
<p><em>节注一：</em></p>
<p>有的设备，比如小米 5S + MIUI 8.0 + Android 6.0.1 MXB48T，可能在第 5 步之前需要重启 adbd 服务，在设备的终端模拟器上运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">restart adbd</div></pre></td></tr></table></figure>
<p>如果 restart 无效，尝试以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">stop adbd</div><div class="line">start adbd</div></pre></td></tr></table></figure>
<p><a name="e5ba94e794a8e7aea1e79086_14"></a><a name="应用管理"></a></p>
<h2 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h2><p><a name="e69fa5e79c8be5ba94e794a8e58897e8a1a8_15"></a><a name="查看应用列表"></a></p>
<h3 id="查看应用列表"><a href="#查看应用列表" class="headerlink" title="查看应用列表"></a>查看应用列表</h3><p>查看应用列表的基本命令格式是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm list packages [-f] [-d] [-e] [-s] [-3] [-i] [-u] [--user USER_ID] [FILTER]</div></pre></td></tr></table></figure>
<p>即在 <code>adb shell pm list packages</code> 的基础上可以加一些参数进行过滤查看不同的列表，支持的过滤参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>显示列表</th>
</tr>
</thead>
<tbody>
<tr>
<td>无</td>
<td>所有应用</td>
</tr>
<tr>
<td>-f</td>
<td>显示应用关联的 apk 文件</td>
</tr>
<tr>
<td>-d</td>
<td>只显示 disabled 的应用</td>
</tr>
<tr>
<td>-e</td>
<td>只显示 enabled 的应用</td>
</tr>
<tr>
<td>-s</td>
<td>只显示系统应用</td>
</tr>
<tr>
<td>-3</td>
<td>只显示第三方应用</td>
</tr>
<tr>
<td>-i</td>
<td>显示应用的 installer</td>
</tr>
<tr>
<td>-u</td>
<td>包含已卸载应用</td>
</tr>
<tr>
<td><code>&lt;FILTER&gt;</code></td>
<td>包名包含 <code>&lt;FILTER&gt;</code> 字符串</td>
</tr>
</tbody>
</table>
<p><a name="e68980e69c89e5ba94e794a8_16"></a><a name="所有应用"></a></p>
<h4 id="所有应用"><a href="#所有应用" class="headerlink" title="所有应用"></a>所有应用</h4><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm list packages</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package:com.android.smoketest</div><div class="line">package:com.example.android.livecubes</div><div class="line">package:com.android.providers.telephony</div><div class="line">package:com.google.android.googlequicksearchbox</div><div class="line">package:com.android.providers.calendar</div><div class="line">package:com.android.providers.media</div><div class="line">package:com.android.protips</div><div class="line">package:com.android.documentsui</div><div class="line">package:com.android.gallery</div><div class="line">package:com.android.externalstorage</div><div class="line">...</div><div class="line">// other packages here</div><div class="line">...</div></pre></td></tr></table></figure>
<p><a name="e7b3bbe7bb9fe5ba94e794a8_17"></a><a name="系统应用"></a></p>
<h4 id="系统应用"><a href="#系统应用" class="headerlink" title="系统应用"></a>系统应用</h4><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm list packages -s</div></pre></td></tr></table></figure>
<p><a name="e7acace4b889e696b9e5ba94e794a8_18"></a><a name="第三方应用"></a></p>
<h4 id="第三方应用"><a href="#第三方应用" class="headerlink" title="第三方应用"></a>第三方应用</h4><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm list packages -3</div></pre></td></tr></table></figure>
<p><a name="e58c85e5908de58c85e590abe69f90e5ad97e7aca6e4b8b2e79a84e5ba94e794a8_19"></a><a name="包名包含某字符串的应用"></a></p>
<h4 id="包名包含某字符串的应用"><a href="#包名包含某字符串的应用" class="headerlink" title="包名包含某字符串的应用"></a>包名包含某字符串的应用</h4><p>比如要查看包名包含字符串 <code>mazhuang</code> 的应用列表，命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm list packages mazhuang</div></pre></td></tr></table></figure>
<p>当然也可以使用 grep 来过滤：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm list packages | grep mazhuang</div></pre></td></tr></table></figure>
<p><a name="e5ae89e8a38520apk_20"></a><a name="安装-apk"></a></p>
<h3 id="安装-APK"><a href="#安装-APK" class="headerlink" title="安装 APK"></a>安装 APK</h3><p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb install [-lrtsdg] &lt;path_to_apk&gt;</div></pre></td></tr></table></figure>
<p>参数：</p>
<p><code>adb install</code> 后面可以跟一些可选参数来控制安装 APK 的行为，可用参数及含义如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-l</td>
<td>将应用安装到保护目录 /mnt/asec</td>
</tr>
<tr>
<td>-r</td>
<td>允许覆盖安装</td>
</tr>
<tr>
<td>-t</td>
<td>允许安装 AndroidManifest.xml 里 application 指定 <code>android:testOnly=&quot;true&quot;</code> 的应用</td>
</tr>
<tr>
<td>-s</td>
<td>将应用安装到 sdcard</td>
</tr>
<tr>
<td>-d</td>
<td>允许降级覆盖安装</td>
</tr>
<tr>
<td>-g</td>
<td>授予所有运行时权限</td>
</tr>
</tbody>
</table>
<p>运行命令后如果见到类似如下输出（状态为 <code>Success</code>）代表安装成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[100%] /data/local/tmp/1.apk</div><div class="line">	pkg: /data/local/tmp/1.apk</div><div class="line">Success</div></pre></td></tr></table></figure>
<p>上面是当前最新版 v1.0.36 的 adb 的输出，会显示 push apk 文件到手机的进度百分比。</p>
<p>使用旧版本 adb 的输出则是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">12040 KB/s (22205609 bytes in 1.801s)</div><div class="line">        pkg: /data/local/tmp/SogouInput_android_v8.3_sweb.apk</div><div class="line">Success</div></pre></td></tr></table></figure>
<p>而如果状态为 <code>Failure</code> 则表示安装失败，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[100%] /data/local/tmp/map-20160831.apk</div><div class="line">        pkg: /data/local/tmp/map-20160831.apk</div><div class="line">Failure [INSTALL_FAILED_ALREADY_EXISTS]</div></pre></td></tr></table></figure>
<p>常见安装失败输出代码、含义及可能的解决办法如下：</p>
<table>
<thead>
<tr>
<th>输出</th>
<th>含义</th>
<th>解决办法</th>
</tr>
</thead>
<tbody>
<tr>
<td>INSTALL_FAILED_ALREADY_EXISTS</td>
<td>应用已经存在，或卸载了但没卸载干净</td>
<td><code>adb install</code> 时使用 <code>-r</code> 参数，或者先 <code>adb uninstall &lt;packagename&gt;</code> 再安装</td>
</tr>
<tr>
<td>INSTALL_FAILED_INVALID_APK</td>
<td>无效的 APK 文件</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_INVALID_URI</td>
<td>无效的 APK 文件名</td>
<td>确保 APK 文件名里无中文</td>
</tr>
<tr>
<td>INSTALL_FAILED_INSUFFICIENT_STORAGE</td>
<td>空间不足</td>
<td>清理空间</td>
</tr>
<tr>
<td>INSTALL_FAILED_DUPLICATE_PACKAGE</td>
<td>已经存在同名程序</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_NO_SHARED_USER</td>
<td>请求的共享用户不存在</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_UPDATE_INCOMPATIBLE</td>
<td>以前安装过同名应用，但卸载时数据没有移除；或者已安装该应用，但签名不一致</td>
<td>先 <code>adb uninstall &lt;packagename&gt;</code> 再安装</td>
</tr>
<tr>
<td>INSTALL_FAILED_SHARED_USER_INCOMPATIBLE</td>
<td>请求的共享用户存在但签名不一致</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_MISSING_SHARED_LIBRARY</td>
<td>安装包使用了设备上不可用的共享库</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_REPLACE_COULDNT_DELETE</td>
<td>替换时无法删除</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_DEXOPT</td>
<td>dex 优化验证失败或空间不足</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_OLDER_SDK</td>
<td>设备系统版本低于应用要求</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_CONFLICTING_PROVIDER</td>
<td>设备里已经存在与应用里同名的 content provider</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_NEWER_SDK</td>
<td>设备系统版本高于应用要求</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_TEST_ONLY</td>
<td>应用是 test-only 的，但安装时没有指定 <code>-t</code> 参数</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_CPU_ABI_INCOMPATIBLE</td>
<td>包含不兼容设备 CPU 应用程序二进制接口的 native code</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_MISSING_FEATURE</td>
<td>应用使用了设备不可用的功能</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_CONTAINER_ERROR</td>
<td>1. sdcard 访问失败;</td>
</tr>
</tbody>
</table>
<p>2. 应用签名与 ROM 签名一致，被当作内置应用。 | 1. 确认 sdcard 可用，或者安装到内置存储;
2. 打包时不与 ROM 使用相同签名。 |
| INSTALL_FAILED_INVALID_INSTALL_LOCATION | 1. 不能安装到指定位置;
2. 应用签名与 ROM 签名一致，被当作内置应用。 | 1. 切换安装位置，添加或删除 <code>-s</code> 参数;
2. 打包时不与 ROM 使用相同签名。 |
| INSTALL_FAILED_MEDIA_UNAVAILABLE | 安装位置不可用 | 一般为 sdcard，确认 sdcard 可用或安装到内置存储 |
| INSTALL_FAILED_VERIFICATION_TIMEOUT | 验证安装包超时 |  |
| INSTALL_FAILED_VERIFICATION_FAILURE | 验证安装包失败 |  |
| INSTALL_FAILED_PACKAGE_CHANGED | 应用与调用程序期望的不一致 |  |
| INSTALL_FAILED_UID_CHANGED | 以前安装过该应用，与本次分配的 UID 不一致 | 清除以前安装过的残留文件 |
| INSTALL_FAILED_VERSION_DOWNGRADE | 已经安装了该应用更高版本 | 使用 <code>-d</code> 参数 |
| INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE | 已安装 target SDK 支持运行时权限的同名应用，要安装的版本不支持运行时权限 |  |
| INSTALL_PARSE_FAILED_NOT_APK | 指定路径不是文件，或不是以 <code>.apk</code> 结尾 |  |
| INSTALL_PARSE_FAILED_BAD_MANIFEST | 无法解析的 AndroidManifest.xml 文件 |  |
| INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION | 解析器遇到异常 |  |
| INSTALL_PARSE_FAILED_NO_CERTIFICATES | 安装包没有签名 |  |
| INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES | 已安装该应用，且签名与 APK 文件不一致 | 先卸载设备上的该应用，再安装 |
| INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING | 解析 APK 文件时遇到 <code>CertificateEncodingException</code> |  |
| INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME | manifest 文件里没有或者使用了无效的包名 |  |
| INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID | manifest 文件里指定了无效的共享用户 ID |  |
| INSTALL_PARSE_FAILED_MANIFEST_MALFORMED | 解析 manifest 文件时遇到结构性错误 |  |
| INSTALL_PARSE_FAILED_MANIFEST_EMPTY | 在 manifest 文件里找不到找可操作标签（instrumentation 或 application） |  |
| INSTALL_FAILED_INTERNAL_ERROR | 因系统问题安装失败 |  |
| INSTALL_FAILED_USER_RESTRICTED | 用户被限制安装应用 |  |
| INSTALL_FAILED_DUPLICATE_PERMISSION | 应用尝试定义一个已经存在的权限名称 |  |
| INSTALL_FAILED_NO_MATCHING_ABIS | 应用包含设备的应用程序二进制接口不支持的 native code |  |
| INSTALL_CANCELED_BY_USER | 应用安装需要在设备上确认，但未操作设备或点了取消 | 在设备上同意安装 |
| INSTALL_FAILED_ACWF_INCOMPATIBLE | 应用程序与设备不兼容 |  |
| does not contain AndroidManifest.xml | 无效的 APK 文件 |  |
| is not a valid zip file | 无效的 APK 文件 |  |
| Offline | 设备未连接成功 | 先将设备与 adb 连接成功 |
| unauthorized | 设备未授权允许调试 |  |
| error: device not found | 没有连接成功的设备 | 先将设备与 adb 连接成功 |
| protocol failure | 设备已断开连接 | 先将设备与 adb 连接成功 |
| Unknown option: -s | Android 2.2 以下不支持安装到 sdcard | 不使用 <code>-s</code> 参数 |
| No space left on device | 空间不足 | 清理空间 |
| Permission denied … sdcard … | sdcard 不可用 |  |
| signatures do not match the previously installed version; ignoring! | 已安装该应用且签名不一致 | 先卸载设备上的该应用，再安装 |</p>
<p>参考：<a href="https://github.com/android/platform_frameworks_base/blob/master/core%2Fjava%2Fandroid%2Fcontent%2Fpm%2FPackageManager.java" target="_blank" rel="external">PackageManager.java</a></p>
<p><em><code>adb install</code> 内部原理简介</em></p>
<p><code>adb install</code> 实际是分三步完成：</p>
<ol>
<li><p>push apk 文件到 /data/local/tmp。</p>
</li>
<li><p>调用 pm install 安装。</p>
</li>
<li><p>删除 /data/local/tmp 下的对应 apk 文件。</p>
</li>
</ol>
<p>所以，必要的时候也可以根据这个步骤，手动分步执行安装过程。</p>
<p><a name="e58db8e8bdbde5ba94e794a8_21"></a><a name="卸载应用"></a></p>
<h3 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb uninstall [-k] &lt;packagename&gt;</div></pre></td></tr></table></figure>
<p><code>&lt;packagename&gt;</code> 表示应用的包名，<code>-k</code> 参数可选，表示卸载应用但保留数据和缓存目录。</p>
<p>命令示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb uninstall com.qihoo360.mobilesafe</div></pre></td></tr></table></figure>
<p>表示卸载 360 手机卫士。</p>
<p><a name="e6b885e999a4e5ba94e794a8e695b0e68daee4b88ee7bc93e5ad98_22"></a><a name="清除应用数据与缓存"></a></p>
<h3 id="清除应用数据与缓存"><a href="#清除应用数据与缓存" class="headerlink" title="清除应用数据与缓存"></a>清除应用数据与缓存</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm clear &lt;packagename&gt;</div></pre></td></tr></table></figure>
<p><code>&lt;packagename&gt;</code> 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据」。</p>
<p>命令示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm clear com.qihoo360.mobilesafe</div></pre></td></tr></table></figure>
<p>表示清除 360 手机卫士的数据和缓存。</p>
<p><a name="e69fa5e79c8be5898de58fb020activity_23"></a><a name="查看前台-activity"></a></p>
<h3 id="查看前台-Activity"><a href="#查看前台-Activity" class="headerlink" title="查看前台 Activity"></a>查看前台 Activity</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys activity activities | grep mFocusedActivity</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mFocusedActivity: ActivityRecord&#123;8079d7e u0 com.cyanogenmod.trebuchet/com.android.launcher3.Launcher t42&#125;</div></pre></td></tr></table></figure>
<p>其中的 <code>com.cyanogenmod.trebuchet/com.android.launcher3.Launcher</code> 就是当前处于前台的 Activity。</p>
<p><a name="e69fa5e79c8be6ada3e59ca8e8bf90e8a18ce79a8420services_24"></a><a name="查看正在运行的-services"></a></p>
<h3 id="查看正在运行的-Services"><a href="#查看正在运行的-Services" class="headerlink" title="查看正在运行的 Services"></a>查看正在运行的 Services</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys activity services [&lt;packagename&gt;]</div></pre></td></tr></table></figure>
<p><code>&lt;packagename&gt;</code> 参数不是必须的，指定 <code>&lt;packagename&gt;</code> 表示查看与某个包名相关的 Services，不指定表示查看所有 Services。</p>
<p><code>&lt;packagename&gt;</code> 不一定要给出完整的包名，比如运行 <code>adb shell dumpsys activity services org.mazhuang</code>，那么包名 <code>org.mazhuang.demo1</code>、<code>org.mazhuang.demo2</code> 和 <code>org.mazhuang123</code> 等相关的 Services 都会列出来。</p>
<p><a name="e4b88ee5ba94e794a8e4baa4e4ba92_25"></a><a name="与应用交互"></a></p>
<h2 id="与应用交互"><a href="#与应用交互" class="headerlink" title="与应用交互"></a>与应用交互</h2><p>主要是使用 <code>am &lt;command&gt;</code> 命令，常用的 <code>&lt;command&gt;</code> 如下：</p>
<table>
<thead>
<tr>
<th>command</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>start [options] &lt;INTENT&gt;</code></td>
<td>启动 <code>&lt;INTENT&gt;</code> 指定的 Activity</td>
</tr>
<tr>
<td><code>startservice [options] &lt;INTENT&gt;</code></td>
<td>启动 <code>&lt;INTENT&gt;</code> 指定的 Service</td>
</tr>
<tr>
<td><code>broadcast [options] &lt;INTENT&gt;</code></td>
<td>发送 <code>&lt;INTENT&gt;</code> 指定的广播</td>
</tr>
<tr>
<td><code>force-stop &lt;packagename&gt;</code></td>
<td>停止 <code>&lt;packagename&gt;</code> 相关的进程</td>
</tr>
</tbody>
</table>
<p><code>&lt;INTENT&gt;</code> 参数很灵活，和写 Android 程序时代码里的 Intent 相对应。</p>
<p>用于决定 intent 对象的选项如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-a &lt;ACTION&gt;</code></td>
<td>指定 action，比如 <code>android.intent.action.VIEW</code></td>
</tr>
<tr>
<td><code>-c &lt;CATEGORY&gt;</code></td>
<td>指定 category，比如 <code>android.intent.category.APP_CONTACTS</code></td>
</tr>
<tr>
<td><code>-n &lt;COMPONENT&gt;</code></td>
<td>指定完整 component 名，用于明确指定启动哪个 Activity，如 <code>com.example.app/.ExampleActivity</code></td>
</tr>
</tbody>
</table>
<p><code>&lt;INTENT&gt;</code> 里还能带数据，就像写代码时的 Bundle 一样：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>--esn &lt;EXTRA_KEY&gt;</code></td>
<td>null 值（只有 key 名）</td>
</tr>
<tr>
<td>`-e</td>
<td>–es <extra_key> <extra_string_value>`</extra_string_value></extra_key></td>
<td>string 值</td>
</tr>
<tr>
<td><code>--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt;</code></td>
<td>boolean 值</td>
</tr>
<tr>
<td><code>--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;</code></td>
<td>integer 值</td>
</tr>
<tr>
<td><code>--el &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;</code></td>
<td>long 值</td>
</tr>
<tr>
<td><code>--ef &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;</code></td>
<td>float 值</td>
</tr>
<tr>
<td><code>--eu &lt;EXTRA_KEY&gt; &lt;EXTRA_URI_VALUE&gt;</code></td>
<td>URI</td>
</tr>
<tr>
<td><code>--ecn &lt;EXTRA_KEY&gt; &lt;EXTRA_COMPONENT_NAME_VALUE&gt;</code></td>
<td>component name</td>
</tr>
<tr>
<td><code>--eia &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]</code></td>
<td>integer 数组</td>
</tr>
<tr>
<td><code>--ela &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]</code></td>
<td>long 数组</td>
</tr>
</tbody>
</table>
<p><a name="e8b083e8b5b720activity_26"></a><a name="调起-activity"></a></p>
<h3 id="调起-Activity"><a href="#调起-Activity" class="headerlink" title="调起 Activity"></a>调起 Activity</h3><p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am start [options] &lt;INTENT&gt;</div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am start -n com.tencent.mm/.ui.LauncherUI</div></pre></td></tr></table></figure>
<p>表示调起微信主界面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am start -n org.mazhuang.boottimemeasure/.MainActivity --es &quot;toast&quot; &quot;hello, world&quot;</div></pre></td></tr></table></figure>
<p>表示调起 <code>org.mazhuang.boottimemeasure/.MainActivity</code> 并传给它 string 数据键值对 <code>toast - hello, world</code>。</p>
<p><a name="e8b083e8b5b720service_27"></a><a name="调起-service"></a></p>
<h3 id="调起-Service"><a href="#调起-Service" class="headerlink" title="调起 Service"></a>调起 Service</h3><p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am startservice [options] &lt;INTENT&gt;</div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am startservice -n com.tencent.mm/.plugin.accountsync.model.AccountAuthenticatorService</div></pre></td></tr></table></figure>
<p>表示调起微信的某 Service。</p>
<p><a name="e58f91e98081e5b9bfe692ad_28"></a><a name="发送广播"></a></p>
<h3 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h3><p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am broadcast [options] &lt;INTENT&gt;</div></pre></td></tr></table></figure>
<p>可以向所有组件广播，也可以只向指定组件广播。</p>
<p>例如，向所有组件广播 <code>BOOT_COMPLETED</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED</div></pre></td></tr></table></figure>
<p>又例如，只向 <code>org.mazhuang.boottimemeasure/.BootCompletedReceiver</code> 广播 <code>BOOT_COMPLETED</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED -n org.mazhuang.boottimemeasure/.BootCompletedReceiver</div></pre></td></tr></table></figure>
<p>这类用法在测试的时候很实用，比如某个广播的场景很难制造，可以考虑通过这种方式来发送广播。</p>
<p>既能发送系统预定义的广播，也能发送自定义广播。如下是部分系统预定义广播及正常触发时机：</p>
<table>
<thead>
<tr>
<th>action</th>
<th>触发时机</th>
</tr>
</thead>
<tbody>
<tr>
<td>android.net.conn.CONNECTIVITY_CHANGE</td>
<td>网络连接发生变化</td>
</tr>
<tr>
<td>android.intent.action.SCREEN_ON</td>
<td>屏幕点亮</td>
</tr>
<tr>
<td>android.intent.action.SCREEN_OFF</td>
<td>屏幕熄灭</td>
</tr>
<tr>
<td>android.intent.action.BATTERY_LOW</td>
<td>电量低，会弹出电量低提示框</td>
</tr>
<tr>
<td>android.intent.action.BATTERY_OKAY</td>
<td>电量恢复了</td>
</tr>
<tr>
<td>android.intent.action.BOOT_COMPLETED</td>
<td>设备启动完毕</td>
</tr>
<tr>
<td>android.intent.action.DEVICE_STORAGE_LOW</td>
<td>存储空间过低</td>
</tr>
<tr>
<td>android.intent.action.DEVICE_STORAGE_OK</td>
<td>存储空间恢复</td>
</tr>
<tr>
<td>android.intent.action.PACKAGE_ADDED</td>
<td>安装了新的应用</td>
</tr>
<tr>
<td>android.net.wifi.STATE_CHANGE</td>
<td>WiFi 连接状态发生变化</td>
</tr>
<tr>
<td>android.net.wifi.WIFI_STATE_CHANGED</td>
<td>WiFi 状态变为启用/关闭/正在启动/正在关闭/未知</td>
</tr>
<tr>
<td>android.intent.action.BATTERY_CHANGED</td>
<td>电池电量发生变化</td>
</tr>
<tr>
<td>android.intent.action.INPUT_METHOD_CHANGED</td>
<td>系统输入法发生变化</td>
</tr>
<tr>
<td>android.intent.action.ACTION_POWER_CONNECTED</td>
<td>外部电源连接</td>
</tr>
<tr>
<td>android.intent.action.ACTION_POWER_DISCONNECTED</td>
<td>外部电源断开连接</td>
</tr>
<tr>
<td>android.intent.action.DREAMING_STARTED</td>
<td>系统开始休眠</td>
</tr>
<tr>
<td>android.intent.action.DREAMING_STOPPED</td>
<td>系统停止休眠</td>
</tr>
<tr>
<td>android.intent.action.WALLPAPER_CHANGED</td>
<td>壁纸发生变化</td>
</tr>
<tr>
<td>android.intent.action.HEADSET_PLUG</td>
<td>插入耳机</td>
</tr>
<tr>
<td>android.intent.action.MEDIA_UNMOUNTED</td>
<td>卸载外部介质</td>
</tr>
<tr>
<td>android.intent.action.MEDIA_MOUNTED</td>
<td>挂载外部介质</td>
</tr>
<tr>
<td>android.os.action.POWER_SAVE_MODE_CHANGED</td>
<td>省电模式开启</td>
</tr>
</tbody>
</table>
<p><em>（以上广播均可使用 adb 触发）</em></p>
<p><a name="e5bcbae588b6e5819ce6ada2e5ba94e794a8_29"></a><a name="强制停止应用"></a></p>
<h3 id="强制停止应用"><a href="#强制停止应用" class="headerlink" title="强制停止应用"></a>强制停止应用</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am force-stop &lt;packagename&gt;</div></pre></td></tr></table></figure>
<p>命令示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am force-stop com.qihoo360.mobilesafe</div></pre></td></tr></table></figure>
<p>表示停止 360 安全卫士的一切进程与服务。</p>
<p><a name="e69687e4bbb6e7aea1e79086_30"></a><a name="文件管理"></a></p>
<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p><a name="e5a48de588b6e8aebee5a487e9878ce79a84e69687e4bbb6e588b0e794b5e88491_31"></a><a name="复制设备里的文件到电脑"></a></p>
<h3 id="复制设备里的文件到电脑"><a href="#复制设备里的文件到电脑" class="headerlink" title="复制设备里的文件到电脑"></a>复制设备里的文件到电脑</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</div></pre></td></tr></table></figure>
<p>其中 <code>电脑上的目录</code> 参数可以省略，默认复制到当前目录。</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /sdcard/sr.mp4 ~/tmp/</div></pre></td></tr></table></figure>
<p><em>小技巧：</em>设备上的文件路径可能需要 root 权限才能访问，如果你的设备已经 root 过，可以先使用 <code>adb shell</code> 和 <code>su</code> 命令在 adb shell 里获取 root 权限后，先 <code>cp /path/on/device /sdcard/filename</code> 将文件复制到 sdcard，然后 <code>adb pull /sdcard/filename /path/on/pc</code>。</p>
<p><a name="e5a48de588b6e794b5e88491e9878ce79a84e69687e4bbb6e588b0e8aebee5a487_32"></a><a name="复制电脑里的文件到设备"></a></p>
<h3 id="复制电脑里的文件到设备"><a href="#复制电脑里的文件到设备" class="headerlink" title="复制电脑里的文件到设备"></a>复制电脑里的文件到设备</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb push ~/sr.mp4 /sdcard/</div></pre></td></tr></table></figure>
<p><em>小技巧：</em>设备上的文件路径普通权限可能无法直接写入，如果你的设备已经 root 过，可以先 <code>adb push /path/on/pc /sdcard/filename</code>，然后 <code>adb shell</code> 和 <code>su</code> 在 adb shell 里获取 root 权限后，<code>cp /sdcard/filename /path/on/device</code>。</p>
<p><a name="e6a8a1e68b9fe68c89e994aee8be93e585a5_33"></a><a name="模拟按键输入"></a></p>
<h2 id="模拟按键-输入"><a href="#模拟按键-输入" class="headerlink" title="模拟按键/输入"></a>模拟按键/输入</h2><p>在 <code>adb shell</code> 里有个很实用的命令叫 <code>input</code>，通过它可以做一些有趣的事情。</p>
<p><code>input</code> 命令的完整 help 信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Usage: input [&lt;source&gt;] &lt;command&gt; [&lt;arg&gt;...]</div><div class="line"></div><div class="line">The sources are:</div><div class="line">      mouse</div><div class="line">      keyboard</div><div class="line">      joystick</div><div class="line">      touchnavigation</div><div class="line">      touchpad</div><div class="line">      trackball</div><div class="line">      stylus</div><div class="line">      dpad</div><div class="line">      gesture</div><div class="line">      touchscreen</div><div class="line">      gamepad</div><div class="line"></div><div class="line">The commands and default sources are:</div><div class="line">      text &lt;string&gt; (Default: touchscreen)</div><div class="line">      keyevent [--longpress] &lt;key code number or name&gt; ... (Default: keyboard)</div><div class="line">      tap &lt;x&gt; &lt;y&gt; (Default: touchscreen)</div><div class="line">      swipe &lt;x1&gt; &lt;y1&gt; &lt;x2&gt; &lt;y2&gt; [duration(ms)] (Default: touchscreen)</div><div class="line">      press (Default: trackball)</div><div class="line">      roll &lt;dx&gt; &lt;dy&gt; (Default: trackball)</div></pre></td></tr></table></figure>
<p>比如使用 <code>adb shell input keyevent &lt;keycode&gt;</code> 命令，不同的 keycode 能实现不同的功能，完整的 keycode 列表详见 <a href="https://developer.android.com/reference/android/view/KeyEvent.html" target="_blank" rel="external">KeyEvent</a>，摘引部分我觉得有意思的如下：</p>
<table>
<thead>
<tr>
<th>keycode</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>3</td>
<td>HOME 键</td>
</tr>
<tr>
<td>4</td>
<td>返回键</td>
</tr>
<tr>
<td>5</td>
<td>打开拨号应用</td>
</tr>
<tr>
<td>6</td>
<td>挂断电话</td>
</tr>
<tr>
<td>24</td>
<td>增加音量</td>
</tr>
<tr>
<td>25</td>
<td>降低音量</td>
</tr>
<tr>
<td>26</td>
<td>电源键</td>
</tr>
<tr>
<td>27</td>
<td>拍照（需要在相机应用里）</td>
</tr>
<tr>
<td>64</td>
<td>打开浏览器</td>
</tr>
<tr>
<td>82</td>
<td>菜单键</td>
</tr>
<tr>
<td>85</td>
<td>播放/暂停</td>
</tr>
<tr>
<td>86</td>
<td>停止播放</td>
</tr>
<tr>
<td>87</td>
<td>播放下一首</td>
</tr>
<tr>
<td>88</td>
<td>播放上一首</td>
</tr>
<tr>
<td>122</td>
<td>移动光标到行首或列表顶部</td>
</tr>
<tr>
<td>123</td>
<td>移动光标到行末或列表底部</td>
</tr>
<tr>
<td>126</td>
<td>恢复播放</td>
</tr>
<tr>
<td>127</td>
<td>暂停播放</td>
</tr>
<tr>
<td>164</td>
<td>静音</td>
</tr>
<tr>
<td>176</td>
<td>打开系统设置</td>
</tr>
<tr>
<td>187</td>
<td>切换应用</td>
</tr>
<tr>
<td>207</td>
<td>打开联系人</td>
</tr>
<tr>
<td>208</td>
<td>打开日历</td>
</tr>
<tr>
<td>209</td>
<td>打开音乐</td>
</tr>
<tr>
<td>210</td>
<td>打开计算器</td>
</tr>
<tr>
<td>220</td>
<td>降低屏幕亮度</td>
</tr>
<tr>
<td>221</td>
<td>提高屏幕亮度</td>
</tr>
<tr>
<td>223</td>
<td>系统休眠</td>
</tr>
<tr>
<td>224</td>
<td>点亮屏幕</td>
</tr>
<tr>
<td>231</td>
<td>打开语音助手</td>
</tr>
<tr>
<td>276</td>
<td>如果没有 wakelock 则让系统休眠</td>
</tr>
</tbody>
</table>
<p>下面是 <code>input</code> 命令的一些用法举例。</p>
<p><a name="e794b5e6ba90e994ae_34"></a><a name="电源键"></a></p>
<h3 id="电源键"><a href="#电源键" class="headerlink" title="电源键"></a>电源键</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 26</div></pre></td></tr></table></figure>
<p>执行效果相当于按电源键。</p>
<p><a name="e88f9ce58d95e994ae_35"></a><a name="菜单键"></a></p>
<h3 id="菜单键"><a href="#菜单键" class="headerlink" title="菜单键"></a>菜单键</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 82</div></pre></td></tr></table></figure>
<p><a name="home20e994ae_36"></a><a name="home-键"></a></p>
<h3 id="HOME-键"><a href="#HOME-键" class="headerlink" title="HOME 键"></a>HOME 键</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 3</div></pre></td></tr></table></figure>
<p><a name="e8bf94e59b9ee994ae_37"></a><a name="返回键"></a></p>
<h3 id="返回键"><a href="#返回键" class="headerlink" title="返回键"></a>返回键</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 4</div></pre></td></tr></table></figure>
<p><a name="e99fb3e9878fe68ea7e588b6_38"></a><a name="音量控制"></a></p>
<h3 id="音量控制"><a href="#音量控制" class="headerlink" title="音量控制"></a>音量控制</h3><p>增加音量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 24</div></pre></td></tr></table></figure>
<p>降低音量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 25</div></pre></td></tr></table></figure>
<p>静音：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 164</div></pre></td></tr></table></figure>
<p><a name="e5aa92e4bd93e68ea7e588b6_39"></a><a name="媒体控制"></a></p>
<h3 id="媒体控制"><a href="#媒体控制" class="headerlink" title="媒体控制"></a>媒体控制</h3><p>播放/暂停：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 85</div></pre></td></tr></table></figure>
<p>停止播放：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 86</div></pre></td></tr></table></figure>
<p>播放下一首：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 87</div></pre></td></tr></table></figure>
<p>播放上一首：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 88</div></pre></td></tr></table></figure>
<p>恢复播放：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 126</div></pre></td></tr></table></figure>
<p>暂停播放：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 127</div></pre></td></tr></table></figure>
<p><a name="e782b9e4baaee78684e781ade5b18fe5b995_40"></a><a name="点亮熄灭屏幕"></a></p>
<h3 id="点亮-熄灭屏幕"><a href="#点亮-熄灭屏幕" class="headerlink" title="点亮/熄灭屏幕"></a>点亮/熄灭屏幕</h3><p>可以通过上文讲述过的模拟电源键来切换点亮和熄灭屏幕，但如果明确地想要点亮或者熄灭屏幕，那可以使用如下方法。</p>
<p>点亮屏幕：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 224</div></pre></td></tr></table></figure>
<p>熄灭屏幕：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 223</div></pre></td></tr></table></figure>
<p><a name="e6bb91e58aa8e8a7a3e99481_41"></a><a name="滑动解锁"></a></p>
<h3 id="滑动解锁"><a href="#滑动解锁" class="headerlink" title="滑动解锁"></a>滑动解锁</h3><p>如果锁屏没有密码，是通过滑动手势解锁，那么可以通过 <code>input swipe</code> 来解锁。</p>
<p>命令（参数以机型 Nexus 5，向上滑动手势解锁举例）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input swipe 300 1000 300 500</div></pre></td></tr></table></figure>
<p>参数 <code>300 1000 300 500</code> 分别表示<code>起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标</code>。</p>
<p><a name="e8be93e585a5e69687e69cac_42"></a><a name="输入文本"></a></p>
<h3 id="输入文本"><a href="#输入文本" class="headerlink" title="输入文本"></a>输入文本</h3><p>在焦点处于某文本框时，可以通过 <code>input</code> 命令来输入文本。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input text hello</div></pre></td></tr></table></figure>
<p>现在 <code>hello</code> 出现在文本框了。</p>
<p><a name="e69fa5e79c8be697a5e5bf97_43"></a><a name="查看日志"></a></p>
<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>Android 系统的日志分为两部分，底层的 Linux 内核日志输出到 /proc/kmsg，Android 的日志输出到 /dev/log。</p>
<p><a name="android20e697a5e5bf97_44"></a><a name="android-日志"></a></p>
<h3 id="Android-日志"><a href="#Android-日志" class="headerlink" title="Android 日志"></a>Android 日志</h3><p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[adb] logcat [&lt;option&gt;] ... [&lt;filter-spec&gt;] ...</div></pre></td></tr></table></figure>
<p>常用用法列举如下：</p>
<p><a name="e68c89e7baa7e588abe8bf87e6bba4e697a5e5bf97_45"></a><a name="按级别过滤日志"></a></p>
<h4 id="按级别过滤日志"><a href="#按级别过滤日志" class="headerlink" title="按级别过滤日志"></a>按级别过滤日志</h4><p>Android 的日志分为如下几个优先级（priority）：</p>
<ul>
<li>V —— Verbose（最低，输出得最多）</li>
<li>D —— Debug</li>
<li>I —— Info</li>
<li>W —— Warning</li>
<li>E —— Error</li>
<li>F —— Fatal</li>
<li>S —— Silent（最高，啥也不输出）</li>
</ul>
<p>按某级别过滤日志则会将该级别及以上的日志输出。</p>
<p>比如，命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat *:W</div></pre></td></tr></table></figure>
<p>会将 Warning、Error、Fatal 和 Silent 日志输出。</p>
<p>（<strong>注：</strong> 在 macOS 下需要给 <code>*:W</code> 这样以 <code>*</code> 作为 tag 的参数加双引号，如 <code>adb logcat &quot;*:W&quot;</code>，不然会报错 <code>no matches found: *:W</code>。）</p>
<p><a name="e68c8920tag20e5928ce7baa7e588abe8bf87e6bba4e697a5e5bf97_46"></a><a name="按-tag-和级别过滤日志"></a></p>
<h4 id="按-tag-和级别过滤日志"><a href="#按-tag-和级别过滤日志" class="headerlink" title="按 tag 和级别过滤日志"></a>按 tag 和级别过滤日志</h4><p><code>&lt;filter-spec&gt;</code> 可以由多个 <code>&lt;tag&gt;[:priority]</code> 组成。</p>
<p>比如，命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat ActivityManager:I MyApp:D *:S</div></pre></td></tr></table></figure>
<p>表示输出 tag <code>ActivityManager</code> 的 Info 以上级别日志，输出 tag <code>MyApp</code> 的 Debug 以上级别日志，及其它 tag 的 Silent 级别日志（即屏蔽其它 tag 日志）。</p>
<p><a name="e697a5e5bf97e6a0bce5bc8f_47"></a><a name="日志格式"></a></p>
<h4 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h4><p>可以用 <code>adb logcat -v &lt;format&gt;</code> 选项指定日志输出格式。</p>
<p>日志支持按以下几种 <code>&lt;format&gt;</code>：</p>
<ul>
<li><p>brief</p>
<p>默认格式。格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D/HeadsetStateMachine( 1785): Disconnected process message: 10, size: 0</div></pre></td></tr></table></figure>
</li>
<li><p>process</p>
<p>格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;priority&gt;(&lt;pid&gt;) &lt;message&gt;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D( 1785) Disconnected process message: 10, size: 0  (HeadsetStateMachine)</div></pre></td></tr></table></figure>
</li>
<li><p>tag</p>
<p>格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;priority&gt;/&lt;tag&gt;: &lt;message&gt;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D/HeadsetStateMachine: Disconnected process message: 10, size: 0</div></pre></td></tr></table></figure>
</li>
<li><p>raw</p>
<p>格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;message&gt;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Disconnected process message: 10, size: 0</div></pre></td></tr></table></figure>
</li>
<li><p>time</p>
<p>格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;datetime&gt; &lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">08-28 22:39:39.974 D/HeadsetStateMachine( 1785): Disconnected process message: 10, size: 0</div></pre></td></tr></table></figure>
</li>
<li><p>threadtime</p>
<p>格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;datetime&gt; &lt;pid&gt; &lt;tid&gt; &lt;priority&gt; &lt;tag&gt;: &lt;message&gt;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">08-28 22:39:39.974  1785  1832 D HeadsetStateMachine: Disconnected process message: 10, size: 0</div></pre></td></tr></table></figure>
</li>
<li><p>long</p>
<p>格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ &lt;datetime&gt; &lt;pid&gt;:&lt;tid&gt; &lt;priority&gt;/&lt;tag&gt; ]</div><div class="line">&lt;message&gt;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ 08-28 22:39:39.974  1785: 1832 D/HeadsetStateMachine ]</div><div class="line">Disconnected process message: 10, size: 0</div></pre></td></tr></table></figure>
</li>
</ul>
<p>指定格式可与上面的过滤同时使用。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat -v long ActivityManager:I *:S</div></pre></td></tr></table></figure>
<p><a name="e6b885e7a9bae697a5e5bf97_48"></a><a name="清空日志"></a></p>
<h4 id="清空日志"><a href="#清空日志" class="headerlink" title="清空日志"></a>清空日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat -c</div></pre></td></tr></table></figure>
<p><a name="e58685e6a0b8e697a5e5bf97_49"></a><a name="内核日志"></a></p>
<h3 id="内核日志"><a href="#内核日志" class="headerlink" title="内核日志"></a>内核日志</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dmesg</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;6&gt;[14201.684016] PM: noirq resume of devices complete after 0.982 msecs</div><div class="line">&lt;6&gt;[14201.685525] PM: early resume of devices complete after 0.838 msecs</div><div class="line">&lt;6&gt;[14201.753642] PM: resume of devices complete after 68.106 msecs</div><div class="line">&lt;4&gt;[14201.755954] Restarting tasks ... done.</div><div class="line">&lt;6&gt;[14201.771229] PM: suspend exit 2016-08-28 13:31:32.679217193 UTC</div><div class="line">&lt;6&gt;[14201.872373] PM: suspend entry 2016-08-28 13:31:32.780363596 UTC</div><div class="line">&lt;6&gt;[14201.872498] PM: Syncing filesystems ... done.</div></pre></td></tr></table></figure>
<p>中括号里的 <code>[14201.684016]</code> 代表内核开始启动后的时间，单位为秒。</p>
<p>通过内核日志我们可以做一些事情，比如衡量内核启动时间，在系统启动完毕后的内核日志里找到 <code>Freeing init memory</code> 那一行前面的时间就是。</p>
<p><a name="e69fa5e79c8be8aebee5a487e4bfa1e681af_50"></a><a name="查看设备信息"></a></p>
<h2 id="查看设备信息"><a href="#查看设备信息" class="headerlink" title="查看设备信息"></a>查看设备信息</h2><p><a name="e59e8be58fb7_51"></a><a name="型号"></a></p>
<h3 id="型号"><a href="#型号" class="headerlink" title="型号"></a>型号</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell getprop ro.product.model</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Nexus 5</div></pre></td></tr></table></figure>
<p><a name="e794b5e6b1a0e78ab6e586b5_52"></a><a name="电池状况"></a></p>
<h3 id="电池状况"><a href="#电池状况" class="headerlink" title="电池状况"></a>电池状况</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys battery</div></pre></td></tr></table></figure>
<p>输入示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Current Battery Service state:</div><div class="line">  AC powered: false</div><div class="line">  USB powered: true</div><div class="line">  Wireless powered: false</div><div class="line">  status: 2</div><div class="line">  health: 2</div><div class="line">  present: true</div><div class="line">  level: 44</div><div class="line">  scale: 100</div><div class="line">  voltage: 3872</div><div class="line">  temperature: 280</div><div class="line">  technology: Li-poly</div></pre></td></tr></table></figure>
<p>其中 <code>scale</code> 代表最大电量，<code>level</code> 代表当前电量。上面的输出表示还剩下 44% 的电量。</p>
<p><a name="e5b18fe5b995e58886e8bea8e78e87_53"></a><a name="屏幕分辨率"></a></p>
<h3 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm size</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Physical size: 1080x1920</div></pre></td></tr></table></figure>
<p>该设备屏幕分辨率为 1080px * 1920px。</p>
<p>如果使用命令修改过，那输出可能是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Physical size: 1080x1920</div><div class="line">Override size: 480x1024</div></pre></td></tr></table></figure>
<p>表明设备的屏幕分辨率原本是 1080px <em> 1920px，当前被修改为 480px </em> 1024px。</p>
<p><a name="e5b18fe5b995e5af86e5baa6_54"></a><a name="屏幕密度"></a></p>
<h3 id="屏幕密度"><a href="#屏幕密度" class="headerlink" title="屏幕密度"></a>屏幕密度</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm density</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Physical density: 420</div></pre></td></tr></table></figure>
<p>该设备屏幕密度为 420dpi。</p>
<p>如果使用命令修改过，那输出可能是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Physical density: 480</div><div class="line">Override density: 160</div></pre></td></tr></table></figure>
<p>表明设备的屏幕密度原来是 480dpi，当前被修改为 160dpi。</p>
<p><a name="e698bee7a4bae5b18fe58f82e695b0_55"></a><a name="显示屏参数"></a></p>
<h3 id="显示屏参数"><a href="#显示屏参数" class="headerlink" title="显示屏参数"></a>显示屏参数</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys window displays</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">WINDOW MANAGER DISPLAY CONTENTS (dumpsys window displays)</div><div class="line">  Display: mDisplayId=0</div><div class="line">    init=1080x1920 420dpi cur=1080x1920 app=1080x1794 rng=1080x1017-1810x1731</div><div class="line">    deferred=false layoutNeeded=false</div></pre></td></tr></table></figure>
<p>其中 <code>mDisplayId</code> 为 显示屏编号，<code>init</code> 是初始分辨率和屏幕密度，<code>app</code> 的高度比 <code>init</code> 里的要小，表示屏幕底部有虚拟按键，高度为 1920 - 1794 = 126px 合 42dp。</p>
<p><a name="android_id_56"></a><a name="android_id"></a></p>
<h3 id="android-id"><a href="#android-id" class="headerlink" title="android_id"></a>android_id</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings get secure android_id</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">51b6be48bac8c569</div></pre></td></tr></table></figure>
<p><a name="imei_57"></a><a name="imei"></a></p>
<h3 id="IMEI"><a href="#IMEI" class="headerlink" title="IMEI"></a>IMEI</h3><p>在 Android 4.4 及以下版本可通过如下命令获取 IMEI：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys iphonesubinfo</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Phone Subscriber Info:</div><div class="line">  Phone Type = GSM</div><div class="line">  Device ID = 860955027785041</div></pre></td></tr></table></figure>
<p>其中的 <code>Device ID</code> 就是 IMEI。</p>
<p>而在 Android 5.0 及以上版本里这个命令输出为空，得通过其它方式获取了（需要 root 权限）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div><div class="line">service call iphonesubinfo 1</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Result: Parcel(</div><div class="line">  0x00000000: 00000000 0000000f 00360038 00390030 &apos;........8.6.0.9.&apos;</div><div class="line">  0x00000010: 00350035 00320030 00370037 00350038 &apos;5.5.0.2.7.7.8.5.&apos;</div><div class="line">  0x00000020: 00340030 00000031                   &apos;0.4.1...        &apos;)</div></pre></td></tr></table></figure>
<p>把里面的有效内容提取出来就是 IMEI 了，比如这里的是 <code>860955027785041</code>。</p>
<p>参考：<a href="http://stackoverflow.com/questions/27002663/adb-shell-dumpsys-iphonesubinfo-not-working-since-android-5-0-lollipop" target="_blank" rel="external">adb shell dumpsys iphonesubinfo not working since Android 5.0 Lollipop</a></p>
<p><a name="android20e7b3bbe7bb9fe78988e69cac_58"></a><a name="android-系统版本"></a></p>
<h3 id="Android-系统版本"><a href="#Android-系统版本" class="headerlink" title="Android 系统版本"></a>Android 系统版本</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell getprop ro.build.version.release</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">5.0.2</div></pre></td></tr></table></figure>
<p><a name="ip20e59cb0e59d80_59"></a><a name="ip-地址"></a></p>
<h3 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h3><p>每次想知道设备的 IP 地址的时候都得「设置」-「关于手机」-「状态信息」-「IP地址」很烦对不对？通过 adb 可以方便地查看。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell ifconfig | grep Mask</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">inet addr:10.130.245.230  Mask:255.255.255.252</div><div class="line">inet addr:127.0.0.1  Mask:255.0.0.0</div></pre></td></tr></table></figure>
<p>那么 <code>10.130.245.230</code> 就是设备 IP 地址。</p>
<p>在有的设备上这个命令没有输出，如果设备连着 WiFi，可以使用如下命令来查看局域网 IP：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell ifconfig wlan0</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wlan0: ip 10.129.160.99 mask 255.255.240.0 flags [up broadcast running multicast]</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wlan0     Link encap:UNSPEC</div><div class="line">          inet addr:10.129.168.57  Bcast:10.129.175.255  Mask:255.255.240.0</div><div class="line">          inet6 addr: fe80::66cc:2eff:fe68:b6b6/64 Scope: Link</div><div class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:496520 errors:0 dropped:0 overruns:0 frame:0</div><div class="line">          TX packets:68215 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:3000</div><div class="line">          RX bytes:116266821 TX bytes:8311736</div></pre></td></tr></table></figure>
<p>如果以上命令仍然不能得到期望的信息，那可以试试以下命令（部分系统版本里可用）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell netcfg</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">wlan0    UP                               10.129.160.99/20  0x00001043 f8:a9:d0:17:42:4d</div><div class="line">lo       UP                                   127.0.0.1/8   0x00000049 00:00:00:00:00:00</div><div class="line">p2p0     UP                                     0.0.0.0/0   0x00001003 fa:a9:d0:17:42:4d</div><div class="line">sit0     DOWN                                   0.0.0.0/0   0x00000080 00:00:00:00:00:00</div><div class="line">rmnet0   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rmnet1   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rmnet3   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rmnet2   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rmnet4   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rmnet6   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rmnet5   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rmnet7   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rev_rmnet3 DOWN                                   0.0.0.0/0   0x00001002 4e:b7:e4:2e:17:58</div><div class="line">rev_rmnet2 DOWN                                   0.0.0.0/0   0x00001002 4e:f0:c8:bf:7a:cf</div><div class="line">rev_rmnet4 DOWN                                   0.0.0.0/0   0x00001002 a6:c0:3b:6b:c4:1f</div><div class="line">rev_rmnet6 DOWN                                   0.0.0.0/0   0x00001002 66:bb:5d:64:2e:e9</div><div class="line">rev_rmnet5 DOWN                                   0.0.0.0/0   0x00001002 0e:1b:eb:b9:23:a0</div><div class="line">rev_rmnet7 DOWN                                   0.0.0.0/0   0x00001002 7a:d9:f6:81:40:5a</div><div class="line">rev_rmnet8 DOWN                                   0.0.0.0/0   0x00001002 4e:e2:a9:bb:d0:1b</div><div class="line">rev_rmnet0 DOWN                                   0.0.0.0/0   0x00001002 fe:65:d0:ca:82:a9</div><div class="line">rev_rmnet1 DOWN                                   0.0.0.0/0   0x00001002 da:d8:e8:4f:2e:fe</div></pre></td></tr></table></figure>
<p>可以看到网络连接名称、启用状态、IP 地址和 Mac 地址等信息。</p>
<p><a name="mac20e59cb0e59d80_60"></a><a name="mac-地址"></a></p>
<h3 id="Mac-地址"><a href="#Mac-地址" class="headerlink" title="Mac 地址"></a>Mac 地址</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell cat /sys/class/net/wlan0/address</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f8:a9:d0:17:42:4d</div></pre></td></tr></table></figure>
<p>这查看的是局域网 Mac 地址，移动网络或其它连接的信息可以通过前面的小节「IP 地址」里提到的 <code>adb shell netcfg</code> 命令来查看。</p>
<p><a name="cpu20e4bfa1e681af_61"></a><a name="cpu-信息"></a></p>
<h3 id="CPU-信息"><a href="#CPU-信息" class="headerlink" title="CPU 信息"></a>CPU 信息</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell cat /proc/cpuinfo</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Processor       : ARMv7 Processor rev 0 (v7l)</div><div class="line">processor       : 0</div><div class="line">BogoMIPS        : 38.40</div><div class="line"></div><div class="line">processor       : 1</div><div class="line">BogoMIPS        : 38.40</div><div class="line"></div><div class="line">processor       : 2</div><div class="line">BogoMIPS        : 38.40</div><div class="line"></div><div class="line">processor       : 3</div><div class="line">BogoMIPS        : 38.40</div><div class="line"></div><div class="line">Features        : swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt</div><div class="line">CPU implementer : 0x51</div><div class="line">CPU architecture: 7</div><div class="line">CPU variant     : 0x2</div><div class="line">CPU part        : 0x06f</div><div class="line">CPU revision    : 0</div><div class="line"></div><div class="line">Hardware        : Qualcomm MSM 8974 HAMMERHEAD (Flattened Device Tree)</div><div class="line">Revision        : 000b</div><div class="line">Serial          : 0000000000000000</div></pre></td></tr></table></figure>
<p>这是 Nexus 5 的 CPU 信息，我们从输出里可以看到使用的硬件是 <code>Qualcomm MSM 8974</code>，processor 的编号是 0 到 3，所以它是四核的，采用的架构是 <code>ARMv7 Processor rev 0 (v71)</code>。</p>
<p><a name="e58685e5ad98e4bfa1e681af_62"></a><a name="内存信息"></a></p>
<h3 id="内存信息"><a href="#内存信息" class="headerlink" title="内存信息"></a>内存信息</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell cat /proc/meminfo</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">MemTotal:        1027424 kB</div><div class="line">MemFree:          486564 kB</div><div class="line">Buffers:           15224 kB</div><div class="line">Cached:            72464 kB</div><div class="line">SwapCached:        24152 kB</div><div class="line">Active:           110572 kB</div><div class="line">Inactive:         259060 kB</div><div class="line">Active(anon):      79176 kB</div><div class="line">Inactive(anon):   207736 kB</div><div class="line">Active(file):      31396 kB</div><div class="line">Inactive(file):    51324 kB</div><div class="line">Unevictable:        3948 kB</div><div class="line">Mlocked:               0 kB</div><div class="line">HighTotal:        409600 kB</div><div class="line">HighFree:         132612 kB</div><div class="line">LowTotal:         617824 kB</div><div class="line">LowFree:          353952 kB</div><div class="line">SwapTotal:        262140 kB</div><div class="line">SwapFree:         207572 kB</div><div class="line">Dirty:                 0 kB</div><div class="line">Writeback:             0 kB</div><div class="line">AnonPages:        265324 kB</div><div class="line">Mapped:            47072 kB</div><div class="line">Shmem:              1020 kB</div><div class="line">Slab:              57372 kB</div><div class="line">SReclaimable:       7692 kB</div><div class="line">SUnreclaim:        49680 kB</div><div class="line">KernelStack:        4512 kB</div><div class="line">PageTables:         5912 kB</div><div class="line">NFS_Unstable:          0 kB</div><div class="line">Bounce:                0 kB</div><div class="line">WritebackTmp:          0 kB</div><div class="line">CommitLimit:      775852 kB</div><div class="line">Committed_AS:   13520632 kB</div><div class="line">VmallocTotal:     385024 kB</div><div class="line">VmallocUsed:       61004 kB</div><div class="line">VmallocChunk:     209668 kB</div></pre></td></tr></table></figure>
<p>其中，<code>MemTotal</code> 就是设备的总内存，<code>MemFree</code> 是当前空闲内存。</p>
<p><a name="e69bb4e5a49ae7a1ace4bbb6e4b88ee7b3bbe7bb9fe5b19ee680a7_63"></a><a name="更多硬件与系统属性"></a></p>
<h3 id="更多硬件与系统属性"><a href="#更多硬件与系统属性" class="headerlink" title="更多硬件与系统属性"></a>更多硬件与系统属性</h3><p>设备的更多硬件与系统属性可以通过如下命令查看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell cat /system/build.prop</div></pre></td></tr></table></figure>
<p>这会输出很多信息，包括前面几个小节提到的「型号」和「Android 系统版本」等。</p>
<p>输出里还包括一些其它有用的信息，它们也可通过 <code>adb shell getprop &lt;属性名&gt;</code> 命令单独查看，列举一部分属性如下：</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ro.build.version.sdk</td>
<td>SDK 版本</td>
</tr>
<tr>
<td>ro.build.version.release</td>
<td>Android 系统版本</td>
</tr>
<tr>
<td>ro.build.version.security_patch</td>
<td>Android 安全补丁程序级别</td>
</tr>
<tr>
<td>ro.product.model</td>
<td>型号</td>
</tr>
<tr>
<td>ro.product.brand</td>
<td>品牌</td>
</tr>
<tr>
<td><a href="http://ro.product.name" target="_blank" rel="external">ro.product.name</a></td>
<td>设备名</td>
</tr>
<tr>
<td>ro.product.board</td>
<td>处理器型号</td>
</tr>
<tr>
<td>ro.product.cpu.abilist</td>
<td>CPU 支持的 abi 列表[<em>节注一</em>]</td>
</tr>
<tr>
<td>persist.sys.isUsbOtgEnabled</td>
<td>是否支持 OTG</td>
</tr>
<tr>
<td>dalvik.vm.heapsize</td>
<td>每个应用程序的内存上限</td>
</tr>
<tr>
<td>ro.sf.lcd_density</td>
<td>屏幕密度</td>
</tr>
</tbody>
</table>
<p><em>节注一：</em></p>
<p>一些小厂定制的 ROM 可能修改过 CPU 支持的 abi 列表的属性名，如果用 <code>ro.product.cpu.abilist</code> 属性名查找不到，可以这样试试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell cat /system/build.prop | grep ro.product.cpu.abi</div></pre></td></tr></table></figure>
<p>示例输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ro.product.cpu.abi=armeabi-v7a</div><div class="line">ro.product.cpu.abi2=armeabi</div></pre></td></tr></table></figure>
<p><a name="e4bfaee694b9e8aebee7bdae_64"></a><a name="修改设置"></a></p>
<h2 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h2><p><strong>注：</strong> 修改设置之后，运行恢复命令有可能显示仍然不太正常，可以运行 <code>adb reboot</code> 重启设备，或手动重启。</p>
<p>修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。</p>
<p><a name="e58886e8bea8e78e87_65"></a><a name="分辨率"></a></p>
<h3 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm size 480x1024</div></pre></td></tr></table></figure>
<p>表示将分辨率修改为 480px * 1024px。</p>
<p>恢复原分辨率命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm size reset</div></pre></td></tr></table></figure>
<p><a name="e5b18fe5b995e5af86e5baa6_66"></a><a name="屏幕密度"></a></p>
<h3 id="屏幕密度-1"><a href="#屏幕密度-1" class="headerlink" title="屏幕密度"></a>屏幕密度</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm density 160</div></pre></td></tr></table></figure>
<p>表示将屏幕密度修改为 160dpi。</p>
<p>恢复原屏幕密度命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm density reset</div></pre></td></tr></table></figure>
<p><a name="e698bee7a4bae58cbae59f9f_67"></a><a name="显示区域"></a></p>
<h3 id="显示区域"><a href="#显示区域" class="headerlink" title="显示区域"></a>显示区域</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm overscan 0,0,0,200</div></pre></td></tr></table></figure>
<p>四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 200px 留白。</p>
<p>恢复原显示区域命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm overscan reset</div></pre></td></tr></table></figure>
<p><a name="e585b3e997ad20usb20e8b083e8af95e6a8a1e5bc8f_68"></a><a name="关闭-usb-调试模式"></a></p>
<h3 id="关闭-USB-调试模式"><a href="#关闭-USB-调试模式" class="headerlink" title="关闭 USB 调试模式"></a>关闭 USB 调试模式</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global adb_enabled 0</div></pre></td></tr></table></figure>
<p>恢复：</p>
<p>用命令恢复不了了，毕竟关闭了 USB 调试 adb 就连接不上 Android 设备了。</p>
<p>去设备上手动恢复吧：「设置」-「开发者选项」-「Android 调试」。</p>
<p><a name="e78ab6e68081e6a08fe5928ce5afbce888aae6a08fe79a84e698bee7a4bae99a90e8978f_69"></a><a name="状态栏和导航栏的显示隐藏"></a></p>
<h3 id="状态栏和导航栏的显示隐藏"><a href="#状态栏和导航栏的显示隐藏" class="headerlink" title="状态栏和导航栏的显示隐藏"></a>状态栏和导航栏的显示隐藏</h3><p>本节所说的相关设置对应 Cyanogenmod 里的「扩展桌面」。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global policy_control &lt;key-values&gt;</div></pre></td></tr></table></figure>
<p><code>&lt;key-values&gt;</code> 可由如下几种键及其对应的值组成，格式为 <code>&lt;key1&gt;=&lt;value1&gt;:&lt;key2&gt;=&lt;value2&gt;</code>。</p>
<table>
<thead>
<tr>
<th>key</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>immersive.full</td>
<td>同时隐藏</td>
</tr>
<tr>
<td>immersive.status</td>
<td>隐藏状态栏</td>
</tr>
<tr>
<td>immersive.navigation</td>
<td>隐藏导航栏</td>
</tr>
<tr>
<td>immersive.preconfirms</td>
<td>?</td>
</tr>
</tbody>
</table>
<p>这些键对应的值可则如下值用逗号组合：</p>
<table>
<thead>
<tr>
<th>value</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>apps</code></td>
<td>所有应用</td>
</tr>
<tr>
<td><code>*</code></td>
<td>所有界面</td>
</tr>
<tr>
<td><code>packagename</code></td>
<td>指定应用</td>
</tr>
<tr>
<td><code>-packagename</code></td>
<td>排除指定应用</td>
</tr>
</tbody>
</table>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global policy_control immersive.full=*</div></pre></td></tr></table></figure>
<p>表示设置在所有界面下都同时隐藏状态栏和导航栏。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,-com.package3</div></pre></td></tr></table></figure>
<p>表示设置在包名为 <code>com.package1</code> 和 <code>com.package2</code> 的应用里隐藏状态栏，在除了包名为 <code>com.package3</code> 的所有应用里隐藏导航栏。</p>
<p><a name="e5ae9ee794a8e58a9fe883bd_70"></a><a name="实用功能"></a></p>
<h2 id="实用功能"><a href="#实用功能" class="headerlink" title="实用功能"></a>实用功能</h2><p><a name="e5b18fe5b995e688aae59bbe_71"></a><a name="屏幕截图"></a></p>
<h3 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h3><p>截图保存到电脑：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb exec-out screencap -p &gt; sc.png</div></pre></td></tr></table></figure>
<p>如果 adb 版本较老，无法使用 <code>exec-out</code> 命令，这时候建议更新 adb 版本。无法更新的话可以使用以下麻烦点的办法：</p>
<p>先截图保存到设备里：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screencap -p /sdcard/sc.png</div></pre></td></tr></table></figure>
<p>然后将 png 文件导出到电脑：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /sdcard/sc.png</div></pre></td></tr></table></figure>
<p>可以使用 <code>adb shell screencap -h</code> 查看 <code>screencap</code> 命令的帮助信息，下面是两个有意义的参数及含义：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p</td>
<td>指定保存文件为 png 格式</td>
</tr>
<tr>
<td>-d display-id</td>
<td>指定截图的显示屏编号（有多显示屏的情况下）</td>
</tr>
</tbody>
</table>
<p>实测如果指定文件名以 <code>.png</code> 结尾时可以省略 -p 参数；否则需要使用 -p 参数。如果不指定文件名，截图文件的内容将直接输出到 stdout。</p>
<p>另外一种一行命令截图并保存到电脑的方法：</p>
<p><em>Linux 和 Windows</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screencap -p | sed &quot;s/\r$//&quot; &gt; sc.png</div></pre></td></tr></table></figure>
<p><em>Mac OS X</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screencap -p | gsed &quot;s/\r$//&quot; &gt; sc.png</div></pre></td></tr></table></figure>
<p>这个方法需要用到 gnu sed 命令，在 Linux 下直接就有，在 Windows 下 Git 安装目录的 bin 文件夹下也有。如果确实找不到该命令，可以下载 <a href="http://gnuwin32.sourceforge.net/packages/sed.htm" target="_blank" rel="external">sed for Windows</a> 并将 sed.exe 所在文件夹添加到 PATH 环境变量里。</p>
<p>而在 Mac 下使用系统自带的 sed 命令会报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed: RE error: illegal byte sequence</div></pre></td></tr></table></figure>
<p>需要安装 gnu-sed，然后使用 gsed 命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install gnu-sed</div></pre></td></tr></table></figure>
<p><a name="e5bd95e588b6e5b18fe5b995_72"></a><a name="录制屏幕"></a></p>
<h3 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h3><p>录制屏幕以 mp4 格式保存到 /sdcard：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screenrecord /sdcard/filename.mp4</div></pre></td></tr></table></figure>
<p>需要停止时按 <kbd>Ctrl-C</kbd>，默认录制时间和最长录制时间都是 180 秒。</p>
<p>如果需要导出到电脑：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /sdcard/filename.mp4</div></pre></td></tr></table></figure>
<p>可以使用 <code>adb shell screenrecord --help</code> 查看 <code>screenrecord</code> 命令的帮助信息，下面是常见参数及含义：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>–size WIDTHxHEIGHT</td>
<td>视频的尺寸，比如 <code>1280x720</code>，默认是屏幕分辨率。</td>
</tr>
<tr>
<td>–bit-rate RATE</td>
<td>视频的比特率，默认是 4Mbps。</td>
</tr>
<tr>
<td>–time-limit TIME</td>
<td>录制时长，单位秒。</td>
</tr>
<tr>
<td>–verbose</td>
<td>输出更多信息。</td>
</tr>
</tbody>
</table>
<p><a name="e9878de696b0e68c82e8bdbd20system20e58886e58cbae4b8bae58fafe58699_73"></a><a name="重新挂载-system-分区为可写"></a></p>
<h3 id="重新挂载-system-分区为可写"><a href="#重新挂载-system-分区为可写" class="headerlink" title="重新挂载 system 分区为可写"></a>重新挂载 system 分区为可写</h3><p><strong>注：需要 root 权限。</strong></p>
<p>/system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 /system 进行写操作，所以需要重新挂载它为可读写。</p>
<p>步骤：</p>
<ol>
<li><p>进入 shell 并切换到 root 用户权限。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div></pre></td></tr></table></figure>
</li>
<li><p>查看当前分区挂载情况。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">rootfs / rootfs ro,relatime 0 0</div><div class="line">tmpfs /dev tmpfs rw,seclabel,nosuid,relatime,mode=755 0 0</div><div class="line">devpts /dev/pts devpts rw,seclabel,relatime,mode=600 0 0</div><div class="line">proc /proc proc rw,relatime 0 0</div><div class="line">sysfs /sys sysfs rw,seclabel,relatime 0 0</div><div class="line">selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0</div><div class="line">debugfs /sys/kernel/debug debugfs rw,relatime 0 0</div><div class="line">none /var tmpfs rw,seclabel,relatime,mode=770,gid=1000 0 0</div><div class="line">none /acct cgroup rw,relatime,cpuacct 0 0</div><div class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</div><div class="line">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</div><div class="line">tmpfs /mnt/asec tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</div><div class="line">tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</div><div class="line">none /dev/memcg cgroup rw,relatime,memory 0 0</div><div class="line">none /dev/cpuctl cgroup rw,relatime,cpu 0 0</div><div class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</div><div class="line">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</div><div class="line">none /sys/fs/cgroup/freezer cgroup rw,relatime,freezer 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 rw,seclabel,nosuid,nodev,relatime,noauto_da_alloc,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/cache /cache ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/persist /persist ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/modem /firmware vfat ro,context=u:object_r:firmware_file:s0,relatime,uid=1000,gid=1000,fmask=0337,dmask=0227,codepage=cp437,iocharset=iso8859-1,shortname=lower,errors=remount-ro 0 0</div><div class="line">/dev/fuse /mnt/shell/emulated fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</div><div class="line">/dev/fuse /mnt/shell/emulated/0 fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</div></pre></td></tr></table></figure>
<p>找到其中我们关注的带 /system 的那一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</div></pre></td></tr></table></figure>
</li>
<li><p>重新挂载。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount -o remount,rw -t yaffs2 /dev/block/platform/msm_sdcc.1/by-name/system /system</div></pre></td></tr></table></figure>
<p>这里的 <code>/dev/block/platform/msm_sdcc.1/by-name/system</code> 就是我们从上一步的输出里得到的文件路径。</p>
</li>
</ol>
<p>如果输出没有提示错误的话，操作就成功了，可以对 /system 下的文件为所欲为了。</p>
<p><a name="e69fa5e79c8be8bf9ee68ea5e8bf87e79a8420wifi20e5af86e7a081_74"></a><a name="查看连接过的-wifi-密码"></a></p>
<h3 id="查看连接过的-WiFi-密码"><a href="#查看连接过的-WiFi-密码" class="headerlink" title="查看连接过的 WiFi 密码"></a>查看连接过的 WiFi 密码</h3><p><strong>注：需要 root 权限。</strong></p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div><div class="line">cat /data/misc/wifi/*.conf</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">network=&#123;</div><div class="line">	ssid=&quot;TP-LINK_9DFC&quot;</div><div class="line">	scan_ssid=1</div><div class="line">	psk=&quot;123456789&quot;</div><div class="line">	key_mgmt=WPA-PSK</div><div class="line">	group=CCMP TKIP</div><div class="line">	auth_alg=OPEN</div><div class="line">	sim_num=1</div><div class="line">	priority=13893</div><div class="line">&#125;</div><div class="line"></div><div class="line">network=&#123;</div><div class="line">	ssid=&quot;TP-LINK_F11E&quot;</div><div class="line">	psk=&quot;987654321&quot;</div><div class="line">	key_mgmt=WPA-PSK</div><div class="line">	sim_num=1</div><div class="line">	priority=17293</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ssid</code> 即为我们在 WLAN 设置里看到的名称，<code>psk</code> 为密码，<code>key_mgmt</code> 为安全加密方式。</p>
<p><a name="e8aebee7bdaee7b3bbe7bb9fe697a5e69c9fe5928ce697b6e997b4_75"></a><a name="设置系统日期和时间"></a></p>
<h3 id="设置系统日期和时间"><a href="#设置系统日期和时间" class="headerlink" title="设置系统日期和时间"></a>设置系统日期和时间</h3><p><strong>注：需要 root 权限。</strong></p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div><div class="line">date -s 20160823.131500</div></pre></td></tr></table></figure>
<p>表示将系统日期和时间更改为 2016 年 08 月 23 日 13 点 15 分 00 秒。</p>
<p><a name="e9878de590afe6898be69cba_76"></a><a name="重启手机"></a></p>
<h3 id="重启手机"><a href="#重启手机" class="headerlink" title="重启手机"></a>重启手机</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot</div></pre></td></tr></table></figure>
<p><a name="e6a380e6b58be8aebee5a487e698afe590a6e5b7b220root_77"></a><a name="检测设备是否已-root"></a></p>
<h3 id="检测设备是否已-root"><a href="#检测设备是否已-root" class="headerlink" title="检测设备是否已 root"></a>检测设备是否已 root</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div></pre></td></tr></table></figure>
<p>此时命令行提示符是 <code>$</code> 则表示没有 root 权限，是 <code>#</code> 则表示已 root。</p>
<p><a name="e4bdbfe794a820monkey20e8bf9be8a18ce58e8be58a9be6b58be8af95_78"></a><a name="使用-monkey-进行压力测试"></a></p>
<h3 id="使用-Monkey-进行压力测试"><a href="#使用-Monkey-进行压力测试" class="headerlink" title="使用 Monkey 进行压力测试"></a>使用 Monkey 进行压力测试</h3><p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p>
<p>简单用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell monkey -p &lt;packagename&gt; -v 500</div></pre></td></tr></table></figure>
<p>表示向 <code>&lt;packagename&gt;</code> 指定的应用程序发送 500 个伪随机事件。</p>
<p>Monkey 的详细用法参考 <a href="https://developer.android.com/studio/test/monkey.html" target="_blank" rel="external">官方文档</a>。</p>
<p><a name="e5bc80e590afe585b3e997ad20wifi_79"></a><a name="开启关闭-wifi"></a></p>
<h3 id="开启-关闭-WiFi"><a href="#开启-关闭-WiFi" class="headerlink" title="开启/关闭 WiFi"></a>开启/关闭 WiFi</h3><p><strong>注：需要 root 权限。</strong></p>
<p>有时需要控制设备的 WiFi 状态，可以用以下指令完成。</p>
<p>开启 WiFi：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb root</div><div class="line">adb shell svc wifi enable</div></pre></td></tr></table></figure>
<p>关闭 WiFi：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb root</div><div class="line">adb shell svc wifi disable</div></pre></td></tr></table></figure>
<p>若执行成功，输出为空；若未取得 root 权限执行此命令，将执行失败，输出 <code>Killed</code>。</p>
<p><a name="e588b7e69cbae79bb8e585b3e591bde4bba4_80"></a><a name="刷机相关命令"></a></p>
<h2 id="刷机相关命令"><a href="#刷机相关命令" class="headerlink" title="刷机相关命令"></a>刷机相关命令</h2><p><a name="e9878de590afe588b020recovery20e6a8a1e5bc8f_81"></a><a name="重启到-recovery-模式"></a></p>
<h3 id="重启到-Recovery-模式"><a href="#重启到-Recovery-模式" class="headerlink" title="重启到 Recovery 模式"></a>重启到 Recovery 模式</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot recovery</div></pre></td></tr></table></figure>
<p><a name="e4bb8e20recovery20e9878de590afe588b020android_82"></a><a name="从-recovery-重启到-android"></a></p>
<h3 id="从-Recovery-重启到-Android"><a href="#从-Recovery-重启到-Android" class="headerlink" title="从 Recovery 重启到 Android"></a>从 Recovery 重启到 Android</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot</div></pre></td></tr></table></figure>
<p><a name="e9878de590afe588b020fastboot20e6a8a1e5bc8f_83"></a><a name="重启到-fastboot-模式"></a></p>
<h3 id="重启到-Fastboot-模式"><a href="#重启到-Fastboot-模式" class="headerlink" title="重启到 Fastboot 模式"></a>重启到 Fastboot 模式</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot bootloader</div></pre></td></tr></table></figure>
<p><a name="e9809ae8bf8720sideload20e69bb4e696b0e7b3bbe7bb9f_84"></a><a name="通过-sideload-更新系统"></a></p>
<h3 id="通过-sideload-更新系统"><a href="#通过-sideload-更新系统" class="headerlink" title="通过 sideload 更新系统"></a>通过 sideload 更新系统</h3><p>如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。</p>
<p>以 Recovery 模式下更新为例：</p>
<ol>
<li><p>重启到 Recovery 模式。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot recovery</div></pre></td></tr></table></figure>
</li>
<li><p>在设备的 Recovery 界面上操作进入 <code>Apply update</code>-<code>Apply from ADB</code>。</p>
<p>注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 <code>Apply update from ADB</code>。</p>
</li>
<li><p>通过 adb 上传和更新系统。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb sideload &lt;path-to-update.zip&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><a name="e69bb4e5a49a20adb20shell20e591bde4bba4_85"></a><a name="更多-adb-shell-命令"></a></p>
<h2 id="更多-adb-shell-命令"><a href="#更多-adb-shell-命令" class="headerlink" title="更多 adb shell 命令"></a>更多 adb shell 命令</h2><p>Android 系统是基于 Linux 内核的，所以 Linux 里的很多命令在 Android 里也有相同或类似的实现，在 <code>adb shell</code> 里可以调用。本文档前面的部分内容已经用到了 <code>adb shell</code> 命令。</p>
<p><a name="e69fa5e79c8be8bf9be7a88b_86"></a><a name="查看进程"></a></p>
<h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell ps</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">USER     PID   PPID  VSIZE  RSS     WCHAN    PC        NAME</div><div class="line">root      1     0     8904   788   ffffffff 00000000 S /init</div><div class="line">root      2     0     0      0     ffffffff 00000000 S kthreadd</div><div class="line">...</div><div class="line">u0_a71    7779  5926  1538748 48896 ffffffff 00000000 S com.sohu.inputmethod.sogou:classic</div><div class="line">u0_a58    7963  5926  1561916 59568 ffffffff 00000000 S org.mazhuang.boottimemeasure</div><div class="line">...</div><div class="line">shell     8750  217   10640  740   00000000 b6f28340 R ps</div></pre></td></tr></table></figure>
<p>各列含义：</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>USER</td>
<td>所属用户</td>
</tr>
<tr>
<td>PID</td>
<td>进程 ID</td>
</tr>
<tr>
<td>PPID</td>
<td>父进程 ID</td>
</tr>
<tr>
<td>NAME</td>
<td>进程名</td>
</tr>
</tbody>
</table>
<p><a name="e69fa5e79c8be5ae9ee697b6e8b584e6ba90e58da0e794a8e68385e586b5_87"></a><a name="查看实时资源占用情况"></a></p>
<h3 id="查看实时资源占用情况"><a href="#查看实时资源占用情况" class="headerlink" title="查看实时资源占用情况"></a>查看实时资源占用情况</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell top</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">User 0%, System 6%, IOW 0%, IRQ 0%</div><div class="line">User 3 + Nice 0 + Sys 21 + Idle 280 + IOW 0 + IRQ 0 + SIRQ 3 = 307</div><div class="line"></div><div class="line">  PID PR CPU% S  #THR     VSS     RSS PCY UID      Name</div><div class="line"> 8763  0   3% R     1  10640K   1064K  fg shell    top</div><div class="line">  131  0   3% S     1      0K      0K  fg root     dhd_dpc</div><div class="line"> 6144  0   0% S   115 1682004K 115916K  fg system   system_server</div><div class="line">  132  0   0% S     1      0K      0K  fg root     dhd_rxf</div><div class="line"> 1731  0   0% S     6  20288K    788K  fg root     /system/bin/mpdecision</div><div class="line">  217  0   0% S     6  18008K    356K  fg shell    /sbin/adbd</div><div class="line"> ...</div><div class="line"> 7779  2   0% S    19 1538748K  48896K  bg u0_a71   com.sohu.inputmethod.sogou:classic</div><div class="line"> 7963  0   0% S    18 1561916K  59568K  fg u0_a58   org.mazhuang.boottimemeasure</div><div class="line"> ...</div></pre></td></tr></table></figure>
<p>各列含义：</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>PID</td>
<td>进程 ID</td>
</tr>
<tr>
<td>PR</td>
<td>优先级</td>
</tr>
<tr>
<td>CPU%</td>
<td>当前瞬间占用 CPU 百分比</td>
</tr>
<tr>
<td>S</td>
<td>进程状态（R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）</td>
</tr>
<tr>
<td>#THR</td>
<td>线程数</td>
</tr>
<tr>
<td>VSS</td>
<td>Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）</td>
</tr>
<tr>
<td>RSS</td>
<td>Resident Set Size 实际使用物理内存（包含共享库占用的内存）</td>
</tr>
<tr>
<td>PCY</td>
<td>调度策略优先级，SP_BACKGROUND/SPFOREGROUND</td>
</tr>
<tr>
<td>UID</td>
<td>进程所有者的用户 ID</td>
</tr>
<tr>
<td>NAME</td>
<td>进程名</td>
</tr>
</tbody>
</table>
<p><code>top</code> 命令还支持一些命令行参数，详细用法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Usage: top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ]</div><div class="line">    -m num  最多显示多少个进程</div><div class="line">    -n num  刷新多少次后退出</div><div class="line">    -d num  刷新时间间隔（单位秒，默认值 5）</div><div class="line">    -s col  按某列排序（可用 col 值：cpu, vss, rss, thr）</div><div class="line">    -t      显示线程信息</div><div class="line">    -h      显示帮助文档</div></pre></td></tr></table></figure>
<p><a name="e585b6e5ae83_88"></a><a name="其它"></a></p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>如下是其它常用命令的简单描述，前文已经专门讲过的命令不再额外说明：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>cat</td>
<td>显示文件内容</td>
</tr>
<tr>
<td>cd</td>
<td>切换目录</td>
</tr>
<tr>
<td>chmod</td>
<td>改变文件的存取模式/访问权限</td>
</tr>
<tr>
<td>df</td>
<td>查看磁盘空间使用情况</td>
</tr>
<tr>
<td>grep</td>
<td>过滤输出</td>
</tr>
<tr>
<td>kill</td>
<td>杀死指定 PID 的进程</td>
</tr>
<tr>
<td>ls</td>
<td>列举目录内容</td>
</tr>
<tr>
<td>mount</td>
<td>挂载目录的查看和管理</td>
</tr>
<tr>
<td>mv</td>
<td>移动或重命名文件</td>
</tr>
<tr>
<td>ps</td>
<td>查看正在运行的进程</td>
</tr>
<tr>
<td>rm</td>
<td>删除文件</td>
</tr>
<tr>
<td>top</td>
<td>查看进程的资源占用情况</td>
</tr>
</tbody>
</table>
<p><a name="e5b8b8e8a781e997aee9a298_89"></a><a name="常见问题"></a></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><a name="e590afe58aa820adb20server20e5a4b1e8b4a5_90"></a><a name="启动-adb-server-失败"></a></p>
<h3 id="启动-adb-server-失败"><a href="#启动-adb-server-失败" class="headerlink" title="启动 adb server 失败"></a>启动 adb server 失败</h3><p><strong>出错提示</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error: protocol fault (couldn&apos;t read status): No error</div></pre></td></tr></table></figure>
<p><strong>可能原因</strong></p>
<p>adb server 进程想使用的 5037 端口被占用。</p>
<p><strong>解决方案</strong></p>
<p>找到占用 5037 端口的进程，然后终止它。以 Windows 下为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">netstat -ano | findstr LISTENING</div><div class="line"></div><div class="line">...</div><div class="line">TCP    0.0.0.0:5037           0.0.0.0:0              LISTENING       1548</div><div class="line">...</div></pre></td></tr></table></figure>
<p>这里 1548 即为进程 ID，用命令结束该进程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">taskkill /PID 1548</div></pre></td></tr></table></figure>
<p>然后再启动 adb 就没问题了。</p>
<p><a name="adb20e79a84e99d9ee5ae98e696b9e5ae9ee78eb0_91"></a><a name="adb-的非官方实现"></a></p>
<h2 id="adb-的非官方实现"><a href="#adb-的非官方实现" class="headerlink" title="adb 的非官方实现"></a>adb 的非官方实现</h2><ul>
<li><a href="https://github.com/facebook/fb-adb" target="_blank" rel="external">fb-adb</a> - A better shell for Android devices (for Mac).</li>
</ul>
<p><a name="e887b4e8b0a2_92"></a><a name="致谢"></a></p>
<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢朋友们无私的分享与补充（排名不分先后）。</p>
<p><a href="https://github.com/zxning" target="_blank" rel="external">zxning</a>，<a href="https://github.com/linhua55" target="_blank" rel="external">linhua55</a>，<a href="https://github.com/codeskyblue" target="_blank" rel="external">codeskyblue</a>，<a href="https://github.com/seasonyuu" target="_blank" rel="external">seasonyuu</a>，<a href="https://github.com/fan123199" target="_blank" rel="external">fan123199</a>，<a href="https://github.com/zhEdward" target="_blank" rel="external">zhEdward</a>，<a href="https://github.com/0x8BADFOOD" target="_blank" rel="external">0x8BADFOOD</a>，<a href="https://github.com/keith666666" target="_blank" rel="external">keith666666</a>。</p>
<p><a name="e58f82e88083e993bee68ea5_93"></a><a name="参考链接"></a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="external">Android Debug Bridge</a></li>
<li><a href="https://developer.android.com/studio/command-line/shell.html" target="_blank" rel="external">ADB Shell Commands</a></li>
<li><a href="https://developer.android.com/studio/command-line/logcat.html" target="_blank" rel="external">logcat Command-line Tool</a></li>
<li><a href="http://zmywly8866.github.io/2015/01/24/all-adb-command.html" target="_blank" rel="external">Android ADB命令大全</a></li>
<li><a href="https://github.com/ZQiang94/StudyRecords/blob/master/other/src/main/java/com/other/adb%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.md" target="_blank" rel="external">adb 命令行的使用记录</a></li>
<li><a href="http://www.jianshu.com/p/860bc2bf1a6a" target="_blank" rel="external">Android ADB命令大全(通过ADB命令查看wifi密码、MAC地址、设备信息、操作文件、查看文件、日志信息、卸载、启动和安装APK等)</a></li>
<li><a href="http://yifeiyuan.me/2016/06/30/ADB%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/" target="_blank" rel="external">那些做Android开发必须知道的ADB命令</a></li>
<li><a href="http://blog.csdn.net/kittyboy0001/article/details/38562515" target="_blank" rel="external">adb shell top</a></li>
<li><a href="http://cabins.github.io/2016/03/25/UseAdbLikeAPro-2/" target="_blank" rel="external">像高手一样使用ADB命令行（2）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;adb&quot;&gt;&lt;a href=&quot;#adb&quot; class=&quot;headerlink&quot; title=&quot;adb&quot;&gt;&lt;/a&gt;adb&lt;/h1&gt;&lt;p&gt;adb&lt;a name=&quot;adb_1&quot;&gt;&lt;/a&gt;&lt;a name=&quot;adb&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;adb-1&quot;&gt;&lt;a hr
    
    </summary>
    
    
  </entry>
  
</feed>
